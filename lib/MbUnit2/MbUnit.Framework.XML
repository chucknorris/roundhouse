<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>MbUnit.Framework</name>
  </assembly>
  <members>
    <member name="T:MbUnit.Core.AssemblyEventArgs">
      <summary>Event argument that contains an assembly.</summary>
    </member>
    <member name="P:MbUnit.Core.Fixture.IsIgnored">
      <summary>Returns true if the entire test fixture is ignored.</summary>
    </member>
    <member name="T:MbUnit.Core.MethodSignature">
      <summary>TODO - Add class summary</summary>
    </member>
    <member name="T:MbUnit.Core.ResourceHelper">
      <summary>Static helper functions for retreiving resources This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Core.ResourceHelper.CreateImages(System.String)">
      <summary>Creates and saves the images in the directory with the specified path.</summary>
      <param name="path">The directory path in which to save the images</param>
    </member>
    <member name="T:MbUnit.Core.RunPipe">
      <summary>This class represents the execution pipe of a test. It contains a sequence of <see cref="T:MbUnit.Core.Invokers.IRunInvoker" />.</summary>
    </member>
    <member name="T:MbUnit.Core.RunPipeEventArgs">
      <summary>TODO - Add class summary</summary>
    </member>
    <member name="T:MbUnit.Core.TypeEventArgs">
      <summary>Event argument that carries a <see cref="P:MbUnit.Core.TypeEventArgs.Type" /> instance.</summary>
    </member>
    <member name="T:MbUnit.Core.TypeHelper">
      <summary>Helper static class for Type related tasks This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.CreateInstance(System.Type)">
      <summary>Creates an instance of the type <paramref name="t" /> using the default Method.</summary>
      <param name="t">type to instanciate</param>
      <returns>type <paramref name="t" /> instance</returns>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.CreateInstance(System.Type,System.Object[])">
      <summary>Creates an instance of the type <paramref name="t" /> using the Method that matches the signature defined by <paramref name="args" /></summary>
      <param name="t">type to instanciate</param>
      <param name="args">argument of the Method</param>
      <returns>type <paramref name="t" /> instance initialized using <paramref name="args" /></returns>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.GetAttributedMethod(System.Type,System.Type)">
      <summary>Gets the first method of the type <paramref name="t" /> that is tagged by a <paramref name="customAttributeType" /> instance.</summary>
      <param name="t">type to test</param>
      <param name="customAttributeType">custom attribute type to search</param>
      <returns>First method of <paramref name="t" /> that that is tagged by a <paramref name="customAttributeType" /> instance, null if no method is tagged by the specified attribute type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> or <paramref name="customAttributeType" /> is a null reference </exception>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.GetAttributedMethods(System.Type,System.Type)">
      <summary>Gets all methods of the type <paramref name="t" /> that are tagged by a <paramref name="customAttributeType" /> instance.</summary>
      <param name="t">type to test</param>
      <param name="customAttributeType">custom attribute type to search</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> collection of type <paramref name="t" /> that that are tagged by a <paramref name="customAttributeType" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> or <paramref name="customAttributeType" /> is a null reference </exception>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.GetConstructor(System.Type,System.Type[])">
      <summary>Retreives the <see cref="T:System.Reflection.MethodInfo" /> that matches the signature.</summary>
      <param name="t">type to test</param>
      <param name="types">Method parameter types</param>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> instance of <paramref name="t" /> matching the signature.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> is a null reference</exception>
      <exception cref="T:MbUnit.Core.Exceptions.MethodNotFoundException"> No Method of type <paramref name="t" /> match the signature defined by <paramref name="types" />. </exception>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.GetConstructor(System.Type,System.Object[])">
      <summary>Retreives the <see cref="T:System.Reflection.MethodInfo" /> that matches the signature, given the list of arguments.</summary>
      <param name="t">type to test</param>
      <param name="args">Method arguments from which the signature is deduced</param>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> instance of <paramref name="t" /> matching the signature defined by the list of arguments.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> is a null reference</exception>
      <exception cref="T:System.ArgumentNullException"> One of the args item is a null reference </exception>
      <exception cref="T:MbUnit.Core.Exceptions.MethodNotFoundException"> No Method of type <paramref name="t" /> match the signature defined by <paramref name="args" />. </exception>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.GetFirstCustomAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
      <summary>Gets the first instance of <paramref name="customAttributeType" /> from the method <paramref name="mi" /> custom attributes.</summary>
      <param name="mi">Method to test</param>
      <param name="customAttributeType">custom attribute type to search</param>
      <returns>First instance of <paramref name="customAttributeTyp" /> from the method <paramref name="mi" /> custom attributes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mi" /> or <paramref name="customAttributeType" /> is a null reference </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mi" /> is not tagged by an attribute of type <paramref name="customAttributeType" /></exception>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.GetIndexer(System.Type,System.Type[])">
      <summary>Retreives the indexer that matches the signature</summary>
      <param name="t">type that holds the indexer</param>
      <param name="args">indexer arguments</param>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.GetValue(System.Reflection.PropertyInfo,System.Object,System.Object[])">
      <summary>Gets the value of the property <paramref name="pi" />.</summary>
      <param name="pi">property</param>
      <param name="o">object instnace</param>
      <param name="args">property arguments (in case of an indexer</param>
      <returns>property value</returns>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.HasConstructor(System.Type,System.Type[])">
      <summary>Gets a value indicating if the type <paramref name="t" /> contains a Method with the signature defined by <paramref name="types" />.</summary>
      <param name="t">type to test</param>
      <param name="types">arguments of the Method</param>
      <returns>true if <paramref name="t" /> contains a Method matching types</returns>
      <exception cref="T:System.ArgumentNullException">t is a null reference</exception>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.HasCustomAttribute(System.Type,System.Type)">
      <summary>Gets a value indicating if the <paramref name="t" /> is tagged by a <paramref name="customAttributeType" /> instance.</summary>
      <param name="t">method to test</param>
      <param name="customAttributeType">custom attribute type to search</param>
      <returns>true if <paramref name="t" /> is tagged by a <paramref name="customAttributeType" /> attribute, false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> or <paramref name="customAttributeType" /> is a null reference </exception>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.HasCustomAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
      <summary>Gets a value indicating if the method info <paramref name="t" /> is tagged by a <paramref name="customAttributeType" /> instance.</summary>
      <param name="t">method to test</param>
      <param name="customAttributeType">custom attribute type to search</param>
      <returns>true if <paramref name="t" /> is tagged by a <paramref name="customAttributeType" /> attribute, false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> or <paramref name="customAttributeType" /> is a null reference </exception>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.HasIndexer(System.Type,System.Type[])">
      <summary>Gets a value indicating if the type <paramref name="t" /> has an indexer that takes <paramref name="args" /> arguments.</summary>
      <param name="t">type that holds the indexer</param>
      <param name="args">indexer arguments</param>
      <returns>true if an indexer that matched the signature was found, false otherwise</returns>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.HasMethodCustomAttribute(System.Type,System.Type)">
      <summary>Gets a value indicating the class type <paramref name="t" /> has a method that is tagged by a <paramref name="customAttributeType" /> instance.</summary>
      <param name="t">type to test</param>
      <param name="customAttributeType">custom attribute type to search</param>
      <returns>true if class type <paramref name="t" /> has a method tagged by a <paramref name="customAttributeType" /> attribute, false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> or <paramref name="customAttributeType" /> is a null reference </exception>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.ParametersMatch(System.Reflection.ParameterInfo[],System.Type[])">
      <summary>Gets a value indicating if the <paramref name="parameters" /> match the <paramref name="types" /></summary>
      <param name="parameters">property or method paramter info</param>
      <param name="types">tested signature</param>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.ShowMethodAttributes(System.Type)">
      <summary>Output the methods and their custom attributes to the console. (Debugging method)</summary>
      <param name="t">type to visit</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> is a null reference </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> is anot a class type. </exception>
    </member>
    <member name="M:MbUnit.Core.TypeHelper.TryGetFirstCustomAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
      <summary>Gets the first instance of <paramref name="customAttributeType" /> from the method <paramref name="mi" /> custom attributes.</summary>
      <param name="mi">Method to test</param>
      <param name="customAttributeType">custom attribute type to search</param>
      <returns>First instance of <paramref name="customAttributeTyp" /> from the method <paramref name="mi" /> custom attributes; otherwize a null reference</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mi" /> or <paramref name="customAttributeType" /> is a null reference </exception>
    </member>
    <member name="T:MbUnit.Core.AssemblyEventHandler">
      <summary>Assembly event delegate</summary>
    </member>
    <member name="T:MbUnit.Core.TypeEventHandler">
      <summary>Type event delegate</summary>
    </member>
    <member name="T:MbUnit.Core.Collections.AssemblyCollection">
      <summary>A collection of elements of type Assembly This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Core.Collections.AssemblyCollection.Item(System.Int32)">
      <summary>Gets or sets the Assembly at the given index in this AssemblyCollection.</summary>
    </member>
    <member name="M:MbUnit.Core.Collections.AssemblyCollection.Add(System.Reflection.Assembly)">
      <summary>Adds an instance of type Assembly to the end of this AssemblyCollection.</summary>
      <param name="value">The Assembly to be added to the end of this AssemblyCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.AssemblyCollection.Contains(System.Reflection.Assembly)">
      <summary>Determines whether a specfic Assembly value is in this AssemblyCollection.</summary>
      <param name="value">The Assembly value to locate in this AssemblyCollection.</param>
      <returns>true if value is found in this AssemblyCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.AssemblyCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this AssemblyCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.AssemblyCollection.Remove(System.Reflection.Assembly)">
      <summary>Removes the first occurrence of a specific Assembly from this AssemblyCollection.</summary>
      <param name="value">The Assembly value to remove from this AssemblyCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Collections.AssemblyCollection.Enumerator">
      <summary>Type-specific enumeration class, used by AssemblyCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary">
      <summary>A dictionary with keys of type Assembly and values of type TypeCollection This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary.Item(System.Reflection.Assembly)">
      <summary>Gets or sets the TypeCollection associated with the given Assembly</summary>
      <param name="key">The Assembly whose value to get or set.</param>
    </member>
    <member name="P:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary.Keys">
      <summary>Gets a collection containing the keys in this AssemblyTypeCollectionDictionary.</summary>
    </member>
    <member name="P:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary.Values">
      <summary>Gets a collection containing the values in this AssemblyTypeCollectionDictionary.</summary>
    </member>
    <member name="M:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary.Add(System.Reflection.Assembly)">
      <summary>Adds an element with the specified key and value to this AssemblyTypeCollectionDictionary.</summary>
      <param name="key">The Assembly key of the element to add.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary.Contains(System.Reflection.Assembly)">
      <summary>Determines whether this AssemblyTypeCollectionDictionary contains a specific key.</summary>
      <param name="key">The Assembly key to locate in this AssemblyTypeCollectionDictionary.</param>
      <returns>true if this AssemblyTypeCollectionDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary.Remove(System.Reflection.Assembly)">
      <summary>Removes the element with the specified key from this AssemblyTypeCollectionDictionary.</summary>
      <param name="key">The Assembly key of the element to remove.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.FixtureCollection.Add(MbUnit.Core.Fixture)">
      <summary>Adds an instance of type Fixture to the end of this FixtureCollection.</summary>
      <param name="value">The Fixture to be added to the end of this FixtureCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.FixtureCollection.Contains(MbUnit.Core.Fixture)">
      <summary>Determines whether a specfic Fixture value is in this FixtureCollection.</summary>
      <param name="value">The Fixture value to locate in this FixtureCollection.</param>
      <returns>true if value is found in this FixtureCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.FixtureCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this FixtureCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.FixtureCollection.Remove(MbUnit.Core.Fixture)">
      <summary>Removes the first occurrence of a specific Fixture from this FixtureCollection.</summary>
      <param name="value">The Fixture value to remove from this FixtureCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Collections.FixtureCollection.Enumerator">
      <summary>Type-specific enumeration class, used by FixtureCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Collections.FixtureFactoryCollection">
      <summary>A collection of elements of type IFixtureFactory This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Core.Collections.FixtureFactoryCollection.Add(MbUnit.Core.IFixtureFactory)">
      <summary>Adds an instance of type IFixtureFactory to the end of this FixtureFactoryCollection.</summary>
      <param name="value">The IFixtureFactory to be added to the end of this FixtureFactoryCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.FixtureFactoryCollection.Contains(MbUnit.Core.IFixtureFactory)">
      <summary>Determines whether a specfic IFixtureFactory value is in this FixtureFactoryCollection.</summary>
      <param name="value">The IFixtureFactory value to locate in this FixtureFactoryCollection.</param>
      <returns>true if value is found in this FixtureFactoryCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.FixtureFactoryCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this FixtureFactoryCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.FixtureFactoryCollection.Remove(MbUnit.Core.IFixtureFactory)">
      <summary>Removes the first occurrence of a specific IFixtureFactory from this FixtureFactoryCollection.</summary>
      <param name="value">The IFixtureFactory value to remove from this FixtureFactoryCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Collections.FixtureFactoryCollection.Enumerator">
      <summary>Type-specific enumeration class, used by FixtureFactoryCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Collections.RunCollection">
      <summary>A collection of elements of type IRun This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Core.Collections.RunCollection.Item(System.Int32)">
      <summary>Gets or sets the IRun at the given index in this RunCollection.</summary>
    </member>
    <member name="M:MbUnit.Core.Collections.RunCollection.Add(MbUnit.Core.Runs.IRun)">
      <summary>Adds an instance of type IRun to the end of this RunCollection.</summary>
      <param name="value">The IRun to be added to the end of this RunCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.RunCollection.Contains(MbUnit.Core.Runs.IRun)">
      <summary>Determines whether a specfic IRun value is in this RunCollection.</summary>
      <param name="value">The IRun value to locate in this RunCollection.</param>
      <returns>true if value is found in this RunCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this RunCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunCollection.Remove(MbUnit.Core.Runs.IRun)">
      <summary>Removes the first occurrence of a specific IRun from this RunCollection.</summary>
      <param name="value">The IRun value to remove from this RunCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Collections.RunCollection.Enumerator">
      <summary>Type-specific enumeration class, used by RunCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Collections.RunInvokerCollection">
      <summary>A collection of elements of type IRunInvoker This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Core.Collections.RunInvokerCollection.Item(System.Int32)">
      <summary>Gets or sets the IRunInvoker at the given index in this IRunInvokerCollection.</summary>
    </member>
    <member name="M:MbUnit.Core.Collections.RunInvokerCollection.Add(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Adds an instance of type IRunInvoker to the end of this IRunInvokerCollection.</summary>
      <param name="value">The IRunInvoker to be added to the end of this IRunInvokerCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.RunInvokerCollection.Contains(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Determines whether a specfic IRunInvoker value is in this IRunInvokerCollection.</summary>
      <param name="value">The IRunInvoker value to locate in this IRunInvokerCollection.</param>
      <returns>true if value is found in this IRunInvokerCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunInvokerCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this IRunInvokerCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunInvokerCollection.Remove(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Removes the first occurrence of a specific IRunInvoker from this IRunInvokerCollection.</summary>
      <param name="value">The IRunInvoker value to remove from this IRunInvokerCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Collections.RunInvokerCollection.Enumerator">
      <summary>Type-specific enumeration class, used by IRunInvokerCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Collections.RunInvokerVertexCollection">
      <summary>A collection of elements of type RunInvokerVertex This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Core.Collections.RunInvokerVertexCollection.Item(System.Int32)">
      <summary>Gets or sets the RunInvokerVertex at the given index in this RunInvokerVertexCollection.</summary>
    </member>
    <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollection.Add(MbUnit.Core.Invokers.RunInvokerVertex)">
      <summary>Adds an instance of type RunInvokerVertex to the end of this RunInvokerVertexCollection.</summary>
      <param name="value">The RunInvokerVertex to be added to the end of this RunInvokerVertexCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollection.Contains(MbUnit.Core.Invokers.RunInvokerVertex)">
      <summary>Determines whether a specfic RunInvokerVertex value is in this RunInvokerVertexCollection.</summary>
      <param name="value">The RunInvokerVertex value to locate in this RunInvokerVertexCollection.</param>
      <returns>true if value is found in this RunInvokerVertexCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this RunInvokerVertexCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollection.Remove(MbUnit.Core.Invokers.RunInvokerVertex)">
      <summary>Removes the first occurrence of a specific RunInvokerVertex from this RunInvokerVertexCollection.</summary>
      <param name="value">The RunInvokerVertex value to remove from this RunInvokerVertexCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Collections.RunInvokerVertexCollection.Enumerator">
      <summary>Type-specific enumeration class, used by RunInvokerVertexCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection">
      <summary>A collection of elements of type RunInvokerVertexCollection This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection.Item(System.Int32)">
      <summary>Gets or sets the RunInvokerVertexCollection at the given index in this RunInvokerVertexCollectionCollection.</summary>
    </member>
    <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection.Add(MbUnit.Core.Collections.RunInvokerVertexCollection)">
      <summary>Adds an instance of type RunInvokerVertexCollection to the end of this RunInvokerVertexCollectionCollection.</summary>
      <param name="value">The RunInvokerVertexCollection to be added to the end of this RunInvokerVertexCollectionCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection.Contains(MbUnit.Core.Collections.RunInvokerVertexCollection)">
      <summary>Determines whether a specfic RunInvokerVertexCollection value is in this RunInvokerVertexCollectionCollection.</summary>
      <param name="value">The RunInvokerVertexCollection value to locate in this RunInvokerVertexCollectionCollection.</param>
      <returns>true if value is found in this RunInvokerVertexCollectionCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this RunInvokerVertexCollectionCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection.Remove(MbUnit.Core.Collections.RunInvokerVertexCollection)">
      <summary>Removes the first occurrence of a specific RunInvokerVertexCollection from this RunInvokerVertexCollectionCollection.</summary>
      <param name="value">The RunInvokerVertexCollection value to remove from this RunInvokerVertexCollectionCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection.Enumerator">
      <summary>Type-specific enumeration class, used by RunInvokerVertexCollectionCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Collections.RunPipeCollection">
      <summary>A collection of elements of type RunPipe This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Core.Collections.RunPipeCollection.Item(System.Int32)">
      <summary>Gets or sets the RunPipe at the given index in this RunPipeCollection.</summary>
    </member>
    <member name="M:MbUnit.Core.Collections.RunPipeCollection.Add(MbUnit.Core.RunPipe)">
      <summary>Adds an instance of type RunPipe to the end of this RunPipeCollection.</summary>
      <param name="value">The RunPipe to be added to the end of this RunPipeCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.RunPipeCollection.Contains(MbUnit.Core.RunPipe)">
      <summary>Determines whether a specfic RunPipe value is in this RunPipeCollection.</summary>
      <param name="value">The RunPipe value to locate in this RunPipeCollection.</param>
      <returns>true if value is found in this RunPipeCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunPipeCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this RunPipeCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunPipeCollection.Remove(MbUnit.Core.RunPipe)">
      <summary>Removes the first occurrence of a specific RunPipe from this RunPipeCollection.</summary>
      <param name="value">The RunPipe value to remove from this RunPipeCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Collections.RunPipeCollection.Enumerator">
      <summary>Type-specific enumeration class, used by RunPipeCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Collections.RunPipeListenerCollection">
      <summary>A collection of elements of type IRunPipeListener This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Core.Collections.RunPipeListenerCollection.Add(MbUnit.Core.IRunPipeListener)">
      <summary>Adds an instance of type IRunPipeListener to the end of this RunPipeListenerCollection.</summary>
      <param name="value">The IRunPipeListener to be added to the end of this RunPipeListenerCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.RunPipeListenerCollection.Contains(MbUnit.Core.IRunPipeListener)">
      <summary>Determines whether a specfic IRunPipeListener value is in this RunPipeListenerCollection.</summary>
      <param name="value">The IRunPipeListener value to locate in this RunPipeListenerCollection.</param>
      <returns>true if value is found in this RunPipeListenerCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunPipeListenerCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this RunPipeListenerCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunPipeListenerCollection.Remove(MbUnit.Core.IRunPipeListener)">
      <summary>Removes the first occurrence of a specific IRunPipeListener from this RunPipeListenerCollection.</summary>
      <param name="value">The IRunPipeListener value to remove from this RunPipeListenerCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Collections.RunPipeListenerCollection.Enumerator">
      <summary>Type-specific enumeration class, used by RunPipeListenerCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Collections.RunPipeStarterCollection">
      <summary>A collection of elements of type RunPipeStarter This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Core.Collections.RunPipeStarterCollection.Add(MbUnit.Core.RunPipeStarter)">
      <summary>Adds an instance of type RunPipeStarter to the end of this RunPipeStarterCollection.</summary>
      <param name="value">The RunPipeStarter to be added to the end of this RunPipeStarterCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.RunPipeStarterCollection.Contains(MbUnit.Core.RunPipeStarter)">
      <summary>Determines whether a specfic RunPipeStarter value is in this RunPipeStarterCollection.</summary>
      <param name="value">The RunPipeStarter value to locate in this RunPipeStarterCollection.</param>
      <returns>true if value is found in this RunPipeStarterCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunPipeStarterCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this RunPipeStarterCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunPipeStarterCollection.Remove(MbUnit.Core.RunPipeStarter)">
      <summary>Removes the first occurrence of a specific RunPipeStarter from this RunPipeStarterCollection.</summary>
      <param name="value">The RunPipeStarter value to remove from this RunPipeStarterCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Collections.RunPipeStarterCollection.Enumerator">
      <summary>Type-specific enumeration class, used by RunPipeStarterCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Collections.RunVertexDictionary">
      <summary>A dictionary with keys of type IRun and values of type RunVertex This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Core.Collections.RunVertexDictionary.Item(MbUnit.Core.Runs.IRun)">
      <summary>Gets or sets the RunVertex associated with the given IRun</summary>
      <param name="key">The IRun whose value to get or set.</param>
    </member>
    <member name="P:MbUnit.Core.Collections.RunVertexDictionary.Keys">
      <summary>Gets a collection containing the keys in this RunVertexDictionary.</summary>
    </member>
    <member name="P:MbUnit.Core.Collections.RunVertexDictionary.Values">
      <summary>Gets a collection containing the values in this RunVertexDictionary.</summary>
    </member>
    <member name="M:MbUnit.Core.Collections.RunVertexDictionary.Add(MbUnit.Core.Runs.IRun,MbUnit.Core.Runs.RunVertex)">
      <summary>Adds an element with the specified key and value to this RunVertexDictionary.</summary>
      <param name="key">The IRun key of the element to add.</param>
      <param name="value">The RunVertex value of the element to add.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.RunVertexDictionary.Contains(MbUnit.Core.Runs.IRun)">
      <summary>Determines whether this RunVertexDictionary contains a specific key.</summary>
      <param name="key">The IRun key to locate in this RunVertexDictionary.</param>
      <returns>true if this RunVertexDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunVertexDictionary.ContainsValue(MbUnit.Core.Runs.RunVertex)">
      <summary>Determines whether this RunVertexDictionary contains a specific value.</summary>
      <param name="value">The RunVertex value to locate in this RunVertexDictionary.</param>
      <returns>true if this RunVertexDictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.RunVertexDictionary.Remove(MbUnit.Core.Runs.IRun)">
      <summary>Removes the element with the specified key from this RunVertexDictionary.</summary>
      <param name="key">The IRun key of the element to remove.</param>
    </member>
    <member name="T:MbUnit.Core.Collections.ThreadCollection">
      <summary>A collection of elements of type Thread This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Core.Collections.ThreadCollection.Item(System.Int32)">
      <summary>Gets or sets the Thread at the given index in this ThreadCollection.</summary>
    </member>
    <member name="M:MbUnit.Core.Collections.ThreadCollection.Add(System.Threading.Thread)">
      <summary>Adds an instance of type Thread to the end of this ThreadCollection.</summary>
      <param name="value">The Thread to be added to the end of this ThreadCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.ThreadCollection.Contains(System.Threading.Thread)">
      <summary>Determines whether a specfic Thread value is in this ThreadCollection.</summary>
      <param name="value">The Thread value to locate in this ThreadCollection.</param>
      <returns>true if value is found in this ThreadCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.ThreadCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this ThreadCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.ThreadCollection.Remove(System.Threading.Thread)">
      <summary>Removes the first occurrence of a specific Thread from this ThreadCollection.</summary>
      <param name="value">The Thread value to remove from this ThreadCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Collections.ThreadCollection.Enumerator">
      <summary>Type-specific enumeration class, used by ThreadCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Collections.TypeCollection">
      <summary>A collection of elements of type Type This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Core.Collections.TypeCollection.Item(System.Int32)">
      <summary>Gets or sets the Type at the given index in this TypeCollection.</summary>
    </member>
    <member name="M:MbUnit.Core.Collections.TypeCollection.Add(System.Type)">
      <summary>Adds an instance of type Type to the end of this TypeCollection.</summary>
      <param name="value">The Type to be added to the end of this TypeCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Collections.TypeCollection.Contains(System.Type)">
      <summary>Determines whether a specfic Type value is in this TypeCollection.</summary>
      <param name="value">The Type value to locate in this TypeCollection.</param>
      <returns>true if value is found in this TypeCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.TypeCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this TypeCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Collections.TypeCollection.Remove(System.Type)">
      <summary>Removes the first occurrence of a specific Type from this TypeCollection.</summary>
      <param name="value">The Type value to remove from this TypeCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Collections.TypeCollection.Enumerator">
      <summary>Type-specific enumeration class, used by TypeCollection.GetEnumerator. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Cons.CommandLine.CommandLineArgumentAttribute">
      <summary>Allows control of command line parsing. Attach this attribute to instance fields of types used as the destination of command line argument parsing.</summary>
    </member>
    <member name="P:MbUnit.Core.Cons.CommandLine.CommandLineArgumentAttribute.DefaultLongName">
      <summary>Returns true if the argument did not have an explicit long name specified.</summary>
    </member>
    <member name="P:MbUnit.Core.Cons.CommandLine.CommandLineArgumentAttribute.DefaultShortName">
      <summary>Returns true if the argument did not have an explicit short name specified.</summary>
    </member>
    <member name="P:MbUnit.Core.Cons.CommandLine.CommandLineArgumentAttribute.LongName">
      <summary>The long name of the argument.</summary>
    </member>
    <member name="P:MbUnit.Core.Cons.CommandLine.CommandLineArgumentAttribute.ShortName">
      <summary>The short name of the argument.</summary>
    </member>
    <member name="P:MbUnit.Core.Cons.CommandLine.CommandLineArgumentAttribute.Type">
      <summary>The error checking to be done on the argument.</summary>
    </member>
    <member name="T:MbUnit.Core.Cons.CommandLine.CommandLineArgumentParser">
      <summary>Parser for command line arguments.</summary>
    </member>
    <member name="P:MbUnit.Core.Cons.CommandLine.CommandLineArgumentParser.Usage">
      <summary>A user friendly usage string describing the command line argument syntax.</summary>
    </member>
    <member name="M:MbUnit.Core.Cons.CommandLine.CommandLineArgumentParser.Parse(System.String[],System.Object)">
      <summary>Parses an argument list.</summary>
      <param name="args">The arguments to parse.</param>
      <param name="destination">The destination of the parsed arguments.</param>
      <returns>true if no parse errors were encountered.</returns>
    </member>
    <member name="T:MbUnit.Core.Cons.CommandLine.CommandLineUtility">
      <summary>Useful Stuff. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineUtility.NewLine">
      <summary>The System Defined new line string. This field is constant and read-only.</summary>
    </member>
    <member name="M:MbUnit.Core.Cons.CommandLine.CommandLineUtility.CommandLineArgumentsUsage(System.Type)">
      <summary>Returns a Usage string for command line argument parsing. Use CommandLineArgumentAttributes to control parsing behaviour.</summary>
      <param name="argumentType">The type of the arguments to display usage for.</param>
      <returns>Printable string containing a user friendly description of command line arguments.</returns>
    </member>
    <member name="M:MbUnit.Core.Cons.CommandLine.CommandLineUtility.ParseCommandLineArguments(System.String[],System.Object)">
      <summary>Parses Command Line Arguments. Errors are output on Console.Error. Use CommandLineArgumentAttributes to control parsing behaviour.</summary>
      <param name="arguments">The actual arguments.</param>
      <param name="destination">The resulting parsed arguments.</param>
    </member>
    <member name="M:MbUnit.Core.Cons.CommandLine.CommandLineUtility.ParseCommandLineArguments(System.String[],System.Object,MbUnit.Core.Cons.CommandLine.ErrorReporter)">
      <summary>Parses Command Line Arguments. Use CommandLineArgumentAttributes to control parsing behaviour.</summary>
      <param name="arguments">The actual arguments.</param>
      <param name="destination">The resulting parsed arguments.</param>
      <param name="reporter">The destination for parse errors.</param>
    </member>
    <member name="T:MbUnit.Core.Cons.CommandLine.DefaultCommandLineArgumentAttribute">
      <summary>Indicates that this argument is the default argument. '/' or '-' prefix only the argument value is specified.</summary>
    </member>
    <member name="T:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType">
      <summary>Used to control parsing of command line arguments.</summary>
    </member>
    <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType.Required">
      <summary>Indicates that this field is required. An error will be displayed if it is not present when parsing arguments.</summary>
    </member>
    <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType.Unique">
      <summary>Only valid in conjunction with Multiple. Duplicate values will result in an error.</summary>
    </member>
    <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType.Multiple">
      <summary>Inidicates that the argument may be specified more than once. Only valid if the argument is a collection</summary>
    </member>
    <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType.AtMostOnce">
      <summary>The default type for non-collection arguments. The argument is not required, but an error will be reported if it is specified more than once.</summary>
    </member>
    <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType.LastOccurenceWins">
      <summary>For non-collection arguments, when the argument is specified more than once no error is reported and the value of the argument is the last value which occurs in the argument list.</summary>
    </member>
    <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType.MultipleUnique">
      <summary>The default type for collection arguments. The argument is permitted to occur multiple times, but duplicate values will cause an error to be reported.</summary>
    </member>
    <member name="T:MbUnit.Core.Cons.CommandLine.ErrorReporter">
      <summary>A delegate used in error reporting.</summary>
    </member>
    <member name="T:MbUnit.Core.Exceptions.AssertionException">
      <summary>Base class for MbUnit exceptions</summary>
    </member>
    <member name="T:MbUnit.Core.Exceptions.CompilationException">
      <summary>Exception thrown when not finding a vertex.</summary>
    </member>
    <member name="P:MbUnit.Core.Exceptions.CompilationException.Message">
      <summary>The exception message</summary>
    </member>
    <member name="T:MbUnit.Core.Exceptions.IgnoreRunException">
      <summary>Exception thrown when <see cref="M:MbUnit.Framework.Assert.Ignore(System.String)" /> is called. MbUnit test runner interpret this to mean that the test throwing this exception should be ignored.</summary>
    </member>
    <member name="P:MbUnit.Core.Exceptions.IgnoreRunException.Message">
      <summary>Gets a message that describes why the test is to be ignored.</summary>
      <value>The message to be displayed by the test runner</value>
    </member>
    <member name="T:MbUnit.Core.Exceptions.MissingResourceException">
      <summary>Exception thrown when a specified resource cannot be found.</summary>
    </member>
    <member name="T:MbUnit.Core.Exceptions.MultipleCultureException">
      <summary>Exception throwed when not finding a vertex.</summary>
    </member>
    <member name="T:MbUnit.Core.Filters.CategoryFixtureFilter">
      <summary>Filter class for FixtureCategory attribute. This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Core.Filters.CategoryFixtureFilter.Filter(System.Type)">
      <summary>Tests if a fixture has a category attribute matching a pattern.</summary>
      <param name="fixture">The fixture to test.</param>
      <returns>true if the fixture has a matching category attribute, otherwise false.</returns>
    </member>
    <member name="T:MbUnit.Core.Framework.DecoratorPatternAttribute">
      <summary>This is the base class for attributes that can decorate tests. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="T:MbUnit.Core.Framework.FixtureDecoratorPatternAttribute">
      <summary>This is the base class for attributes that can decorate fixtures. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="T:MbUnit.Core.Framework.NonTestPatternAttribute">
      <summary>Base class for attributes that tag method that are usualy used to set up, provide data, tear down tests, etc...</summary>
    </member>
    <member name="T:MbUnit.Core.Framework.PatternAttribute">
      <summary>Base class for all attributes that are part of the MbUnit framework.</summary>
    </member>
    <member name="T:MbUnit.Core.Framework.TestFixturePatternAttribute">
      <summary>Base class for attributes that define test fixtures. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Core.Framework.TestFixturePatternAttribute.TimeOut">
      <summary>Gets or sets the fixture timeout in minutes.</summary>
      <value>Time out minutes.</value>
    </member>
    <member name="T:MbUnit.Core.Framework.TestPatternAttribute">
      <summary>Base class for attributes that define unit test.</summary>
    </member>
    <member name="T:MbUnit.Core.Invokers.DecoratorRunInvoker">
      <summary>Decorator invorkers are used to modify the way a fixute method is executed. Popular examples of such is the <see cref="T:MbUnit.Core.Invokers.ExpectedExceptionRunInvoker" /> or the <see cref="T:MbUnit.Core.Invokers.RepeatRunInvoker" />. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="T:MbUnit.Core.Invokers.ExplicitRunInvoker">
      <summary>Invoker for tests decorated with the ExplicitAttribute.</summary>
    </member>
    <member name="M:MbUnit.Core.Invokers.ExplicitRunInvoker.Execute(System.Object,System.Collections.IList)">
      <summary>Execute method for the invoker.</summary>
      <param name="o" />
      <param name="args" />
    </member>
    <member name="T:MbUnit.Core.Invokers.InvokerEventArgs">
      <summary>TODO - Add class summary</summary>
    </member>
    <member name="T:MbUnit.Core.Invokers.MethodRunInvoker">
      <summary>An invoker that wraps up the call to a fixture method.</summary>
    </member>
    <member name="T:MbUnit.Core.Invokers.RunInvokerVertex">
      <summary>A <see cref="T:QuickGraph.Concepts.IVertex" /> implementation, containing a <see cref="T:MbUnit.Core.Invokers.IRunInvoker" />.</summary>
    </member>
    <member name="P:MbUnit.Core.Invokers.RunInvokerVertex.HasInvoker">
      <summary>Gets a value indicating if the vertex has a <see cref="T:MbUnit.Core.Invokers.IRunInvoker" /> instance attached to it.</summary>
      <value>true if the vertex has a <see cref="T:MbUnit.Core.Invokers.IRunInvoker" /> instance attached.</value>
    </member>
    <member name="P:MbUnit.Core.Invokers.RunInvokerVertex.Invoker">
      <summary>Gets the <see cref="T:MbUnit.Core.Invokers.IRunInvoker" /> attached to the vertex.</summary>
      <value>The <see cref="T:MbUnit.Core.Invokers.IRunInvoker" /> instance attached to the vertex</value>
      <exception cref="T:System.InvalidOperationException"> the <see cref="T:MbUnit.Core.Invokers.IRunInvoker" /> is a null reference </exception>
    </member>
    <member name="M:MbUnit.Core.Invokers.RunInvokerVertex.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Not implemented.</summary>
      <exception cref="T:System.InvalidOperationException">always thrown</exception>
    </member>
    <member name="M:MbUnit.Core.Invokers.RunInvokerVertex.ToString">
      <summary>Converts the object to string</summary>
      <returns>String representation of the vertex</returns>
    </member>
    <member name="M:MbUnit.Core.Invokers.RunInvokerVertex.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
      <summary>Serializes informations to the <see cref="T:QuickGraph.Concepts.Serialization.IGraphSerializationInfo" /> instance.</summary>
      <param name="info">serialization device</param>
      <exception cref="T:System.ArgumentNullException">info is a null reference</exception>
    </member>
    <member name="T:MbUnit.Core.Invokers.RunInvokerVertexProvider">
      <summary>Internal use This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Invokers.IRunInvoker">
      <summary>This interface defines a method invoker object.</summary>
    </member>
    <member name="P:MbUnit.Core.Invokers.IRunInvoker.Generator">
      <summary>Gets a reference to the <see cref="T:MbUnit.Core.Runs.IRun" /> instance that generated the invoker.</summary>
      <value>Reference to the <see cref="T:MbUnit.Core.Runs.IRun" /> instance that generated the invoker.</value>
    </member>
    <member name="P:MbUnit.Core.Invokers.IRunInvoker.Name">
      <summary>Gets a descriptive name of the <see cref="T:MbUnit.Core.Invokers.IRunInvoker" /></summary>
      <value>A descriptive name of the <see cref="T:MbUnit.Core.Invokers.IRunInvoker" />.</value>
    </member>
    <member name="M:MbUnit.Core.Invokers.IRunInvoker.ContainsMemberInfo(System.Reflection.MemberInfo)">
      <summary>Gets a value indicating if the instance is related to <paramref name="memberInfo" /></summary>
      <param name="memberInfo">A <see cref="T:System.Reflection.MethodInfo" /> instance</param>
      <returns>true if the instance is related to the member info; otherwize false</returns>
    </member>
    <member name="M:MbUnit.Core.Invokers.IRunInvoker.Execute(System.Object,System.Collections.IList)">
      <summary>Executes the wrapped method</summary>
      <param name="o">Test fixture instance</param>
      <param name="args">Method arguments</param>
      <returns>Return value of the invoked method. If the method returns void, null is returned.</returns>
    </member>
    <member name="T:MbUnit.Core.Monitoring.MemoryStatus">
      <summary>Describes the status of the memory. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Monitoring.TimeMonitor">
      <summary>A high performance timer This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Core.Monitoring.TimeMonitor.Duration">
      <summary>Gets the timed duration value in seconds</summary>
      <value>Timer duration</value>
    </member>
    <member name="P:MbUnit.Core.Monitoring.TimeMonitor.Now">
      <summary>Gets the current duration value without stopping the timer</summary>
      <value>Current duration value</value>
    </member>
    <member name="M:MbUnit.Core.Monitoring.TimeMonitor.Start">
      <summary>Starts the timer</summary>
    </member>
    <member name="M:MbUnit.Core.Monitoring.TimeMonitor.Stop">
      <summary>Stops the timer</summary>
    </member>
    <member name="T:MbUnit.Core.Remoting.AssemblyWatcher">
      <summary>AssemblyWatcher keeps track of one or more assemblies to see if they have changed. It incorporates a delayed notification and uses a standard event to notify any interested parties about the change. The path to the assembly is provided as an argument to the event handler so that one routine can be used to handle events from multiple watchers.</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.CacheFolderHelper.DeleteDir(System.IO.DirectoryInfo)">
      <summary>Helper method to delete the cache dir. This method deals with a bug that occurs when pdb files are marked read-only.</summary>
      <param name="cacheDir" />
    </member>
    <member name="M:MbUnit.Core.Remoting.ConfigUtils.MergeDependentAssembly(System.Xml.XmlDocument,System.Reflection.AssemblyName,System.String,System.String)">
      <summary>Merge a 'dependentAssembly' directive into a given config document. If any entries exist for the same assembly they will be deleted before the new entry is merged.</summary>
      <param name="doc">The config document to merge</param>
      <param name="assemblyName">The Assembly that should be used</param>
      <param name="versionRange">The range of compatable versions (eg. "1.0.0.0-3.0.0.0")</param>
      <param name="codeBase">The codebase to use.</param>
    </member>
    <member name="T:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary">
      <summary>A dictionary with keys of type Guid and values of type TestTreeNode</summary>
    </member>
    <member name="P:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.Item(System.Guid)">
      <summary>Gets or sets the TestTreeNode associated with the given Guid</summary>
      <param name="key">The Guid whose value to get or set.</param>
    </member>
    <member name="P:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.Keys">
      <summary>Gets a collection containing the keys in this GuidTestTreeNodeDictionary.</summary>
    </member>
    <member name="P:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.Values">
      <summary>Gets a collection containing the values in this GuidTestTreeNodeDictionary.</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.Add(MbUnit.Core.Remoting.TestTreeNode)">
      <summary>Adds an element with the specified key and value to this GuidTestTreeNodeDictionary.</summary>
      <param name="value">The TestTreeNode value of the element to add.</param>
    </member>
    <member name="M:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.Contains(System.Guid)">
      <summary>Determines whether this GuidTestTreeNodeDictionary contains a specific key.</summary>
      <param name="key">The Guid key to locate in this GuidTestTreeNodeDictionary.</param>
      <returns>true if this GuidTestTreeNodeDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.ContainsKey(System.Guid)">
      <summary>Determines whether this GuidTestTreeNodeDictionary contains a specific key.</summary>
      <param name="key">The Guid key to locate in this GuidTestTreeNodeDictionary.</param>
      <returns>true if this GuidTestTreeNodeDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.Remove(System.Guid)">
      <summary>Removes the element with the specified key from this GuidTestTreeNodeDictionary.</summary>
      <param name="key">The Guid key of the element to remove.</param>
    </member>
    <member name="T:MbUnit.Core.Remoting.GuidTreeNodeDictionary">
      <summary>A dictionary with keys of type Guid and values of type TreeNode</summary>
    </member>
    <member name="P:MbUnit.Core.Remoting.GuidTreeNodeDictionary.Item(System.Guid)">
      <summary>Gets or sets the TreeNode associated with the given Guid</summary>
      <param name="key">The Guid whose value to get or set.</param>
    </member>
    <member name="P:MbUnit.Core.Remoting.GuidTreeNodeDictionary.Keys">
      <summary>Gets a collection containing the keys in this GuidTreeNodeDictionary.</summary>
    </member>
    <member name="P:MbUnit.Core.Remoting.GuidTreeNodeDictionary.Values">
      <summary>Gets a collection containing the values in this GuidTreeNodeDictionary.</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.GuidTreeNodeDictionary.Add(System.Windows.Forms.TreeNode)">
      <summary>Adds an element with the specified key and value to this GuidTreeNodeDictionary.</summary>
      <param name="value">The TreeNode value of the element to add.</param>
    </member>
    <member name="M:MbUnit.Core.Remoting.GuidTreeNodeDictionary.Contains(System.Guid)">
      <summary>Determines whether this GuidTreeNodeDictionary contains a specific key.</summary>
      <param name="key">The Guid key to locate in this GuidTreeNodeDictionary.</param>
      <returns>true if this GuidTreeNodeDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:MbUnit.Core.Remoting.GuidTreeNodeDictionary.ContainsKey(System.Guid)">
      <summary>Determines whether this GuidTreeNodeDictionary contains a specific key.</summary>
      <param name="key">The Guid key to locate in this GuidTreeNodeDictionary.</param>
      <returns>true if this GuidTreeNodeDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:MbUnit.Core.Remoting.GuidTreeNodeDictionary.Remove(System.Guid)">
      <summary>Removes the element with the specified key from this GuidTreeNodeDictionary.</summary>
      <param name="key">The Guid key of the element to remove.</param>
    </member>
    <member name="T:MbUnit.Core.Remoting.LongLivingMarshalByRefObject">
      <summary>Long living object. (Extracted from NUnit source)</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.NamespaceTestTreePopulator.Clear">
      <summary>Clears the internal representation of the tree</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.NamespaceTestTreePopulator.Populate(MbUnit.Core.Remoting.GuidTestTreeNodeDictionary,MbUnit.Core.Remoting.TestTreeNode,MbUnit.Core.Collections.RunPipeStarterCollection)">
      <summary>Populates the node using the <see cref="T:MbUnit.Core.RunPipe" /> instance contained in <paramref name="pipes" />.</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.RemoteTestEngine.AddConsoleListener">
      <summary>Supports verbose output option of console app. Added as part of fix to issue MBUNIT-28.</summary>
    </member>
    <member name="P:MbUnit.Core.Remoting.SeparateTestDomain.ShadowCopyFiles">
      <summary>Gets or sets a value indicating the assemblies have to be shadow copied</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.SeparateTestDomain.ConfigureCachePath(System.AppDomainSetup)">
      <summary>Set the location for caching and delete any old cache info</summary>
      <param name="setup">Our domain</param>
    </member>
    <member name="M:MbUnit.Core.Remoting.SeparateTestDomain.MakeDomain(System.String,System.String,System.String,System.String)">
      <summary>Creates an AppDomain for the Test Assembly</summary>
      <param name="domainName" />
      <param name="appBase" />
      <param name="configFile" />
      <param name="binPath" />
    </member>
    <member name="T:MbUnit.Core.Remoting.StringTestTreeNodeDictionary">
      <summary>A dictionary with keys of type String and values of type TestTreeNode</summary>
    </member>
    <member name="P:MbUnit.Core.Remoting.StringTestTreeNodeDictionary.Item(System.String)">
      <summary>Gets or sets the TestTreeNode associated with the given String</summary>
      <param name="key">The String whose value to get or set.</param>
    </member>
    <member name="P:MbUnit.Core.Remoting.StringTestTreeNodeDictionary.Keys">
      <summary>Gets a collection containing the keys in this StringTestTreeNodeDictionary.</summary>
    </member>
    <member name="P:MbUnit.Core.Remoting.StringTestTreeNodeDictionary.Values">
      <summary>Gets a collection containing the values in this StringTestTreeNodeDictionary.</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.StringTestTreeNodeDictionary.Add(System.String,MbUnit.Core.Remoting.TestTreeNode)">
      <summary>Adds an element with the specified key and value to this StringTestTreeNodeDictionary.</summary>
      <param name="key">The String key of the element to add.</param>
      <param name="value">The TestTreeNode value of the element to add.</param>
    </member>
    <member name="M:MbUnit.Core.Remoting.StringTestTreeNodeDictionary.Contains(System.String)">
      <summary>Determines whether this StringTestTreeNodeDictionary contains a specific key.</summary>
      <param name="key">The String key to locate in this StringTestTreeNodeDictionary.</param>
      <returns>true if this StringTestTreeNodeDictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:MbUnit.Core.Remoting.StringTestTreeNodeDictionary.Remove(System.String)">
      <summary>Removes the element with the specified key from this StringTestTreeNodeDictionary.</summary>
      <param name="key">The String key of the element to remove.</param>
    </member>
    <member name="P:MbUnit.Core.Remoting.TestDomain.TestFilePath">
      <summary>Gets the testFilePath</summary>
    </member>
    <member name="P:MbUnit.Core.Remoting.TestDomainBase.Identifier">
      <summary>Gets a <see cref="T:System.Guid" /> identifying the <see cref="T:MbUnit.Core.Remoting.TestDomain" /></summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestDomainBase.Load">
      <summary>Loads domain and test assembly</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestDomainBase.OnLoaded">
      <summary>Raises the <see cref="E:MbUnit.Core.Remoting.TestDomainBase.Loaded" /> event.</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestDomainBase.OnReLoaded">
      <summary>Raises the <see cref="E:MbUnit.Core.Remoting.TestDomainBase.ReLoaded" /> event.</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestDomainBase.OnUnLoaded">
      <summary>Raises the <see cref="E:MbUnit.Core.Remoting.TestDomainBase.UnLoaded" /> event.</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestDomainBase.Reload">
      <summary>Unload and reload test domain</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestDomainBase.Unload">
      <summary>Unload domain</summary>
    </member>
    <member name="T:MbUnit.Core.Remoting.TestTreeNodeCollection">
      <summary>A collection of elements of type TestTreeNode</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestTreeNodeCollection.Add(MbUnit.Core.Remoting.TestTreeNode)">
      <summary>Adds an instance of type TestTreeNode to the end of this TestTreeNodeCollection.</summary>
      <param name="value">The TestTreeNode to be added to the end of this TestTreeNodeCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestTreeNodeCollection.Contains(MbUnit.Core.Remoting.TestTreeNode)">
      <summary>Determines whether a specfic TestTreeNode value is in this TestTreeNodeCollection.</summary>
      <param name="value">The TestTreeNode value to locate in this TestTreeNodeCollection.</param>
      <returns>true if value is found in this TestTreeNodeCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestTreeNodeCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this TestTreeNodeCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestTreeNodeCollection.Remove(MbUnit.Core.Remoting.TestTreeNode)">
      <summary>Removes the first occurrence of a specific TestTreeNode from this TestTreeNodeCollection.</summary>
      <param name="value">The TestTreeNode value to remove from this TestTreeNodeCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Remoting.TestTreeNodeCollection.Enumerator">
      <summary>Type-specific enumeration class, used by TestTreeNodeCollection.GetEnumerator.</summary>
    </member>
    <member name="T:MbUnit.Core.Remoting.TestTreePopulator">
      <summary>Defines a class that can populate a tree of tests This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestTreePopulator.Clear">
      <summary>Clears the internal representation of the tree</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestTreePopulator.Populate(MbUnit.Core.Remoting.GuidTestTreeNodeDictionary,MbUnit.Core.Remoting.TestTreeNode,MbUnit.Core.Collections.RunPipeStarterCollection)">
      <summary>Populates the node using the <see cref="T:MbUnit.Core.RunPipe" /> instance contained in <paramref name="pipes" />.</summary>
      <param name="nodes">Node dictionary.</param>
      <param name="root">The root node.</param>
      <param name="pipes">Collection of <see cref="T:MbUnit.Core.RunPipeStarter" />s</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="root" /> or <paramref name="pipes" /> is a null reference (Nothing in Visual Basic) </exception>
    </member>
    <member name="T:MbUnit.Core.Remoting.TestTreePopulatorCollection">
      <summary>A collection of elements of type TestTreePopulator</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.Add(MbUnit.Core.Remoting.ITestTreePopulator)">
      <summary>Adds an instance of type TestTreePopulator to the end of this TestTreePopulatorCollection.</summary>
      <param name="value">The TestTreePopulator to be added to the end of this TestTreePopulatorCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.AddRange(MbUnit.Core.Remoting.ITestTreePopulator[])">
      <summary>Adds the elements of an array to the end of this TestTreePopulatorCollection.</summary>
      <param name="items">The array whose elements are to be added to the end of this TestTreePopulatorCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.AddRange(MbUnit.Core.Remoting.TestTreePopulatorCollection)">
      <summary>Adds the elements of another TestTreePopulatorCollection to the end of this TestTreePopulatorCollection.</summary>
      <param name="items">The TestTreePopulatorCollection whose elements are to be added to the end of this TestTreePopulatorCollection.</param>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.Contains(MbUnit.Core.Remoting.ITestTreePopulator)">
      <summary>Determines whether a specfic TestTreePopulator value is in this TestTreePopulatorCollection.</summary>
      <param name="value">The TestTreePopulator value to locate in this TestTreePopulatorCollection.</param>
      <returns>true if value is found in this TestTreePopulatorCollection; false otherwise.</returns>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the elements of this TestTreePopulatorCollection.</summary>
      <returns>An object that implements System.Collections.IEnumerator.</returns>
    </member>
    <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.Remove(MbUnit.Core.Remoting.ITestTreePopulator)">
      <summary>Removes the first occurrence of a specific TestTreePopulator from this TestTreePopulatorCollection.</summary>
      <param name="value">The TestTreePopulator value to remove from this TestTreePopulatorCollection.</param>
    </member>
    <member name="T:MbUnit.Core.Remoting.TestTreePopulatorCollection.Enumerator">
      <summary>Type-specific enumeration class, used by TestTreePopulatorCollection.GetEnumerator.</summary>
    </member>
    <member name="P:MbUnit.Core.Remoting.TreeTestDomainCollection.Watcher">
      <summary>Gets the assembly watcher</summary>
    </member>
    <member name="T:MbUnit.Core.Remoting.ITestTreePopulator">
      <summary>Defines a class that can populate a tree of tests</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.ITestTreePopulator.Clear">
      <summary>Clears the internal representation of the tree</summary>
    </member>
    <member name="M:MbUnit.Core.Remoting.ITestTreePopulator.Populate(MbUnit.Core.Remoting.GuidTestTreeNodeDictionary,MbUnit.Core.Remoting.TestTreeNode,MbUnit.Core.Collections.RunPipeStarterCollection)">
      <summary>Populates the node using the <see cref="T:MbUnit.Core.RunPipe" /> instance contained in <paramref name="pipes" />.</summary>
      <param name="nodes">A node dictionary.</param>
      <param name="root">The root node.</param>
      <param name="pipes">A collection of pipes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="root" /> or <paramref name="pipes" /> is a null reference (Nothing in Visual Basic) </exception>
    </member>
    <member name="M:MbUnit.Core.Reports.ReportBase.Render(MbUnit.Core.Reports.Serialization.ReportResult,System.IO.TextWriter)">
      <summary>Render the report result to the specified writer</summary>
      <param name="result">Result from the test</param>
      <param name="writer">Writer to write result output to</param>
    </member>
    <member name="M:MbUnit.Core.Reports.ReportBase.Render(MbUnit.Core.Reports.Serialization.ReportResult,System.String)">
      <summary>Render the report result to a file</summary>
      <param name="result">Result from the test</param>
      <param name="fileName">Report output file name</param>
    </member>
    <member name="M:MbUnit.Core.Reports.ReportBase.Render(MbUnit.Core.Reports.Serialization.ReportResult,System.String,System.String,System.String)">
      <summary>Render the report result to a file</summary>
      <param name="result">Result from the test</param>
      <param name="outputPath">Output directory</param>
      <param name="nameFormat">Default format name</param>
      <param name="extension">Extension of the file</param>
      <returns>File name of the report</returns>
    </member>
    <member name="M:MbUnit.Core.Reports.ReportBase.Render(MbUnit.Core.Reports.Serialization.ReportResult,System.String,System.String)">
      <summary>Render the report result to a file</summary>
      <param name="result">Result from the test</param>
      <param name="outputPath">Output directory</param>
      <param name="nameFormat">Default format name. If null, the default name will be used</param>
      <returns>File name of the report</returns>
    </member>
    <member name="T:MbUnit.Core.Reports.TextReport">
      <summary>Reports MbUnit result in text format. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Reports.XmlReport">
      <summary>XML Report. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Core.Runs.CustomRun">
      <summary>TODO - Add class summary</summary>
    </member>
    <member name="P:MbUnit.Core.Runs.IndexerProviderRun.IsTest">
      <summary>Gets a value indicating the run is considered as a test or not.</summary>
      <value>true if the <see cref="T:MbUnit.Core.Runs.IRun" /> instance is a test</value>
    </member>
    <member name="P:MbUnit.Core.Runs.IndexerProviderRun.Name">
      <summary>Gets a descriptive name of the <see cref="T:MbUnit.Core.Runs.IRun" /></summary>
      <value>A descriptive name of the <see cref="T:MbUnit.Core.Runs.IRun" /></value>
    </member>
    <member name="M:MbUnit.Core.Runs.IndexerProviderRun.Reflect(MbUnit.Core.Invokers.RunInvokerTree,MbUnit.Core.Invokers.RunInvokerVertex,System.Type)">
      <summary>Populates the <see cref="T:MbUnit.Core.Invokers.RunInvokerTree" /> invoker graph with <see cref="T:MbUnit.Core.Invokers.IRunInvoker" /> generated by the run.</summary>
      <param name="tree">Invoker tree</param>
      <param name="parent">parent vertex</param>
      <param name="t">class type that is marked by the run</param>
    </member>
    <member name="T:MbUnit.Core.Runs.ParallelRun">
      <summary>TODO - Add class summary This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Core.Runs.Run.IsTest">
      <summary>Gets a value indicating the run is considered as a test or not.</summary>
      <value>true if the <see cref="T:MbUnit.Core.Runs.IRun" /> instance is a test</value>
    </member>
    <member name="P:MbUnit.Core.Runs.Run.Name">
      <summary>Gets a descriptive name of the <see cref="T:MbUnit.Core.Runs.IRun" /></summary>
      <value>A descriptive name of the <see cref="T:MbUnit.Core.Runs.IRun" /></value>
    </member>
    <member name="M:MbUnit.Core.Runs.Run.Reflect(MbUnit.Core.Invokers.RunInvokerTree,MbUnit.Core.Invokers.RunInvokerVertex,System.Type)">
      <summary>Populates the <see cref="T:MbUnit.Core.Invokers.RunInvokerTree" /> invoker graph with <see cref="T:MbUnit.Core.Invokers.IRunInvoker" /> generated by the run.</summary>
      <param name="tree">Invoker tree</param>
      <param name="parent">parent vertex</param>
      <param name="t">class type that is marked by the run</param>
    </member>
    <member name="T:MbUnit.Core.Runs.SequenceRun">
      <summary>A sequence of IRuns This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Core.Runs.SequenceRun.Reflect(MbUnit.Core.Invokers.RunInvokerTree,MbUnit.Core.Invokers.RunInvokerVertex,System.Type)">
      <summary>Populates the <see cref="T:MbUnit.Core.Invokers.RunInvokerTree" /> invoker graph with <see cref="T:MbUnit.Core.Invokers.IRunInvoker" /> generated by the run.</summary>
      <param name="tree">Invoker tree.</param>
      <param name="parent">Parent vertex.</param>
      <param name="t">The <see cref="T:System.Type" /> to search for.</param>
    </member>
    <member name="T:MbUnit.Core.Runs.TestFixtureRun">
      <summary>Test fixture run with support for decoration by <see cref="T:MbUnit.Framework.TestFixtureExtensionAttribute" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Core.Runs.TestFixtureRun.Reflect(MbUnit.Core.Invokers.RunInvokerTree,MbUnit.Core.Invokers.RunInvokerVertex,System.Type)">
      <summary>Builds the test run invoker tree.</summary>
      <param name="tree" />
      <param name="parent" />
      <param name="t" />
    </member>
    <member name="T:MbUnit.Core.Runs.IRun">
      <summary>This interface defines a type of test/non test run that is used to define the <see cref="T:MbUnit.Core.Framework.TestFixturePatternAttribute" /> logic.</summary>
    </member>
    <member name="P:MbUnit.Core.Runs.IRun.IsTest">
      <summary>Gets a value indicating the run is considered as a test or not.</summary>
      <value>true if the <see cref="T:MbUnit.Core.Runs.IRun" /> instance is a test</value>
    </member>
    <member name="P:MbUnit.Core.Runs.IRun.Name">
      <summary>Gets a descriptive name of the <see cref="T:MbUnit.Core.Runs.IRun" /></summary>
      <value>A descriptive name of the <see cref="T:MbUnit.Core.Runs.IRun" /></value>
    </member>
    <member name="M:MbUnit.Core.Runs.IRun.Reflect(MbUnit.Core.Invokers.RunInvokerTree,MbUnit.Core.Invokers.RunInvokerVertex,System.Type)">
      <summary>Populates the <see cref="T:MbUnit.Core.Invokers.RunInvokerTree" /> invoker graph with <see cref="T:MbUnit.Core.Invokers.IRunInvoker" /> generated by the run.</summary>
      <param name="tree">Invoker tree</param>
      <param name="parent">parent vertex</param>
      <param name="t">class type that is marked by the run</param>
    </member>
    <member name="T:MbUnit.Framework.ArrayAssert">
      <summary>Array Assertion class This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.ArrayAssert.AreEqual(System.Boolean[],System.Boolean[])">
      <summary>Verifies that both boolean arrays have the same dimension and elements.</summary>
      <param name="expected" />
      <param name="actual" />
    </member>
    <member name="M:MbUnit.Framework.ArrayAssert.AreEqual(System.Char[],System.Char[])">
      <summary>Verifies that both char arrays have the same dimension and elements.</summary>
      <param name="expected" />
      <param name="actual" />
    </member>
    <member name="M:MbUnit.Framework.ArrayAssert.AreEqual(System.Byte[],System.Byte[])">
      <summary>Verifies that both byte arrays have the same dimension and elements.</summary>
      <param name="expected" />
      <param name="actual" />
    </member>
    <member name="M:MbUnit.Framework.ArrayAssert.AreEqual(System.Int32[],System.Int32[])">
      <summary>Verifies that both integer arrays have the same dimension and elements.</summary>
      <param name="expected" />
      <param name="actual" />
    </member>
    <member name="M:MbUnit.Framework.ArrayAssert.AreEqual(System.Int64[],System.Int64[])">
      <summary>Verifies that both arrays of long integers have the same dimension and elements.</summary>
      <param name="expected" />
      <param name="actual" />
    </member>
    <member name="M:MbUnit.Framework.ArrayAssert.AreEqual(System.Single[],System.Single[],System.Single)">
      <summary>Verifies that both arrays of single-point floating numbers have the same dimension and elements given a margin of error.</summary>
      <param name="expected" />
      <param name="actual" />
      <param name="delta" />
    </member>
    <member name="M:MbUnit.Framework.ArrayAssert.AreEqual(System.Double[],System.Double[],System.Double)">
      <summary>Verifies that both arrays of double-point floating numbers have the same dimension and elements given a margin of error.</summary>
      <param name="expected" />
      <param name="actual" />
      <param name="delta" />
    </member>
    <member name="M:MbUnit.Framework.ArrayAssert.AreEqual(System.Object[],System.Object[])">
      <summary>Verifies that both arrays of objects have the same dimension and elements.</summary>
      <param name="expected" />
      <param name="actual" />
    </member>
    <member name="T:MbUnit.Framework.AssemblyCleanupAttribute">
      <summary>Use this attribute to identify the class containing setup and teardown methods for an assembly of tests. The setup method will be run before any other tests or setup methods in the assembly and the teardown method will be run after any other teardown methods in the assembly. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.AssemblyCleanupAttribute.TargetType">
      <summary>Identifies the class containing the setup and teardown methods for the test assembly</summary>
    </member>
    <member name="T:MbUnit.Framework.AssemblyDependsOnAttribute">
      <summary>Use this attribute to identify an assembly whose tests must execute successfully before the tests in this assembly are executed This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.AssemblyDependsOnAttribute.AssemblyName">
      <summary>The name of the parent assembly</summary>
    </member>
    <member name="T:MbUnit.Framework.AssemblyResolverAttribute">
      <summary>Registers a custom assembly resolver. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.AssemblyResolverAttribute.AssemblyResolverType">
      <summary>Gets the assembly resolver type.</summary>
    </member>
    <member name="T:MbUnit.Framework.Assert">
      <summary>Class containing generic assert methods for the comparison of values and object references, the existence of objects within a collection type and basic object properties - for example, whether or not it is assignable to. Also contains a set of Fail asserts which will automatically fail a test straight away. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.Assert.AssertCount">
      <summary>Number of Asserts made so far this test run</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)">
      <summary>Verifies that two doubles, <paramref name="expected" /> and <paramref name="actual" />, are equal given a <paramref name="delta" />. If the expected value is infinity then the delta value is ignored. If they are not equal then a <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="delta">The maximum acceptable difference between <paramref name="expected" /> and <paramref name="actual" /></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="delta" /> has been given a negative value.</exception>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not values within the given <paramref name="delta" />.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double)">
      <summary>Verifies that two doubles, <paramref name="expected" /> and <paramref name="actual" />, are equal considering a <paramref name="delta" />. If the expected value is infinity then the delta value is ignored. If they are not equals then an <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown with no explanation for the failure. Use <see cref="M:MbUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)" /> if you want to provide an explanation.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="delta">The maximum acceptable difference between <paramref name="expected" /> and <paramref name="actual" /></param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="delta" /> has been given a negative value.</exception>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not values within the given <paramref name="delta" />.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that two doubles, <paramref name="expected" /> and <paramref name="actual" />, are equal considering a <paramref name="delta" />. If the expected value is infinity then the delta value is ignored. If they are not equal then a <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="delta">The maximum acceptable difference between <paramref name="expected" /> and <paramref name="actual" /></param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="delta" /> has been given a negative value.</exception>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not values within the given <paramref name="delta" />. Exception message is generated through <paramref name="format" /> and <paramref name="args" />.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Single,System.Single,System.Single,System.String)">
      <summary>Verifies that two floats, <paramref name="expected" /> and <paramref name="actual" />, are equal considering a <paramref name="delta" />. If the <paramref name="expected" /> value is infinity then the <paramref name="delta" /> value is ignored. If they are not equal then an <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="delta">The maximum acceptable difference between <paramref name="expected" /> and <paramref name="actual" /></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="delta" /> has been given a negative value.</exception>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not values within the given <paramref name="delta" />.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that two floats, <paramref name="expected" /> and <paramref name="actual" />, are equal considering a <paramref name="delta" />. If the <paramref name="expected" /> value is infinity then the <paramref name="delta" /> value is ignored. If they are not equals then an <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="delta">The maximum acceptable difference between <paramref name="expected" /> and <paramref name="actual" /></param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="delta" /> has been given a negative value.</exception>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not values within the given <paramref name="delta" />. Exception message is generated through <paramref name="format" /> and <paramref name="args" />.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Single,System.Single,System.Single)">
      <summary>Verifies that two floats, <paramref name="expected" /> and <paramref name="actual" />, are equal considering a <paramref name="delta" />. If the <paramref name="expected" /> value is infinity then the <paramref name="delta" /> value is ignored. If they are not equals then an <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="delta">The maximum acceptable difference between <paramref name="expected" /> and <paramref name="actual" /></param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="delta" /> has been given a negative value.</exception>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not values within the given <paramref name="delta" />.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String)">
      <summary>Verifies that two decimals, <paramref name="expected" /> and <paramref name="actual" />, are equal. If they are not equal then an <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">
        <paramref name="expected" /> and <paramref name="actual" /> are not equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
      <summary>Verifies that two decimals, <paramref name="expected" /> and <paramref name="actual" />, are equal. If they are not equal then a <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal)">
      <summary>Verifies that two decimals, <paramref name="expected" /> and <paramref name="actual" />, are equal. If they are not equal then a <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String)">
      <summary>Verifies that two integers, <paramref name="expected" /> and <paramref name="actual" />, are equal. If they are not equal then a <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that two integers, <paramref name="expected" /> and <paramref name="actual" />, are equal. If they are not equal then an <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Int32,System.Int32)">
      <summary>Verifies that two integers, <paramref name="expected" /> and <paramref name="actual" />, are equal. If they are not equal then a <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
      <summary>Verifies that two objects, <paramref name="expected" /> and <paramref name="actual" />, are equal. If they are not equal then a <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException"> Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String)">
      <summary>Verifies that two objects, <paramref name="expected" /> and <paramref name="actual" />, are equal. If they are not equal then an <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown with a given <paramref name="message" />.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Object,System.Object)">
      <summary>Verifies that two objects, <paramref name="expected" /> and <paramref name="actual" />, are equal. If they are not equal then an <see cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException" /> is thrown.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">
        <paramref name="expected" /> and <paramref name="actual" /> are not equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
      <summary>Verifies that two <see cref="T:System.Object" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.Object" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="expected">The <see cref="T:System.Object" /> to compare</param>
      <param name="actual">The <see cref="T:System.Object" /> being compared</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String)">
      <summary>Verifies that two <see cref="T:System.Object" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.Object" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="expected">The <see cref="T:System.Object" /> to compare</param>
      <param name="actual">The <see cref="T:System.Object" /> being compared</param>
      <param name="message">The message to include if the test fails</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are both null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Object,System.Object)">
      <summary>Verifies that two <see cref="T:System.Object" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.Object" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="expected">The <see cref="T:System.Object" /> to compare</param>
      <param name="actual">The <see cref="T:System.Object" /> being compared</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are both null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that two integers, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the integers are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="expected">The integer to compare</param>
      <param name="actual">The integer being compared</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String)">
      <summary>Verifies that two integers, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the integers are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a given <paramref name="message" />.</summary>
      <param name="expected">The integer to compare</param>
      <param name="actual">The integer being compared</param>
      <param name="message">The message to include if the test fails</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32)">
      <summary>Verifies that two integers, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the integers are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown</summary>
      <param name="expected">The integer to compare</param>
      <param name="actual">The integer being compared</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
      <summary>Verifies that two <see cref="T:System.UInt32" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.UInt32" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="expected">The <see cref="T:System.UInt32" /> to compare</param>
      <param name="actual">The <see cref="T:System.UInt32" /> being compared</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String)">
      <summary>Verifies that two <see cref="T:System.UInt32" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.UInt32" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="expected">The <see cref="T:System.UInt32" /> to compare</param>
      <param name="actual">The <see cref="T:System.UInt32" /> being compared</param>
      <param name="message">The message to include if the test fails</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32)">
      <summary>Verifies that two <see cref="T:System.UInt32" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.UInt32" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="expected">The <see cref="T:System.UInt32" /> to compare</param>
      <param name="actual">The <see cref="T:System.UInt32" /> being compared</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
      <summary>Verifies that two <see cref="T:System.Decimal" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.Decimal" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="expected">The <see cref="T:System.Decimal" /> to compare</param>
      <param name="actual">The <see cref="T:System.Decimal" /> being compared</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String)">
      <summary>Verifies that two <see cref="T:System.Decimal" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.Decimal" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="expected">The <see cref="T:System.Decimal" /> to compare</param>
      <param name="actual">The <see cref="T:System.Decimal" /> being compared</param>
      <param name="message">The message to include if the test fails</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal)">
      <summary>Verifies that two <see cref="T:System.Decimal" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.Decimal" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown</summary>
      <param name="expected">The <see cref="T:System.Decimal" /> to compare</param>
      <param name="actual">The <see cref="T:System.Decimal" /> being compared</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that two <see cref="T:System.Single" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.Single" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="expected">The <see cref="T:System.Single" /> to compare</param>
      <param name="actual">The <see cref="T:System.Single" /> being compared</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String)">
      <summary>Verifies that two <see cref="T:System.Single" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.Single" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="expected">The <see cref="T:System.Single" /> to compare</param>
      <param name="actual">The <see cref="T:System.Single" /> being compared</param>
      <param name="message">The message to include if the test fails</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Single,System.Single)">
      <summary>Verifies that two <see cref="T:System.Single" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.Single" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown</summary>
      <param name="expected">The <see cref="T:System.Single" /> to compare</param>
      <param name="actual">The <see cref="T:System.Single" /> being compared</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that two <see cref="T:System.Double" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.Double" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="expected">The <see cref="T:System.Double" /> to compare</param>
      <param name="actual">The <see cref="T:System.Double" /> being compared</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String)">
      <summary>Verifies that two <see cref="T:System.Double" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.Double" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="expected">The <see cref="T:System.Double" /> to compare</param>
      <param name="actual">The <see cref="T:System.Double" /> being compared</param>
      <param name="message">The message to include if the test fails</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Double,System.Double)">
      <summary>Verifies that two <see cref="T:System.Double" />s, <paramref name="expected" /> and <paramref name="actual" />, are not equal. If the <see cref="T:System.Double" nolink="true" />s are equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown</summary>
      <param name="expected">The <see cref="T:System.Double" /> to compare</param>
      <param name="actual">The <see cref="T:System.Double" /> being compared</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are equal.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotSame(System.Object,System.Object)">
      <summary>Verifies that two <see cref="T:System.Object" />s, <paramref name="expected" /> and <paramref name="actual" />, are not the same object. That is, the two variables do not reference the same <see cref="T:System.Object" nolink="true" />. If the <see cref="T:System.Object" nolink="true" />s are the same, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="expected">The <see cref="T:System.Object" /> to compare</param>
      <param name="actual">The <see cref="T:System.Object" /> being compared</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are references to the same <see cref="T:System.Object" />.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String)">
      <summary>Verifies that two <see cref="T:System.Object" />s, <paramref name="expected" /> and <paramref name="actual" />, are not the same object. That is, the two variables do not reference the same <see cref="T:System.Object" nolink="true" />. If the <see cref="T:System.Object" nolink="true" />s are the same, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="expected">The <see cref="T:System.Object" /> to compare</param>
      <param name="actual">The <see cref="T:System.Object" /> being compared</param>
      <param name="message">The message to include if the test fails</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are references to the same <see cref="T:System.Object" />.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
      <summary>Verifies that two <see cref="T:System.Object" />s, <paramref name="expected" /> and <paramref name="actual" />, are not the same object. That is, the two variables do not reference the same <see cref="T:System.Object" nolink="true" />. If the <see cref="T:System.Object" nolink="true" />s are the same, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="expected">The <see cref="T:System.Object" /> to compare</param>
      <param name="actual">The <see cref="T:System.Object" /> being compared</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are references to the same <see cref="T:System.Object" />.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String)">
      <summary>Verifies that two <see cref="T:System.Object" />s, <paramref name="expected" /> and <paramref name="actual" />, are the same object. That is, the two variables reference the same <see cref="T:System.Object" nolink="true" />. If the <see cref="T:System.Object" nolink="true" />s are not the same, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="expected">The <see cref="T:System.Object" /> to compare</param>
      <param name="actual">The <see cref="T:System.Object" /> being compared</param>
      <param name="message">The message to include if the test fails</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not references to the same <see cref="T:System.Object" />.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])">
      <summary>Verifies that two <see cref="T:System.Object" />s, <paramref name="expected" /> and <paramref name="actual" />, are the same object. That is, the two variables reference the same <see cref="T:System.Object" nolink="true" />. If the <see cref="T:System.Object" nolink="true" />s are not the same, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="expected">The <see cref="T:System.Object" /> to compare</param>
      <param name="actual">The <see cref="T:System.Object" /> being compared</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not references to the same <see cref="T:System.Object" />.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreSame(System.Object,System.Object)">
      <summary>Verifies that two <see cref="T:System.Object" />s, <paramref name="expected" /> and <paramref name="actual" />, are the same object. That is, the two variables reference the same <see cref="T:System.Object" nolink="true" />. If the <see cref="T:System.Object" nolink="true" />s are not the same, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="expected">The <see cref="T:System.Object" /> to compare</param>
      <param name="actual">The <see cref="T:System.Object" /> being compared</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="expected" /> and <paramref name="actual" /> are not references to the same <see cref="T:System.Object" />.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreValueEqual(System.Reflection.PropertyInfo,System.Object,System.Object,System.Object[])">
      <summary>Verifies that given two objects, <paramref name="expected" /> and <paramref name="actual" />, the property described by the <see cref="T:System.Reflection.PropertyInfo" /> object <paramref name="pi" /> is present in both objects, is not null, and that the value of the property in both objects is equal.</summary>
      <param name="pi">The <see cref="T:System.Reflection.PropertyInfo" /> object indicating the property to be tested</param>
      <param name="expected">The object containing the expected value of the property</param>
      <param name="actual">The object containing the actual value of the property</param>
      <param name="indices">The index of the value in the property if it is an indexed property</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">One or both of <paramref name="expected" /> and <paramref name="actual" /> are null</exception>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">The property that <paramref name="pi" /> describes is not present in either <paramref name="expected" /> or <paramref name="actual" /></exception>
      <exception cref="T:MbUnit.Core.Exceptions.NotEqualAssertionException">The property values in <paramref name="expected" /> and <paramref name="actual" /> are not equal</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int32,System.Int32,System.Int32)">
      <summary>Verifies that for three integers, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The integer being tested</param>
      <param name="left">An integer marking one of end of a range</param>
      <param name="right">An integer marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int32,System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that for three integers, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="test">The integer being tested</param>
      <param name="left">An integer marking one of end of a range</param>
      <param name="right">An integer marking the other end of a range</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int16,System.Int16,System.Int16)">
      <summary>Verifies that for three <see cref="T:System.Int16">short integers</see>, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The <see cref="T:System.Int16">short integer</see> being tested</param>
      <param name="left">A <see cref="T:System.Int16">short integer</see> marking one of end of a range</param>
      <param name="right">A <see cref="T:System.Int16">short integer</see> marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int16,System.Int16,System.Int16,System.String)">
      <summary>Verifies that for three <see cref="T:System.Int16">short integer</see>s, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="test">The <see cref="T:System.Int16">short integer</see> being tested</param>
      <param name="left">A <see cref="T:System.Int16">short integer</see> marking one of end of a range</param>
      <param name="right">A <see cref="T:System.Int16">short integer</see> marking the other end of a range</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int16,System.Int16,System.Int16,System.String,System.Object[])">
      <summary>Verifies that for three <see cref="T:System.Int16">short integer</see>s, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="test">The <see cref="T:System.Int16">short integer</see> being tested</param>
      <param name="left">A <see cref="T:System.Int16">short integer</see> marking one of end of a range</param>
      <param name="right">A <see cref="T:System.Int16">short integer</see> marking the other end of a range</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Byte,System.Byte,System.Byte)">
      <summary>Verifies that for three <see cref="T:System.Byte" />s, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The value between 0 and 255 being tested</param>
      <param name="left">The value between 0 and 255 marking one of end of a range</param>
      <param name="right">The value between 0 and 255 marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Byte,System.Byte,System.Byte,System.String)">
      <summary>Verifies that for three <see cref="T:System.Byte" />s, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="test">The value between 0 and 255 being tested</param>
      <param name="left">The value between 0 and 255 marking one of end of a range</param>
      <param name="right">The value between 0 and 255 marking the other end of a range</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Byte,System.Byte,System.Byte,System.String,System.Object[])">
      <summary>Verifies that for three <see cref="T:System.Byte" />s, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="test">The value between 0 and 255 being tested</param>
      <param name="left">The value between 0 and 255 marking one of end of a range</param>
      <param name="right">The value between 0 and 255 marking the other end of a range</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int64,System.Int64,System.Int64)">
      <summary>Verifies that for three <see cref="T:System.Int64">long integer</see>s, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The <see cref="T:System.Int64">long integer</see> being tested</param>
      <param name="left">A <see cref="T:System.Int64">long integer</see> marking one of end of a range</param>
      <param name="right">A <see cref="T:System.Int64">long integer</see> marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int64,System.Int64,System.Int64,System.String)">
      <summary>Verifies that for three <see cref="T:System.Int64">long integer</see>s, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="test">The <see cref="T:System.Int64">long integer</see> being tested</param>
      <param name="left">A <see cref="T:System.Int64">long integer</see> marking one of end of a range</param>
      <param name="right">A <see cref="T:System.Int64">long integer</see> marking the other end of a range</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int64,System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Verifies that for three <see cref="T:System.Int64">long integer</see>s, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="test">The <see cref="T:System.Int64">long integer</see> being tested</param>
      <param name="left">A <see cref="T:System.Int64">long integer</see> marking one of end of a range</param>
      <param name="right">A <see cref="T:System.Int64">long integer</see> marking the other end of a range</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Double,System.Double,System.Double)">
      <summary>Verifies that for three doubles, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The double being tested</param>
      <param name="left">A double marking one of end of a range</param>
      <param name="right">A double marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Double,System.Double,System.Double,System.String)">
      <summary>Verifies that for three doubles, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="test">The double being tested</param>
      <param name="left">A double marking one of end of a range</param>
      <param name="right">A double marking the other end of a range</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Double,System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that for three doubles, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="test">The double being tested</param>
      <param name="left">A double marking one of end of a range</param>
      <param name="right">A double marking the other end of a range</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Single,System.Single,System.Single)">
      <summary>Verifies that for three floats, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The float being tested</param>
      <param name="left">A float marking one of end of a range</param>
      <param name="right">A float marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Single,System.Single,System.Single,System.String)">
      <summary>Verifies that for three floats, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="test">The float being tested</param>
      <param name="left">A float marking one of end of a range</param>
      <param name="right">A float marking the other end of a range</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Single,System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that for three floats, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="test">The float being tested</param>
      <param name="left">A float marking one of end of a range</param>
      <param name="right">A float marking the other end of a range</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.IComparable,System.IComparable,System.IComparable)">
      <summary>Verifies that for three objects derived from <see cref="T:System.IComparable" />, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The object derived from <see cref="T:System.IComparable" /> being tested</param>
      <param name="left">The object derived from <see cref="T:System.IComparable" /> marking one of end of a range</param>
      <param name="right">The object derived from <see cref="T:System.IComparable" /> marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="test" />, <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.IComparable,System.IComparable,System.IComparable,System.String)">
      <summary>Verifies that for three objects derived from <see cref="T:System.IComparable" />, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="test">The object derived from <see cref="T:System.IComparable" /> being tested</param>
      <param name="left">The object derived from <see cref="T:System.IComparable" /> marking one of end of a range</param>
      <param name="right">The object derived from <see cref="T:System.IComparable" /> marking the other end of a range</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="test" />, <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.IComparable,System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Verifies that for three objects derived from <see cref="T:System.IComparable" />, <paramref name="test" /> is between or equal to one of <paramref name="left" /> and <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="test">The object derived from <see cref="T:System.IComparable" /> being tested</param>
      <param name="left">The object derived from <see cref="T:System.IComparable" /> marking one of end of a range</param>
      <param name="right">The object derived from <see cref="T:System.IComparable" /> marking the other end of a range</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="test" />, <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Contains(System.String,System.String)">
      <summary>Verifies that <paramref name="s" /> is a substring of <paramref name="contain" />.</summary>
      <param name="s">The string that should be contained within <paramref name="contain" /></param>
      <param name="contain">The string that should contain <paramref name="s" /></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="s" /> is not a substring of <paramref name="contain" />.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Equals(System.Object,System.Object)">
      <summary>The Equals method throws an <see cref="T:MbUnit.Core.Exceptions.AssertionException" />. This is done to make sure there is no mistake by calling this function. Use <see cref="M:MbUnit.Framework.Assert.AreEqual(System.Object,System.Object)">AreEqual</see> instead or one of its overloads.</summary>
      <param name="a">The first <see cref="T:System.Object" /> to compare</param>
      <param name="b">The second <see cref="T:System.Object" /> to compare</param>
      <returns>True if the values are equal, false otherwise</returns>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Always thrown as this method should not be used.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Fail(System.String,System.Object[])">
      <summary>Throws an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException" />
    </member>
    <member name="M:MbUnit.Framework.Assert.Fail(System.String)">
      <summary>Throws an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> with a given <paramref name="message" />.</summary>
      <param name="message">The message printed out with the failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException" />
    </member>
    <member name="M:MbUnit.Framework.Assert.Fail">
      <summary>Throws an <see cref="T:MbUnit.Core.Exceptions.AssertionException" />.</summary>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException" />
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that for two integers, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">An integer</param>
      <param name="arg2">An integer</param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String)">
      <summary>Verifies that for two integers, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">An integer</param>
      <param name="arg2">An integer</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Int32,System.Int32)">
      <summary>Verifies that for two integers, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">An integer</param>
      <param name="arg2">An integer</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.UInt32">unsigned integers</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">An <see cref="T:System.UInt32">unsigned integers</see></param>
      <param name="arg2">An <see cref="T:System.UInt32">unsigned integers</see></param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String)">
      <summary>Verifies that for two <see cref="T:System.UInt32">unsigned integers</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">An <see cref="T:System.UInt32">unsigned integers</see></param>
      <param name="arg2">An <see cref="T:System.UInt32">unsigned integers</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.UInt32,System.UInt32)">
      <summary>Verifies that for two <see cref="T:System.UInt32">unsigned integers</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">An <see cref="T:System.UInt32">unsigned integers</see></param>
      <param name="arg2">An <see cref="T:System.UInt32">unsigned integers</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Decimal">128-bit integers</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">A <see cref="T:System.Decimal">128-bit integer</see></param>
      <param name="arg2">A <see cref="T:System.Decimal">128-bit integer</see></param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String)">
      <summary>Verifies that for two <see cref="T:System.Decimal">128-bit integers</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">A <see cref="T:System.Decimal">128-bit integer</see></param>
      <param name="arg2">A <see cref="T:System.Decimal">128-bit integer</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Decimal,System.Decimal)">
      <summary>Verifies that for two <see cref="T:System.Decimal">128-bit integers</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">A <see cref="T:System.Decimal">128-bit integer</see></param>
      <param name="arg2">A <see cref="T:System.Decimal">128-bit integer</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Int64">long integers</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">A <see cref="T:System.Int64">long integer</see></param>
      <param name="arg2">A <see cref="T:System.Int64">long integer</see></param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String)">
      <summary>Verifies that for two <see cref="T:System.Int64">long integers</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">A <see cref="T:System.Int64">long integer</see></param>
      <param name="arg2">A <see cref="T:System.Int64">long integer</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Int64,System.Int64)">
      <summary>Verifies that for two <see cref="T:System.Int64">long integers</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">A <see cref="T:System.Int64">long integer</see></param>
      <param name="arg2">A <see cref="T:System.Int64">long integer</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Double">doubles</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">A <see cref="T:System.Double">double</see></param>
      <param name="arg2">A <see cref="T:System.Double">doubles</see></param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Double,System.Double,System.String)">
      <summary>Verifies that for two <see cref="T:System.Double">doubles</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">A <see cref="T:System.Double">double</see></param>
      <param name="arg2">A <see cref="T:System.Double">double</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Double,System.Double)">
      <summary>Verifies that for two <see cref="T:System.Double">doubles</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">A <see cref="T:System.Double">double</see></param>
      <param name="arg2">A <see cref="T:System.Double">double</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Single">floats</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">A <see cref="T:System.Single">float</see></param>
      <param name="arg2">A <see cref="T:System.Single">float</see></param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Single,System.Single,System.String)">
      <summary>Verifies that for two <see cref="T:System.Single">floats</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">A <see cref="T:System.Single">float</see></param>
      <param name="arg2">A <see cref="T:System.Single">float</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Single,System.Single)">
      <summary>Verifies that for two <see cref="T:System.Single">floats</see>, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">A <see cref="T:System.Single">float</see></param>
      <param name="arg2">A <see cref="T:System.Single">float</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="arg2">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="arg1" /> and <paramref name="arg2" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String)">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="arg2">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.IComparable,System.IComparable)">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="arg1" /> is strictly greater than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="arg2">An object derived from <see cref="T:System.IComparable" /></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or less than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int16,System.Int16)">
      <summary>Verifies that for two <see cref="T:System.Int16">short integers</see>, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A <see cref="T:System.Int16">short integer</see></param>
      <param name="right">A <see cref="T:System.Int16">short integer</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int16,System.Int16,System.String)">
      <summary>Verifies that for two <see cref="T:System.Int16">short integers</see>, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A <see cref="T:System.Int16">short integer</see></param>
      <param name="right">A <see cref="T:System.Int16">short integer</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int16,System.Int16,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Int16">short integers</see>, <paramref name="left" /> is strictly greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A <see cref="T:System.Int16">short integer</see></param>
      <param name="right">A <see cref="T:System.Int16">short integer</see></param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Byte,System.Byte)">
      <summary>Verifies that for two <see cref="T:System.Byte" />s, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="right">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Byte,System.Byte,System.String)">
      <summary>Verifies that for two <see cref="T:System.Byte" />s, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="right">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Byte,System.Byte,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Byte" />s, <paramref name="left" /> is strictly greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="right">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int64,System.Int64)">
      <summary>Verifies that for two <see cref="T:System.Int64">long integer</see>s, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A <see cref="T:System.Int64">long integer</see></param>
      <param name="right">A <see cref="T:System.Int64">long integer</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int64,System.Int64,System.String)">
      <summary>Verifies that for two <see cref="T:System.Int64">long integer</see>s, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A <see cref="T:System.Int64">long integer</see></param>
      <param name="right">A <see cref="T:System.Int64">long integer</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Int64">long integer</see>s, <paramref name="left" /> is strictly greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A <see cref="T:System.Int64">long integer</see></param>
      <param name="right">A <see cref="T:System.Int64">long integer</see></param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Double,System.Double)">
      <summary>Verifies that for two doubles, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A double</param>
      <param name="right">A double</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Double,System.Double,System.String)">
      <summary>Verifies that for two doubles, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A double</param>
      <param name="right">A double</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that for two doubles, <paramref name="left" /> is strictly greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A double</param>
      <param name="right">A double</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Single,System.Single)">
      <summary>Verifies that for two floats, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A float</param>
      <param name="right">A float</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Single,System.Single,System.String)">
      <summary>Verifies that for two floats, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A float</param>
      <param name="right">A float</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that for two floats, <paramref name="left" /> is strictly greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A float</param>
      <param name="right">A float</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.IComparable,System.IComparable)">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="right">An object derived from <see cref="T:System.IComparable" /></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.IComparable,System.IComparable,System.String)">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="right">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="left" /> is strictly greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="right">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int32,System.Int32)">
      <summary>Verifies that for two integers, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">An integer</param>
      <param name="right">An integer</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int32,System.Int32,System.String)">
      <summary>Verifies that for two integers, <paramref name="left" /> is greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">An integer</param>
      <param name="right">An integer</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that for two integers, <paramref name="left" /> is strictly greater than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">An integer</param>
      <param name="right">An integer</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int32,System.Int32)">
      <summary>Verifies that for two integers, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">An integer</param>
      <param name="right">An integer</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int32,System.Int32,System.String)">
      <summary>Verifies that for two integers, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="left">An integer</param>
      <param name="right">An integer</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that for two integers, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">An integer</param>
      <param name="right">An integer</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int16,System.Int16)">
      <summary>Verifies that for two <see cref="T:System.Int16">short integer</see> values, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="right">A <see cref="T:System.Int16">short integer</see> value</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int16,System.Int16,System.String)">
      <summary>Verifies that for two <see cref="T:System.Int16">short integer</see> values, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="left">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="right">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int16,System.Int16,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Int16">short integer</see> values, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="right">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Byte,System.Byte)">
      <summary>Verifies that for two <see cref="T:System.Byte" />s, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="right">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Byte,System.Byte,System.String)">
      <summary>Verifies that for two <see cref="T:System.Byte" />s, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="left">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="right">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Byte,System.Byte,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Byte" />s, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="right">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int64,System.Int64)">
      <summary>Verifies that for two <see cref="T:System.Int64">long integer</see>s, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A <see cref="T:System.Int64">long integer</see></param>
      <param name="right">A <see cref="T:System.Int64">long integer</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int64,System.Int64,System.String)">
      <summary>Verifies that for two <see cref="T:System.Int64">long integer</see>s, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="left">A <see cref="T:System.Int64">long integer</see></param>
      <param name="right">A <see cref="T:System.Int64">long integer</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Int64">long integer</see>s, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A <see cref="T:System.Int64">long integer</see></param>
      <param name="right">A <see cref="T:System.Int64">long integer</see></param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Double,System.Double)">
      <summary>Verifies that for two doubles, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A double</param>
      <param name="right">A double</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Double,System.Double,System.String)">
      <summary>Verifies that for two doubles, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="left">A double</param>
      <param name="right">A double</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that for two doubles, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A double</param>
      <param name="right">A double</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Single,System.Single)">
      <summary>Verifies that for two floats, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A float</param>
      <param name="right">A float</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Single,System.Single,System.String)">
      <summary>Verifies that for two floats, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="left">A float</param>
      <param name="right">A float</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that for two floats, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A float</param>
      <param name="right">A float</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or less than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.IComparable,System.IComparable)">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="right">An object derived from <see cref="T:System.IComparable" /></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.IComparable,System.IComparable,System.String)">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="left">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="right">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="left" /> is strictly greater than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="right">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Ignore(System.String,System.Object[])">
      <summary>Causes the test runner to ignore the remainder of the test and mark the test as ignored. The test runner will display a message defined via <paramref name="format" /> and <paramref name="args" /> using <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if the message defined via <paramref name="format" /> and <paramref name="args" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Ignore(System.String)">
      <summary>Causes the test runner to ignore the remainder of the test and mark the test as ignored with a given <paramref name="message" /></summary>
      <param name="message">The message to be shown in the test runner saying why the test was ignored</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="message" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IDictionary)">
      <summary>Verifies that <paramref name="dic" />, which derives from <see cref="T:System.Collections.IDictionary" />, contains an item with the key value of <paramref name="test" />. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The key value that <paramref name="dic" /> should contain</param>
      <param name="dic">The <see cref="T:System.Collections.IDictionary" /> object that should contain <paramref name="test" /></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not contained in <paramref name="dic" /> or either object is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IDictionary,System.String)">
      <summary>Verifies that <paramref name="dic" />, which derives from <see cref="T:System.Collections.IDictionary" />, contains an item with the key value of <paramref name="test" />. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="test">The key value that <paramref name="dic" /> should contain</param>
      <param name="dic">The <see cref="T:System.Collections.IDictionary" /> object that should contain <paramref name="test" /></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not contained in <paramref name="dic" /> or either object is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IList)">
      <summary>Verifies that <paramref name="list" />, which derives from <see cref="T:System.Collections.IList" />, contains a value of <paramref name="test" />. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The value that <paramref name="list" /> should contain</param>
      <param name="list">The <see cref="T:System.Collections.IList" /> object that should contain <paramref name="test" /></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not contained in <paramref name="list" /> or either object is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IList,System.String)">
      <summary>Verifies that <paramref name="list" />, which derives from <see cref="T:System.Collections.IList" />, contains a value of <paramref name="test" />. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a given <paramref name="message" />.</summary>
      <param name="test">The value that <paramref name="list" /> should contain</param>
      <param name="list">The <see cref="T:System.Collections.IList" /> object that should contain <paramref name="test" /></param>
      <param name="message">The message to display on failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not contained in <paramref name="list" /> or either object is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IEnumerable,System.String)">
      <summary>Verifies that <paramref name="enumerable" />, which derives from <see cref="T:System.Collections.IEnumerable" />, contains a value of <paramref name="test" />. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="test">The value that <paramref name="enumerable" /> should contain</param>
      <param name="enumerable">The <see cref="T:System.Collections.IEnumerable" /> object that should contain <paramref name="test" /></param>
      <param name="message">The message given upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not contained in <paramref name="enumerable" /> or either object is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IEnumerable)">
      <summary>Verifies that <paramref name="enumerable" />, which derives from <see cref="T:System.Collections.IEnumerable" />, contains a value of <paramref name="test" />. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The value that <paramref name="enumerable" /> should contain</param>
      <param name="enumerable">The <see cref="T:System.Collections.IEnumerable" /> object that should contain <paramref name="test" /></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is not contained in <paramref name="enumerable" /> or either object is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IncrementAssertCount">
      <summary>Increments <see cref="P:MbUnit.Framework.Assert.AssertCount" /> by 1</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object)">
      <summary>Asserts that an object may be assigned a value of a given Type.</summary>
      <param name="expected">The expected Type.</param>
      <param name="actual">The object under examination</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String)">
      <summary>Asserts that an object may be assigned a value of a given Type.</summary>
      <param name="expected">The expected Type.</param>
      <param name="actual">The object under examination</param>
      <param name="message">The messge to display in case of failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
      <summary>Asserts that an object may be assigned a value of a given Type.</summary>
      <param name="expected">The expected Type.</param>
      <param name="actual">The object under examination</param>
      <param name="message">The message to display in case of failure</param>
      <param name="args">Array of objects to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.String,System.String,System.Object[])">
      <summary>Verifies that the string <paramref name="aString" /> is equal to string.Empty. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="aString">The string that should be empty</param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="aString" /> is not empty or is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.String,System.String)">
      <summary>Verifies that the string <paramref name="aString" /> is equal to string.Empty. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="aString">The string that should be empty</param>
      <param name="message">The message given upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="aString" /> is not empty or is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.String)">
      <summary>Verifies that the string <paramref name="aString" /> is equal to string.Empty. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="aString">The string that should be empty</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="aString" /> is not empty or is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.ICollection,System.String,System.Object[])">
      <summary>Verifies that the object <paramref name="collection" /> derived from <see cref="T:System.Collections.ICollection" /> is empty. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="collection">The collection that should be empty</param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="collection" /> is not empty or is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.ICollection,System.String)">
      <summary>Verifies that the object <paramref name="collection" /> derived from <see cref="T:System.Collections.ICollection" /> is empty. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="collection">The collection that should be empty</param>
      <param name="message">The message given upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="collection" /> is not empty or is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.ICollection)">
      <summary>Verifies that the object <paramref name="collection" /> derived from <see cref="T:System.Collections.ICollection" /> is empty. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="collection">The collection that should be empty</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="collection" /> is not empty or is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
      <summary>Asserts that a <paramref name="condition" /> is false. If true, the method throws an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="condition">The evaluated condition</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown when <paramref name="condition" /> is not false.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsFalse(System.Boolean,System.String)">
      <summary>Asserts that a <paramref name="condition" /> is false. If true, the method throws an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> with the given <paramref name="message" />.</summary>
      <param name="condition">The evaluated condition</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown when <paramref name="condition" /> is not false. </exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsFalse(System.Boolean)">
      <summary>Asserts that a <paramref name="condition" /> is false. If true, the method throws an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> with no explanatory message.</summary>
      <param name="condition">The evaluated condition</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown when <paramref name="condition" /> is not false. </exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object)">
      <summary>Asserts that an object is an instance of a given type.</summary>
      <param name="expected">The expected Type</param>
      <param name="actual">The object being examined</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String)">
      <summary>Asserts that an object is an instance of a given type.</summary>
      <param name="expected">The expected Type</param>
      <param name="actual">The object being examined</param>
      <param name="message">A message to display in case of failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
      <summary>Asserts that an object is an instance of a given type.</summary>
      <param name="expected">The expected Type</param>
      <param name="actual">The object being examined</param>
      <param name="message">A message to display in case of failure</param>
      <param name="args">An array of objects to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNaN(System.Double,System.String,System.Object[])">
      <summary>Verifies that the double value <paramref name="aDouble" /> is passed is an <c>NaN</c> value. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="aDouble">The value to be tested</param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="aDouble" /> is not <c>NaN</c>.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNaN(System.Double,System.String)">
      <summary>Verifies that the double value <paramref name="aDouble" /> is passed is an <c>NaN</c> value. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given message.</summary>
      <param name="aDouble">The value to be tested</param>
      <param name="message">The message to be given on failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="aDouble" /> is not <c>NaN</c>.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNaN(System.Double)">
      <summary>Verifies that the double value <paramref name="aDouble" /> is passed is an <c>NaN</c> value. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="aDouble">The value to be tested</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="aDouble" /> is not <c>NaN</c>.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object)">
      <summary>Asserts that an object may not be assigned a value of a given Type.</summary>
      <param name="expected">The expected Type.</param>
      <param name="actual">The object under examination</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String)">
      <summary>Asserts that an object may not be assigned a value of a given Type.</summary>
      <param name="expected">The expected Type.</param>
      <param name="actual">The object under examination</param>
      <param name="message">The messge to display in case of failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
      <summary>Asserts that an object may not be assigned a value of a given Type.</summary>
      <param name="expected">The expected Type.</param>
      <param name="actual">The object under examination</param>
      <param name="message">The message to display in case of failure</param>
      <param name="args">Array of objects to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.String,System.String,System.Object[])">
      <summary>Verifies that the string <paramref name="aString" /> is not equal to string.Empty. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="aString">The string that should not be empty</param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="aString" /> is empty or is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.String,System.String)">
      <summary>Verifies that the string <paramref name="aString" /> is not equal to string.Empty. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="aString">The string that should not be empty</param>
      <param name="message">The message given upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="aString" /> is empty or is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.String)">
      <summary>Verifies that the string <paramref name="aString" /> is not equal to string.Empty. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="aString">The string that should not be empty</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="aString" /> is empty or is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection,System.String,System.Object[])">
      <summary>Verifies that the object <paramref name="collection" /> derived from <see cref="T:System.Collections.ICollection" /> is not empty. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="collection">The collection that should not be empty</param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="collection" /> is empty or is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection,System.String)">
      <summary>Verifies that the object <paramref name="collection" /> derived from <see cref="T:System.Collections.ICollection" /> is not empty. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="collection">The collection that should not be empty</param>
      <param name="message">The message given upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="collection" /> is empty or is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection)">
      <summary>Verifies that the object <paramref name="collection" /> derived from <see cref="T:System.Collections.ICollection" /> is not empty. If this not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="collection">The collection that should not be empty</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="collection" /> is empty or is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
      <summary>Asserts that an object is not an instance of a given type.</summary>
      <param name="expected">The expected Type</param>
      <param name="actual">The object being examined</param>
      <param name="message">A message to display in case of failure</param>
      <param name="args">An array of objects to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object)">
      <summary>Asserts that an object is not an instance of a given type.</summary>
      <param name="expected">The expected Type</param>
      <param name="actual">The object being examined</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String)">
      <summary>Asserts that an object is not an instance of a given type.</summary>
      <param name="expected">The expected Type</param>
      <param name="actual">The object being examined</param>
      <param name="message">A message to display in case of failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
      <summary>Verifies that the given <see cref="T:System.Object" /> is not null. If it is null, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" /></summary>
      <param name="anObject">The <see cref="T:System.Object" /> to test</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="anObject" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object,System.String)">
      <summary>Verifies that the given <see cref="T:System.Object" /> is not null. If it is null, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="anObject">The <see cref="T:System.Object" /> to test</param>
      <param name="message">The message to include if the test fails</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="anObject" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object)">
      <summary>Verifies that the given <see cref="T:System.Object" /> is not null. If it is null, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown</summary>
      <param name="anObject">The <see cref="T:System.Object" /> to test</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="anObject" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
      <summary>Verifies that the given <see cref="T:System.Object" /> is null. If it is not null, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" /></summary>
      <param name="anObject">The <see cref="T:System.Object" /> to test</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="anObject" /> is not null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNull(System.Object,System.String)">
      <summary>Verifies that the given <see cref="T:System.Object" /> is null. If it is not null, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" /></summary>
      <param name="anObject">The <see cref="T:System.Object" /> to test</param>
      <param name="message">The message to include if the test fails</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="anObject" /> is not null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNull(System.Object)">
      <summary>Verifies that the given <see cref="T:System.Object" /> is null. If it is not null, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown</summary>
      <param name="anObject">The <see cref="T:System.Object" /> to test</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="anObject" /> is not null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
      <summary>Asserts that a <paramref name="condition" /> is true. If false, the method throws an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])">String.Format</see>.</summary>
      <param name="condition">The evaluated condition</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown when <paramref name="condition" /> is not true. </exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsTrue(System.Boolean,System.String)">
      <summary>Asserts that a <paramref name="condition" /> is true. If false, the method throws an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> with the given <paramref name="message" />.</summary>
      <param name="condition">The evaluated condition</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown when <paramref name="condition" /> is not true.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsTrue(System.Boolean)">
      <summary>Asserts that a <paramref name="condition" /> is true. If false, the method throws an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> with no explanatory message.</summary>
      <param name="condition">The evaluated condition</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="condition" /> is not true. </exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that for two integers, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">An integer</param>
      <param name="arg2">An integer</param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String)">
      <summary>Verifies that for two integers, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">An integer</param>
      <param name="arg2">An integer</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Int32,System.Int32)">
      <summary>Verifies that for two integers, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">An integer</param>
      <param name="arg2">An integer</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.UInt32">unsigned integers</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">An <see cref="T:System.UInt32">unsigned integer</see></param>
      <param name="arg2">An <see cref="T:System.UInt32">unsigned integer</see></param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String)">
      <summary>Verifies that for two <see cref="T:System.UInt32">unsigned integers</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">An <see cref="T:System.UInt32">unsigned integer</see></param>
      <param name="arg2">An <see cref="T:System.UInt32">unsigned integer</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.UInt32,System.UInt32)">
      <summary>Verifies that for two <see cref="T:System.UInt32">unsigned integers</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">An <see cref="T:System.UInt32">unsigned integer</see></param>
      <param name="arg2">An <see cref="T:System.UInt32">unsigned integer</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Decimal">128-bit integers</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">A <see cref="T:System.Decimal">128-bit integer</see></param>
      <param name="arg2">A <see cref="T:System.Decimal">128-bit integer</see></param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String)">
      <summary>Verifies that for two <see cref="T:System.Decimal">128-bit integers</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">A <see cref="T:System.Decimal">128-bit integer</see></param>
      <param name="arg2">A <see cref="T:System.Decimal">128-bit integer</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Decimal,System.Decimal)">
      <summary>Verifies that for two <see cref="T:System.Decimal">128-bit integers</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">A <see cref="T:System.Decimal">128-bit integer</see></param>
      <param name="arg2">A <see cref="T:System.Decimal">128-bit integer</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Int64">long integers</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">A <see cref="T:System.Int64">long integer</see></param>
      <param name="arg2">A <see cref="T:System.Int64">long integer</see></param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String)">
      <summary>Verifies that for two <see cref="T:System.Int64">long integers</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">A <see cref="T:System.Int64">long integer</see></param>
      <param name="arg2">A <see cref="T:System.Int64">long integer</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Int64,System.Int64)">
      <summary>Verifies that for two <see cref="T:System.Int64">long integers</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">A <see cref="T:System.Int64">long integer</see></param>
      <param name="arg2">A <see cref="T:System.Int64">long integer</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Double">doubles</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">A <see cref="T:System.Double">double</see></param>
      <param name="arg2">A <see cref="T:System.Double">double</see></param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Double,System.Double,System.String)">
      <summary>Verifies that for two <see cref="T:System.Double">doubles</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">A <see cref="T:System.Double">double</see></param>
      <param name="arg2">A <see cref="T:System.Double">double</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Double,System.Double)">
      <summary>Verifies that for two <see cref="T:System.Double">doubles</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">A <see cref="T:System.Double">double</see></param>
      <param name="arg2">A <see cref="T:System.Double">double</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Single">floats</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">A <see cref="T:System.Single">float</see></param>
      <param name="arg2">A <see cref="T:System.Single">float</see></param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Single,System.Single,System.String)">
      <summary>Verifies that for two <see cref="T:System.Single">floats</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">A <see cref="T:System.Single">float</see></param>
      <param name="arg2">A <see cref="T:System.Single">float</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Single,System.Single)">
      <summary>Verifies that for two <see cref="T:System.Single">floats</see>, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">A <see cref="T:System.Single">float</see></param>
      <param name="arg2">A <see cref="T:System.Single">float</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="message" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="arg1">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="arg2">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="message">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="arg1" /> and <paramref name="arg2" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String)">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="arg1">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="arg2">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="arg1" /> and <paramref name="arg2" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.IComparable,System.IComparable)">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="arg1" /> is strictly less than <paramref name="arg2" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="arg1">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="arg2">An object derived from <see cref="T:System.IComparable" /></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="arg1" /> is equal to or greater than <paramref name="arg2" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="arg1" /> and <paramref name="arg2" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that for two integers, <paramref name="left" /> is strictly less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">An integer</param>
      <param name="right">An integer</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int16,System.Int16)">
      <summary>Verifies that for two shorts, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="right">A <see cref="T:System.Int16">short integer</see> value</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int16,System.Int16,System.String)">
      <summary>Verifies that for two shorts, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="right">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int16,System.Int16,System.String,System.Object[])">
      <summary>Verifies that for two shorts, <paramref name="left" /> is strictly less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="right">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Byte,System.Byte)">
      <summary>Verifies that for two <see cref="T:System.Byte" />s, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="right">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Byte,System.Byte,System.String)">
      <summary>Verifies that for two <see cref="T:System.Byte" />s, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="right">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Byte,System.Byte,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Byte" />s, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="right">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int64,System.Int64)">
      <summary>Verifies that for two <see cref="T:System.Int64">long integer</see>s, <paramref name="left" /> is less or equal to than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A <see cref="T:System.Int64">long integer</see></param>
      <param name="right">A <see cref="T:System.Int64">long integer</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int64,System.Int64,System.String)">
      <summary>Verifies that for two <see cref="T:System.Int64">long integer</see>s, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A <see cref="T:System.Int64">long integer</see></param>
      <param name="right">A <see cref="T:System.Int64">long integer</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Int64">long integer</see>s, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A <see cref="T:System.Int64">long integer</see></param>
      <param name="right">A <see cref="T:System.Int64">long integer</see></param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Double,System.Double)">
      <summary>Verifies that for two doubles, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A double</param>
      <param name="right">A double</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Double,System.Double,System.String)">
      <summary>Verifies that for two doubles, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A double</param>
      <param name="right">A double</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that for two doubles, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A double</param>
      <param name="right">A double</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Single,System.Single)">
      <summary>Verifies that for two floats, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A float</param>
      <param name="right">A float</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Single,System.Single,System.String)">
      <summary>Verifies that for two floats, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A float</param>
      <param name="right">A float</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that for two floats, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A float</param>
      <param name="right">A float</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.IComparable,System.IComparable)">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="right">An object derived from <see cref="T:System.IComparable" /></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.IComparable,System.IComparable,System.String)">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="right">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="right">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int32,System.Int32)">
      <summary>Verifies that for two integers, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">An integer</param>
      <param name="right">An integer</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int32,System.Int32,System.String)">
      <summary>Verifies that for two integers, <paramref name="left" /> is less than or equal to <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">An integer</param>
      <param name="right">An integer</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int32,System.Int32)">
      <summary>Verifies that for two integers, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">An integer</param>
      <param name="right">An integer</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int32,System.Int32,System.String)">
      <summary>Verifies that for two integers, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">An integer</param>
      <param name="right">An integer</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that for two integers, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">An integer</param>
      <param name="right">An integer</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int16,System.Int16)">
      <summary>Verifies that for two shorts, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="right">A <see cref="T:System.Int16">short integer</see> value</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int16,System.Int16,System.String)">
      <summary>Verifies that for two shorts, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="right">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int16,System.Int16,System.String,System.Object[])">
      <summary>Verifies that for two shorts, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="right">A <see cref="T:System.Int16">short integer</see> value</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Byte,System.Byte)">
      <summary>Verifies that for two <see cref="T:System.Byte" />s, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="right">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Byte,System.Byte,System.String)">
      <summary>Verifies that for two <see cref="T:System.Byte" />s, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="right">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Byte,System.Byte,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Byte" />s, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="right">A <see cref="T:System.Byte" /> value (0 to 255)</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int64,System.Int64)">
      <summary>Verifies that for two <see cref="T:System.Int64">long integer</see>s, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A <see cref="T:System.Int64">long integer</see></param>
      <param name="right">A <see cref="T:System.Int64">long integer</see></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int64,System.Int64,System.String)">
      <summary>Verifies that for two <see cref="T:System.Int64">long integer</see>s, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A <see cref="T:System.Int64">long integer</see></param>
      <param name="right">A <see cref="T:System.Int64">long integer</see></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Verifies that for two <see cref="T:System.Int64">long integer</see>s, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A <see cref="T:System.Int64">long integer</see></param>
      <param name="right">A <see cref="T:System.Int64">long integer</see></param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Double,System.Double)">
      <summary>Verifies that for two doubles, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A double</param>
      <param name="right">A double</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Double,System.Double,System.String)">
      <summary>Verifies that for two doubles, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A double</param>
      <param name="right">A double</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that for two doubles, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A double</param>
      <param name="right">A double</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Single,System.Single)">
      <summary>Verifies that for two floats, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">A float</param>
      <param name="right">A float</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Single,System.Single,System.String)">
      <summary>Verifies that for two floats, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">A float</param>
      <param name="right">A float</param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that for two floats, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">A float</param>
      <param name="right">A float</param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.IComparable,System.IComparable)">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="left">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="right">An object derived from <see cref="T:System.IComparable" /></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.IComparable,System.IComparable,System.String)">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="left">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="right">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Verifies that for two objects derived from <see cref="T:System.IComparable" />, <paramref name="left" /> is strictly less than <paramref name="right" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a message defined via <paramref name="format" /> and <paramref name="args" /> through <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="left">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="right">An object derived from <see cref="T:System.IComparable" /></param>
      <param name="format">A <a href="http://msdn2.microsoft.com/en-gb/library/txafckwd.aspx">composite format string</a></param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="left" /> is equal to or greater than <paramref name="right" /> or if either value is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.Int32,System.Int32,System.Int32)">
      <summary>Verifies that for three integers, <paramref name="test" /> is not in the range defined by or equal to one of <paramref name="left" /> and <paramref name="right" />. If it is in the defined range, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The integer being tested</param>
      <param name="left">An integer marking one of end of a range</param>
      <param name="right">An integer marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.Int16,System.Int16,System.Int16)">
      <summary>Verifies that for three <see cref="T:System.Int16">short integers</see>, <paramref name="test" /> is not in the range defined by or equal to one of <paramref name="left" /> and <paramref name="right" />. If it is in the defined range, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The <see cref="T:System.Int16">short integer</see> being tested</param>
      <param name="left">A <see cref="T:System.Int16">short integer</see> marking one of end of a range</param>
      <param name="right">A <see cref="T:System.Int16">short integer</see> marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.Byte,System.Byte,System.Byte)">
      <summary>Verifies that for three <see cref="T:System.Byte">bytes</see> (0 to 255), <paramref name="test" /> is not in the range defined by or equal to one of <paramref name="left" /> and <paramref name="right" />. If it is in the defined range, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The value between 0 and 255 being tested</param>
      <param name="left">A value between 0 and 255 marking one of end of a range</param>
      <param name="right">A value between 0 and 255 marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.Int64,System.Int64,System.Int64)">
      <summary>Verifies that for three <see cref="T:System.Int64">long integer</see>s, <paramref name="test" /> is not in the range defined by or equal to one of <paramref name="left" /> and <paramref name="right" />. If it is in the defined range, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The <see cref="T:System.Int64">long integer</see> being tested</param>
      <param name="left">A <see cref="T:System.Int64">long integer</see> marking one of end of a range</param>
      <param name="right">A <see cref="T:System.Int64">long integer</see> marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.Double,System.Double,System.Double)">
      <summary>Verifies that for three doubles, <paramref name="test" /> is not in the range defined by or equal to one of <paramref name="left" /> and <paramref name="right" />. If it is in the defined range, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The double being tested</param>
      <param name="left">An double marking one of end of a range</param>
      <param name="right">An double marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.Single,System.Single,System.Single)">
      <summary>Verifies that for three floats, <paramref name="test" /> is not in the range defined by or equal to one of <paramref name="left" /> and <paramref name="right" />. If it is in the defined range, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The float being tested</param>
      <param name="left">An float marking one of end of a range</param>
      <param name="right">An float marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.IComparable,System.IComparable,System.IComparable)">
      <summary>Verifies that for three objects derived from <see cref="T:System.IComparable" />, <paramref name="test" /> is not in the range defined by or equal to one of <paramref name="left" /> and <paramref name="right" />. If it is in the defined range, a <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The object derived from <see cref="T:System.IComparable" /> being tested</param>
      <param name="left">The object derived from <see cref="T:System.IComparable" /> marking one of end of a range</param>
      <param name="right">The object derived from <see cref="T:System.IComparable" /> marking the other end of a range</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is within the range defined by <paramref name="left" /> or <paramref name="right" /> or if one of the three values is null.</exception>
      <exception cref="T:System.ArgumentException"> Thrown if <paramref name="test" />, <paramref name="left" /> and <paramref name="right" /> are not of the same type</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IDictionary,System.String)">
      <summary>Verifies that <paramref name="dic" />, which derives from <see cref="T:System.Collections.IDictionary" />, does not contains an item with the key value of <paramref name="test" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="test">The key value that <paramref name="dic" /> should not contain</param>
      <param name="dic">The <see cref="T:System.Collections.IDictionary" /> object that should not contain <paramref name="test" /></param>
      <param name="message">The message printed out upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is contained in <paramref name="dic" /> or either object is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IDictionary)">
      <summary>Verifies that <paramref name="dic" />, which derives from <see cref="T:System.Collections.IDictionary" />, does not contain an item with the key value of <paramref name="test" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The key value that <paramref name="dic" /> should not contain</param>
      <param name="dic">The <see cref="T:System.Collections.IDictionary" /> object that should not contain <paramref name="test" /></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is contained in <paramref name="dic" /> or either object is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IList,System.String)">
      <summary>Verifies that <paramref name="list" />, which derives from <see cref="T:System.Collections.IList" />, does not contain a value of <paramref name="test" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with a given <paramref name="message" />.</summary>
      <param name="test">The value that <paramref name="list" /> should not contain</param>
      <param name="list">The <see cref="T:System.Collections.IList" /> object that should not contain <paramref name="test" /></param>
      <param name="message">The message to display on failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is contained in <paramref name="list" /> or either object is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IList)">
      <summary>Verifies that <paramref name="list" />, which derives from <see cref="T:System.Collections.IList" />, does not contains a value of <paramref name="test" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The value that <paramref name="list" /> should not contain</param>
      <param name="list">The <see cref="T:System.Collections.IList" /> object that should not contain <paramref name="test" /></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is contained in <paramref name="list" /> or either object is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IEnumerable,System.String)">
      <summary>Verifies that <paramref name="enumerable" />, which derives from <see cref="T:System.Collections.IEnumerable" />, does not contain a value of <paramref name="test" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown with the given <paramref name="message" />.</summary>
      <param name="test">The value that <paramref name="enumerable" /> should not contain</param>
      <param name="enumerable">The <see cref="T:System.Collections.IEnumerable" /> object that should not contain <paramref name="test" /></param>
      <param name="message">The message given upon failure</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is contained in <paramref name="enumerable" /> or if either object is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IEnumerable)">
      <summary>Verifies that <paramref name="enumerable" />, which derives from <see cref="T:System.Collections.IEnumerable" />, does not contain a value of <paramref name="test" />. If this is not the case, an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> is thrown.</summary>
      <param name="test">The value that <paramref name="enumerable" /> should not contain</param>
      <param name="enumerable">The <see cref="T:System.Collections.IEnumerable" /> object that should not contain <paramref name="test" /></param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException"> Thrown if <paramref name="test" /> is contained in <paramref name="enumerable" /> or if either object is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.ReferenceEquals(System.Object,System.Object)">
      <summary>Overrides the default <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" /> method inherited from <see cref="T:System.Object" /> to throw an <see cref="T:MbUnit.Core.Exceptions.AssertionException" /> instead. This is to ensure that there is no mistake in calling this function as part of an Assert in your tests. Use <see cref="M:MbUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String)">AreSame()</see> instead or one of its overloads.</summary>
      <param name="a">The first <see cref="T:System.Object" /> to compare</param>
      <param name="b">The second <see cref="T:System.Object" /> to compare</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Always thrown as this method should not be used.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.ResetAssertCount">
      <summary>Resets <see cref="P:MbUnit.Framework.Assert.AssertCount" /> to 0</summary>
    </member>
    <member name="T:MbUnit.Framework.AuthorAttribute">
      <summary>Associates the author's name and email address with a test fixture, test method, test parameter or other test component.</summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.EMail">
      <summary>Gets or sets the author's email address or empty string if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.HomePage">
      <summary>Gets or sets the author's homepage or empty string if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.Name">
      <summary>Gets or sets the author's name.</summary>
    </member>
    <member name="M:MbUnit.Framework.AuthorAttribute.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.ClassTester">
      <summary>Used in strategies for testing classes and tests for null arguments. For more info, see <a href="http://blog.dotnetwiki.org/TestingTheArgumentNullExceptionWithMbUnit.aspx">this article</a></summary>
    </member>
    <member name="T:MbUnit.Framework.CollectionAssert">
      <summary>Assertion helper for the <see cref="T:System.Collections.ICollection" /> class. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type)">
      <summary>Asserts that all items contained in collection are of the type specified by expectedType.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="expectedType">System.Type that all objects in collection must be instances of</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String)">
      <summary>Asserts that all items contained in collection are of the type specified by expectedType.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="expectedType">System.Type that all objects in collection must be instances of</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String,System.Object[])">
      <summary>Asserts that all items contained in collection are of the type specified by expectedType.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="expectedType">System.Type that all objects in collection must be instances of</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection)">
      <summary>Asserts that all items contained in collection are not equal to null.</summary>
      <param name="collection">ICollection of objects to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String)">
      <summary>Asserts that all items contained in collection are not equal to null.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String,System.Object[])">
      <summary>Asserts that all items contained in collection are not equal to null.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection)">
      <summary>Ensures that every object contained in collection exists within the collection once and only once.</summary>
      <param name="collection">ICollection of objects to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String)">
      <summary>Ensures that every object contained in collection exists within the collection once and only once.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String,System.Object[])">
      <summary>Ensures that every object contained in collection exists within the collection once and only once.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreCountEqual(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.Count" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreCountEqual(System.Int32,System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.Count" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreElementsEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>Verifies that <paramref name="expected" /> and <paramref name="actual" /> are equal collections. Element count and element wize equality is verified.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that <paramref name="expected" /> and <paramref name="actual" /> are equal collections. Element count and element wize equality is verified.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreIsSynchronizedEqual(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreIsSynchronizedEqual(System.Boolean,System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Asserts that expected and actual are not exactly equal.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
      <summary>Asserts that expected and actual are not exactly equal. If comparer is not null then it will be used to compare the objects.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Asserts that expected and actual are not exactly equal.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
      <summary>Asserts that expected and actual are not exactly equal. If comparer is not null then it will be used to compare the objects.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Asserts that expected and actual are not exactly equal.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
      <summary>Asserts that expected and actual are not exactly equal. If comparer is not null then it will be used to compare the objects.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Asserts that expected and actual are not equivalent.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Asserts that expected and actual are not equivalent.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Asserts that expected and actual are not equivalent.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreSyncRootEqual(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.SyncRoot" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreSyncRootEqual(System.Object,System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.SyncRoot" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.Contains(System.Collections.ICollection,System.Object)">
      <summary>Asserts that collection contains actual as an item.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="actual">Object to be found within collection</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String)">
      <summary>Asserts that collection contains actual as an item.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="actual">Object to be found within collection</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String,System.Object[])">
      <summary>Asserts that collection contains actual as an item.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="actual">Object to be found within collection</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object)">
      <summary>Asserts that collection does not contain actual as an item.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="actual">Object that cannot exist within collection</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String)">
      <summary>Asserts that collection does not contain actual as an item.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="actual">Object that cannot exist within collection</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String,System.Object[])">
      <summary>Asserts that collection does not contain actual as an item.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="actual">Object that cannot exist within collection</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsCountCorrect(System.Collections.ICollection)">
      <summary>Verifies that the <see cref="P:System.Collections.ICollection.Count" /> property is synchronized with the number of iterated elements.</summary>
      <param name="col">Collection to test</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="col" /> is a null reference (Nothing in Visual Basic) </exception>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Asserts that subset is not a subset of superset.</summary>
      <param name="subset">The ICollection subset to be considered</param>
      <param name="superset">The ICollection superset to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Asserts that subset is not a subset of superset.</summary>
      <param name="subset">The ICollection subset to be considered</param>
      <param name="superset">The ICollection superset to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Asserts that subset is not a subset of superset.</summary>
      <param name="subset">The ICollection subset to be considered</param>
      <param name="superset">The ICollection superset to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsNotSynchronized(System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Asserts that subset is a subset of superset.</summary>
      <param name="subset">The ICollection subset to be considered</param>
      <param name="superset">The ICollection superset to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Asserts that subset is a subset of superset.</summary>
      <param name="subset">The ICollection subset to be considered</param>
      <param name="superset">The ICollection superset to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Asserts that subset is a subset of superset.</summary>
      <param name="subset">The ICollection subset to be considered</param>
      <param name="superset">The ICollection superset to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsSynchronized(System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="T:MbUnit.Framework.CollectionIndexingFixtureAttribute">
      <summary>Collection indexing pattern. This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.CollectionIndexingFixtureAttribute.GetRun">
      <summary>Creates the execution logic</summary>
      <returns>A <see cref="T:MbUnit.Core.Runs.IRun" /> instance that represent the type test logic.</returns>
    </member>
    <member name="T:MbUnit.Framework.CollectionOrderFixtureAttribute">
      <summary>Collection Order Pattern implementations. This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.CollectionOrderFixtureAttribute.GetRun">
      <summary>Creates the run order for the collection</summary>
      <returns>An object derived from <see cref="T:MbUnit.Core.Runs.IRun" /> (a <see cref="T:MbUnit.Core.Runs.SequenceRun" /> object that contains the order of execution</returns>
    </member>
    <member name="T:MbUnit.Framework.CombinatorialTestAttribute">
      <summary>Tag use to mark a mark a combinatorial unit test method. This tells MbUnit to do a pairwise enumeration over the different data sample of each parameter for the test This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.CombinatorialTestAttribute.CombinationType">
      <summary>Returns the <see cref="P:MbUnit.Framework.CombinatorialTestAttribute.CombinationType" /> for this test.</summary>
    </member>
    <member name="M:MbUnit.Framework.CombinatorialTestAttribute.GetProduct(TestFu.Operations.IDomainCollection)">
      <summary>Returns the object representing the set of all tuples to be tested.</summary>
      <param name="domains">The collection of sets of parameter values to be combined</param>
      <returns>An <see cref="T:TestFu.Operations.ITupleEnumerable" /> object representing the set of tuples to be tested</returns>
    </member>
    <member name="T:MbUnit.Framework.CompilerAssert">
      <summary>Assertion helper for compilation. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.CompilerAssert.CSharpCompiler">
      <summary>Gets the C# compiler from <see cref="T:Microsoft.CSharp.CSharpCodeProvider" />.</summary>
      <value>C# compiler.</value>
    </member>
    <member name="P:MbUnit.Framework.CompilerAssert.VBCompiler">
      <summary>Gets the VB.NET compiler from <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />.</summary>
      <value>VB.NET compiler.</value>
    </member>
    <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.String)">
      <summary>Verifies that <paramref name="source" /> compiles using the provided compiler.</summary>
      <param name="compiler">Compiler instance</param>
      <param name="source">Source code to compile</param>
    </member>
    <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.IO.Stream)">
      <summary>Verifies that <paramref name="source" /> compiles using the provided compiler.</summary>
      <param name="compiler">Compiler instance</param>
      <param name="source">Source code to compile</param>
    </member>
    <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.Collections.Specialized.StringCollection,System.String)">
      <summary>Verifies that <paramref name="source" /> compiles using the provided compiler.</summary>
      <param name="compiler">Compiler instance</param>
      <param name="references">Referenced assemblies</param>
      <param name="source">Source code to compile</param>
    </member>
    <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Verifies that <paramref name="source" /> compiles using the provided compiler.</summary>
      <param name="compiler">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> instance.</param>
      <param name="options">Compilation options</param>
      <param name="source">source to compile</param>
    </member>
    <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.CodeDom.Compiler.CompilerParameters,System.String,System.Boolean)">
      <summary>Verifies that <paramref name="source" /> compiles using the provided compiler.</summary>
      <param name="compiler">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> instance.</param>
      <param name="options">Compilation options</param>
      <param name="source">Source to compile</param>
      <param name="throwOnWarning">true if assertion should throw if any warning.</param>
    </member>
    <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.CodeDom.Compiler.CompilerParameters,System.IO.Stream)">
      <summary>Verifies that <paramref name="source" /> compiles using the provided compiler.</summary>
      <param name="compiler">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> instance.</param>
      <param name="options">Compilation options</param>
      <param name="source">Stream containing the source to compile</param>
    </member>
    <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.CodeDom.Compiler.CompilerParameters,System.IO.Stream,System.Boolean)">
      <summary>Verifies that <paramref name="source" /> compiles using the provided compiler.</summary>
      <param name="compiler">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> instance.</param>
      <param name="options">Compilation options</param>
      <param name="source">Stream containing the source to compile</param>
      <param name="throwOnWarning">true if assertion should throw if any warning.</param>
    </member>
    <member name="M:MbUnit.Framework.CompilerAssert.DisplayErrors(System.CodeDom.Compiler.CompilerResults,System.IO.TextWriter)">
      <summary>Writes the errors given in the compiler <paramref name="results" /> to the named <paramref name="writer" /></summary>
      <param name="results">The <see cref="T:System.CodeDom.Compiler.CompilerResults" /> generated by the compilation</param>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to write the errors out to</param>
    </member>
    <member name="M:MbUnit.Framework.CompilerAssert.NotCompiles(System.CodeDom.Compiler.ICodeCompiler,System.String)">
      <summary>Verifies that <paramref name="source" /> does not compile using the provided compiler.</summary>
      <param name="compiler">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> instance.</param>
      <param name="source">Source to compile</param>
    </member>
    <member name="M:MbUnit.Framework.CompilerAssert.NotCompiles(System.CodeDom.Compiler.ICodeCompiler,System.IO.Stream)">
      <summary>Verifies that <paramref name="source" /> does not compile using the provided compiler.</summary>
      <param name="compiler">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> instance.</param>
      <param name="source">Source to compile</param>
    </member>
    <member name="M:MbUnit.Framework.CompilerAssert.NotCompiles(System.CodeDom.Compiler.ICodeCompiler,System.Collections.Specialized.StringCollection,System.String)">
      <summary>Verifies that <paramref name="source" /> does not compile using the provided compiler.</summary>
      <param name="compiler">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> instance.</param>
      <param name="referencedAssemblies">Collection of referenced assemblies</param>
      <param name="source">Source to compile</param>
    </member>
    <member name="M:MbUnit.Framework.CompilerAssert.NotCompiles(System.CodeDom.Compiler.ICodeCompiler,System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Verifies that <paramref name="source" /> does not compile using the provided compiler.</summary>
      <param name="compiler">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> instance.</param>
      <param name="options">Compilation options</param>
      <param name="source">Source to compile</param>
    </member>
    <member name="M:MbUnit.Framework.CompilerAssert.NotCompiles(System.CodeDom.Compiler.ICodeCompiler,System.CodeDom.Compiler.CompilerParameters,System.IO.Stream)">
      <summary>Verifies that <paramref name="source" /> does not compile using the provided compiler.</summary>
      <param name="compiler">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> instance.</param>
      <param name="options">Compilation options</param>
      <param name="source">Source to compile</param>
    </member>
    <member name="T:MbUnit.Framework.CompositeFixtureAttribute">
      <summary>Composite fixture pattern implementation. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.CompositeFixtureAttribute.FixtureType">
      <summary>Gets or sets the fixture type.</summary>
      <value>Fixture instance type.</value>
    </member>
    <member name="M:MbUnit.Framework.CompositeFixtureAttribute.GetRun">
      <summary>Creates the execution logic</summary>
      <returns>A <see cref="T:MbUnit.Core.Runs.IRun" /> instance that represent the type test logic.</returns>
    </member>
    <member name="T:MbUnit.Framework.ConditionalExceptionAttribute">
      <summary>Tags method that should throw an exception if a predicate is true.</summary>
    </member>
    <member name="P:MbUnit.Framework.ConditionalExceptionAttribute.PredicateMethodName">
      <summary>Gets the name of the predicate being cecked during test execution</summary>
    </member>
    <member name="M:MbUnit.Framework.ConditionalExceptionAttribute.GetInvoker(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Returns a <see cref="T:MbUnit.Core.Invokers.ConditionalExceptionRunInvoker" /> object to invoke the test if the predicate is true</summary>
      <param name="invoker">The standard test invoker derived from <see cref="T:MbUnit.Core.Invokers.IRunInvoker" /></param>
      <returns>A <see cref="T:MbUnit.Core.Invokers.ConditionalExceptionRunInvoker" /> object to invoke the test if the predicate is true</returns>
    </member>
    <member name="T:MbUnit.Framework.ConsoleTester">
      <summary>
        <para> When you need to test a console application, this task usually involves calling the application using Process.Start and monitoring that process. This class simplifies this.</para>
        <list type="bullet">
          <item>it redirects output and error streams so that they are logged in the report</item>
          <item>it checks the exit code</item>
          <item>a time out can be specified</item>
        </list>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ConsoleTester.ExpectedExitCode">
      <summary>Gets or set the expected exit code from the application once it has completed its run</summary>
      <value>The expected exit code (an integer).</value>
    </member>
    <member name="P:MbUnit.Framework.ConsoleTester.TimeOut">
      <summary>Gets or sets the time out.</summary>
      <value>The time out in seconds</value>
    </member>
    <member name="M:MbUnit.Framework.ConsoleTester.DumpConsoles">
      <summary>Writes the standard output and error streams from the app to the console</summary>
    </member>
    <member name="M:MbUnit.Framework.ConsoleTester.GetArguments">
      <summary>Gets the arguments for the console application</summary>
      <returns>The arguments for the console application as a space-delimited string</returns>
    </member>
    <member name="M:MbUnit.Framework.ConsoleTester.Run">
      <summary>Runs the console app with the given arguments</summary>
    </member>
    <member name="T:MbUnit.Framework.ControlAssert">
      <summary>Class containing generic assert methods for the comparison of Windows Form <see cref="T:System.Windows.Forms.Control" />s. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AllowDrop(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.AllowDrop" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleDefaultActionDescriptionEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleDefaultActionDescriptionEqual(System.String,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleDescriptionEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleDescription" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleDescriptionEqual(System.String,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleDescription" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleNameEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleName" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleNameEqual(System.String,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleName" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleRoleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleRole" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleRoleEqual(System.Windows.Forms.AccessibleRole,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleRole" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreAllowDropEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.AllowDrop" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreAllowDropEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.AllowDrop" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreAnchorEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Anchor" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreAnchorEqual(System.Windows.Forms.AnchorStyles,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Anchor" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreBackColorEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.BackColor" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreBackColorEqual(System.Drawing.Color,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.BackColor" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreBackgroundImageEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreBackgroundImageEqual(System.Drawing.Image,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreBindingContextEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.BindingContext" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreBindingContextEqual(System.Windows.Forms.BindingContext,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.BindingContext" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreBottomEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Bottom" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreBottomEqual(System.Int32,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Bottom" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreBoundsEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Bounds" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreBoundsEqual(System.Drawing.Rectangle,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Bounds" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCanFocusEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanFocus" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCanFocusEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanFocus" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCanSelectEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanSelect" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCanSelectEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanSelect" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCaptureEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Capture" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCaptureEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Capture" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCausesValidationEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CausesValidation" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCausesValidationEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CausesValidation" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreClientRectangleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ClientRectangle" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreClientRectangleEqual(System.Drawing.Rectangle,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ClientRectangle" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreClientSizeEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ClientSize" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreClientSizeEqual(System.Drawing.Size,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ClientSize" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCompanyNameEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CompanyName" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCompanyNameEqual(System.String,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CompanyName" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreContainerEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.ComponentModel.Component.Container" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreContainerEqual(System.ComponentModel.IContainer,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.ComponentModel.Component.Container" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreContainsFocusEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ContainsFocus" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreContainsFocusEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ContainsFocus" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreContextMenuEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ContextMenu" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreContextMenuEqual(System.Windows.Forms.ContextMenu,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ContextMenu" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreControlsEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Controls" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreControlsEqual(System.Windows.Forms.Control.ControlCollection,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Controls" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCreatedEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Created" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCreatedEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Created" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCursorEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Cursor" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreCursorEqual(System.Windows.Forms.Cursor,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Cursor" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreDataBindingsEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.DataBindings" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreDataBindingsEqual(System.Windows.Forms.ControlBindingsCollection,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.DataBindings" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreDisplayRectangleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreDisplayRectangleEqual(System.Drawing.Rectangle,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreDisposingEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Disposing" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreDisposingEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Disposing" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreDockEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Dock" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreDockEqual(System.Windows.Forms.DockStyle,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Dock" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreEnabledEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Enabled" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreEnabledEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Enabled" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreFocusedEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Focused" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreFocusedEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Focused" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreFontEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Font" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreFontEqual(System.Drawing.Font,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Font" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreForeColorEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ForeColor" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreForeColorEqual(System.Drawing.Color,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ForeColor" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreHandleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Handle" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreHandleEqual(System.IntPtr,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Handle" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreHasChildrenEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.HasChildren" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreHasChildrenEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.HasChildren" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreHeightEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Height" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreHeightEqual(System.Int32,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Height" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreImeModeEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ImeMode" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreImeModeEqual(System.Windows.Forms.ImeMode,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ImeMode" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreInvokeRequiredEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.InvokeRequired" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreInvokeRequiredEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.InvokeRequired" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreIsAccessibleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsAccessible" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreIsAccessibleEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsAccessible" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreIsDisposedEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsDisposed" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreIsDisposedEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsDisposed" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreIsHandleCreatedEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsHandleCreated" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreIsHandleCreatedEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsHandleCreated" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreLeftEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Left" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreLeftEqual(System.Int32,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Left" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreLocationEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Location" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreLocationEqual(System.Drawing.Point,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Location" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreNameEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Name" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreNameEqual(System.String,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Name" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreParentEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Parent" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreProductNameEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ProductName" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreProductNameEqual(System.String,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ProductName" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreProductVersionEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ProductVersion" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreProductVersionEqual(System.String,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ProductVersion" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreRecreatingHandleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.RecreatingHandle" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreRecreatingHandleEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.RecreatingHandle" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreRegionEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Region" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreRegionEqual(System.Drawing.Region,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Region" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreRightEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Right" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreRightEqual(System.Int32,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Right" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreRightToLeftEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.RightToLeft" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreRightToLeftEqual(System.Windows.Forms.RightToLeft,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.RightToLeft" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreSiteEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Site" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreSiteEqual(System.ComponentModel.ISite,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Site" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreSizeEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Size" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreSizeEqual(System.Drawing.Size,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Size" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreTabIndexEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.TabIndex" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreTabIndexEqual(System.Int32,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.TabIndex" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreTabStopEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.TabStop" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreTabStopEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.TabStop" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreTagEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Tag" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreTagEqual(System.Object,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Tag" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreTextEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Text" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreTextEqual(System.String,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Text" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreTopEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Top" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreTopEqual(System.Int32,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Top" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreTopLevelControlEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.TopLevelControl" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreVisibleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Visible" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreVisibleEqual(System.Boolean,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Visible" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreWidthEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Width" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreWidthEqual(System.Int32,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Width" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreWindowTargetEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.WindowTarget" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.AreWindowTargetEqual(System.Windows.Forms.IWindowTarget,System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.WindowTarget" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.CanFocus(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanFocus" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.CanSelect(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanSelect" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.Capture(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Capture" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.CausesValidation(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CausesValidation" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.ContainsFocus(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ContainsFocus" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.Created(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Created" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.Disposing(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Disposing" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.Enabled(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Enabled" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.Focused(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Focused" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.HasChildren(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.HasChildren" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.InvokeRequired(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.InvokeRequired" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.IsAccessible(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsAccessible" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.IsDisposed(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsDisposed" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.IsHandleCreated(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsHandleCreated" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.IsNotandleCreated(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsHandleCreated" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.IsNotccessible(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsAccessible" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.IsNotisposed(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsDisposed" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotAllowDrop(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.AllowDrop" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotCanFocus(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanFocus" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotCanSelect(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanSelect" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotCapture(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Capture" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotCausesValidation(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.CausesValidation" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotContainsFocus(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.ContainsFocus" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotCreated(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Created" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotDisposing(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Disposing" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotEnabled(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Enabled" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotFocused(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Focused" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotHasChildren(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.HasChildren" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotInvokeRequired(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.InvokeRequired" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotRecreatingHandle(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.RecreatingHandle" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotTabStop(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.TabStop" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.NotVisible(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Visible" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.RecreatingHandle(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.RecreatingHandle" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.TabStop(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.TabStop" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.ControlAssert.Visible(System.Windows.Forms.Control)">
      <summary>Verifies that the property value <see cref="P:System.Windows.Forms.Control.Visible" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="T:MbUnit.Framework.CopyAttribute">
      <summary>Tags a class whose assembly file and associated pdb file should be copied elsewhere</summary>
    </member>
    <member name="P:MbUnit.Framework.CopyAttribute.Destination">
      <summary>Gets or sets the place for the files to be copied to.</summary>
      <value>The new path for the files</value>
    </member>
    <member name="P:MbUnit.Framework.CopyAttribute.Files">
      <summary>Gets the files to be copied.</summary>
      <value>An array of the files being copied</value>
    </member>
    <member name="T:MbUnit.Framework.CopyToProviderAttribute">
      <summary>Tags a method that provides a new <see cref="T:System.Collections.IEnumerable" /> object containing data for testing</summary>
    </member>
    <member name="T:MbUnit.Framework.CurrentFixtureAttribute">
      <summary>Used in conjunction, e.g. with an <see cref="T:MbUnit.Core.AutoRunner" /> to identify only the tests that it should run This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.DataAssert">
      <summary>Assertion class for Database related object. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.DataAssert.AreDataEqual(System.Data.DataSet,System.Data.DataSet)">
      <summary>Assert that the data in two <see cref="T:System.Data.DataSet" />s are equal.</summary>
      <param name="expected">The expected <see cref="T:System.Data.DataSet" />.</param>
      <param name="actual">The actual <see cref="T:System.Data.DataSet" />.</param>
    </member>
    <member name="M:MbUnit.Framework.DataAssert.AreEqual(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>Asserts that two <see cref="T:System.Data.DataColumn" /> are equal.</summary>
      <param name="expected">Expected <see cref="T:System.Data.DataColumn" /> instance.</param>
      <param name="actual">Actual <see cref="T:System.Data.DataColumn" /> instance.</param>
    </member>
    <member name="M:MbUnit.Framework.DataAssert.AreEqual(System.Data.DataRow,System.Data.DataRow)">
      <summary>Asserts that two <see cref="T:System.Data.DataRow" /> are equal.</summary>
      <param name="expected">Expected <see cref="T:System.Data.DataRow" /> instance.</param>
      <param name="actual">Actual <see cref="T:System.Data.DataRow" /> instance.</param>
    </member>
    <member name="M:MbUnit.Framework.DataAssert.AreEqual(System.DateTime,System.DateTime)">
      <summary>Asserts that two <see cref="T:System.DateTime" /> values are equal</summary>
      <param name="expected">The expected <see cref="T:System.DateTime" />.</param>
      <param name="actual">The actual <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:MbUnit.Framework.DataAssert.AreEqual(System.Data.DataSet,System.Data.DataSet)">
      <summary>Assert that two <see cref="T:System.Data.DataSet" /> schemas and the data they contain are equal.</summary>
      <param name="expected">The expected <see cref="T:System.Data.DataSet" />.</param>
      <param name="actual">The actual <see cref="T:System.Data.DataSet" />.</param>
    </member>
    <member name="M:MbUnit.Framework.DataAssert.AreSchemasEqual(System.Data.DataSet,System.Data.DataSet)">
      <summary>Assert that two <see cref="T:System.Data.DataSet" /> schemas are equal.</summary>
      <param name="expected">The expected <see cref="T:System.Data.DataSet" />.</param>
      <param name="actual">The actual <see cref="T:System.Data.DataSet" />.</param>
    </member>
    <member name="T:MbUnit.Framework.DataFixtureAttribute">
      <summary>The DataFixture tags a test class that will be using provider classes to push values to the tests it contains. This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.DataFixtureAttribute.GetRun">
      <summary>Creates the execution logic</summary>
      <returns>A <see cref="T:MbUnit.Core.Runs.IRun" /> instance that represent the type test logic.</returns>
    </member>
    <member name="T:MbUnit.Framework.DataProviderAttribute">
      <summary>The DataProvider method attribute allows you to mark a method as your collection populator for tests.</summary>
    </member>
    <member name="P:MbUnit.Framework.DataProviderAttribute.ProviderType">
      <summary>Gets or sets <see cref="T:System.Type" /> of object to return to tests expecting data</summary>
      <value>The <see cref="T:System.Type" /> of object to return to tests expecting data</value>
    </member>
    <member name="T:MbUnit.Framework.DataProviderFixtureDecoratorAttribute">
      <summary>Abstract class to derive (XML) DataProvider attribute classes from. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.DataProviderFixtureDecoratorAttribute.GetData">
      <summary>Gets the <see cref="T:System.Xml.XmlNodeList" /> to be used by the class tagged by this attribute.</summary>
      <returns>The <see cref="T:System.Xml.XmlNodeList" /> to be used by the class tagged by this attribute</returns>
    </member>
    <member name="T:MbUnit.Framework.DbRestoreInfoAttribute">
      <summary>Abstract class describing attribute used to tag a class and declare a backup be restored to it before the test is executed on request by tagging a test method with a <see cref="T:MbUnit.Framework.RestoreDatabaseAttribute" />. This class represents the generic case. The specific implementation for SQL Server is <see cref="T:MbUnit.Framework.SqlRestoreInfoAttribute" />This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.DbRestoreInfoAttribute.BackupDestination">
      <summary>Gets the location of the backup file.</summary>
      <value>The location of the backup file.</value>
    </member>
    <member name="P:MbUnit.Framework.DbRestoreInfoAttribute.BackupDevice">
      <summary>Gets the <see cref="T:TestFu.Data.DbBackupDevice">type</see> of backup device.</summary>
      <value>The <see cref="T:TestFu.Data.DbBackupDevice">type</see> of backup device.</value>
    </member>
    <member name="P:MbUnit.Framework.DbRestoreInfoAttribute.ConnectionString">
      <summary>Gets the connection string for the database to be restored.</summary>
      <value>The connection string.</value>
    </member>
    <member name="P:MbUnit.Framework.DbRestoreInfoAttribute.DatabaseName">
      <summary>Gets the name of the database to be restored.</summary>
      <value>The name of the database.</value>
    </member>
    <member name="P:MbUnit.Framework.DbRestoreInfoAttribute.FactoryType">
      <summary>Gets the factory class derived from <see cref="T:TestFu.Data.IDbFactory" /> that will execute the restore</summary>
      <value>The factory class derived from <see cref="T:TestFu.Data.IDbFactory" /> that will execute the restore</value>
    </member>
    <member name="M:MbUnit.Framework.DbRestoreInfoAttribute.CreateFactory">
      <summary>Creates and returns an instance of the factory class derived from <see cref="T:TestFu.Data.IDbFactory" /> that will execute the restore.</summary>
      <returns>An instance of the factory class</returns>
    </member>
    <member name="M:MbUnit.Framework.DbRestoreInfoAttribute.GetInfo(System.Type)">
      <summary>Gets the custom attributes on the attribute</summary>
      <param name="t">The attribute <see cref="T:System.Type" />.</param>
      <returns>The custom attributes (database information) for the backup</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="t" /> is null</exception>
      <exception cref="T:MbUnit.Framework.Exceptions.MissingDbInfoException">Thrown if no database information can be found attached to the attribute taggign the class</exception>
    </member>
    <member name="T:MbUnit.Framework.DependsOnAttribute">
      <summary>Use this attribute to identify the parent text fixture class or classes whose tests must execute successfully before the tests in this class are executed This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.DependsOnAttribute.ParentFixtureType">
      <summary>Gets or sets the type of the parent fixture.</summary>
      <value>The type of the parent fixture class.</value>
    </member>
    <member name="T:MbUnit.Framework.DurationAttribute">
      <summary>Use this attribute to specify that the tagged method should return in a given number of seconds or fail otherwise.</summary>
    </member>
    <member name="P:MbUnit.Framework.DurationAttribute.MaxDuration">
      <summary>Gets the maximum duration set by the tag.</summary>
      <value>Maximum test duration in seconds.</value>
    </member>
    <member name="P:MbUnit.Framework.DurationAttribute.MinDuration">
      <summary>Gets the minimum duration set by the tag.</summary>
      <value>Minimum test duration in seconds.</value>
    </member>
    <member name="M:MbUnit.Framework.DurationAttribute.GetInvoker(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Returns the invoker class to run the test with the given duration parameters.</summary>
      <param name="invoker">The invoker currently set to run the test.</param>
      <returns>A new <see cref="T:MbUnit.Core.Invokers.DurationRunInvoker" /> object wrapping <paramref name="invoker" /></returns>
    </member>
    <member name="T:MbUnit.Framework.EnumerationFixtureAttribute">
      <summary>Tags a class as a specialized fixture for testing classes derived from <see cref="T:System.Collections.IEnumerable" /> or <see cref="T:System.Collections.IEnumerator" />. The fixture class will automatically test that objects returned by test methods within the class tagged with either <see cref="T:MbUnit.Framework.DataProviderAttribute" /> or <see cref="T:MbUnit.Framework.CopyToProviderAttribute" /> follow the enumerator specification. This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.EnumerationFixtureAttribute.GetRun">
      <summary>Gets the test runner class defining all the test to be run within the tagged fixture class.</summary>
      <returns>A <see cref="T:MbUnit.Core.Runs.SequenceRun" /> object</returns>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentExceptionAttribute">
      <summary>Subtype of the <see cref="T:MbUnit.Framework.ExpectedExceptionAttribute" /> that automatically expects an <see cref="T:System.ArgumentException" />. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentNullExceptionAttribute">
      <summary>Subtype of the <see cref="T:MbUnit.Framework.ExpectedExceptionAttribute" /> that automatically expects an <see cref="T:System.ArgumentNullException" />. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.ExpectedExceptionAttribute">
      <summary>Tags a test method to indicate that it should throw an exception.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExpectedExceptionAttribute.ExceptionType">
      <summary>The expected exception.</summary>
      <value>The type of the exception expected to be thrown.</value>
    </member>
    <member name="P:MbUnit.Framework.ExpectedExceptionAttribute.ExpectedMessage">
      <summary>The expected message text.</summary>
      <value>The expected message.</value>
    </member>
    <member name="P:MbUnit.Framework.ExpectedExceptionAttribute.InnerExceptionType">
      <summary>The expected inner exception.</summary>
      <value>The type of the expected inner exception.</value>
    </member>
    <member name="M:MbUnit.Framework.ExpectedExceptionAttribute.GetInvoker(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Gets the test runner class that knows how to invoke the test and expect the specified exception</summary>
      <param name="invoker">The invoker currently invoking the test.</param>
      <returns>A new <see cref="T:MbUnit.Core.Invokers.ExpectedExceptionRunInvoker" /> object wrapping <paramref name="invoker" /></returns>
    </member>
    <member name="T:MbUnit.Framework.ExpectedExceptionTestCase">
      <summary>Used when dynamically adding <see cref="T:MbUnit.Framework.ITestCase" />s that expect an exception to a <see cref="T:MbUnit.Framework.TestSuite" />This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExpectedExceptionTestCase.ExceptionType">
      <summary>Returns the <see cref="T:System.Type" /> of the exception expected to be thrown.</summary>
      <value>The <see cref="T:System.Type" /> of the exception expected to be thrown.</value>
    </member>
    <member name="M:MbUnit.Framework.ExpectedExceptionTestCase.Invoke(System.Object,System.Collections.IList)">
      <summary>Invokes the test case expecting an exception</summary>
      <param name="o">The <see cref="T:MbUnit.Framework.ITestCase" /> to run</param>
      <param name="args">Parameter values for the test case</param>
      <returns>null</returns>
      <exception cref="T:MbUnit.Core.Exceptions.ExceptionNotThrownException">Thrown if the expected exception does not occur</exception>
    </member>
    <member name="T:MbUnit.Framework.ExplicitAttribute">
      <summary>Tags test fixture classes and individual test methods to not be run unless explicitly selected, either using the GUI or command line arguments. This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.ExplicitAttribute.GetInvoker(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Returns the invoker class to run the test or test fixture onlyif explicitly requested.</summary>
      <param name="invoker">The invoker currently set to run the test.</param>
      <returns>A new <see cref="T:MbUnit.Core.Invokers.ExplicitRunInvoker" /> object wrapping <paramref name="invoker" /></returns>
    </member>
    <member name="T:MbUnit.Framework.ExtractResourceAttribute">
      <summary>Test methods annotated with this attribute will have the specified embedded resource extracted.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExtractResourceAttribute.Destination">
      <summary>The destination file to write the resource to. Should be a path.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExtractResourceAttribute.ResourceCleanup">
      <summary>Whether or not to cleanup the resource.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExtractResourceAttribute.ResourceName">
      <summary>The full name of the resource. Use Reflector to find this out if you don't know.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExtractResourceAttribute.Stream">
      <summary>The current resource stream if using the attribute without specifying a destination.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExtractResourceAttribute.Type">
      <summary>The type within the assembly that contains the embedded resource.</summary>
    </member>
    <member name="M:MbUnit.Framework.ExtractResourceAttribute.GetInvoker(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Returns the invoker class to run the test with the specified embedded resource extracted.</summary>
      <param name="invoker">The invoker currently set to run the test.</param>
      <returns>A new <see cref="T:MbUnit.Framework.ExtractResourceAttribute.ExtractResourceRunInvoker" /> object wrapping <paramref name="invoker" /></returns>
    </member>
    <member name="T:MbUnit.Framework.FactoryAttribute">
      <summary>Used with Combinatorial Tests to indicate how to generate values for a test parameter. Can be tagged onto a parameter directly or a method which yields values. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.FactoredType">
      <summary>Returns the <see cref="T:System.Type" /> of the factory-yielded values.</summary>
      <value>The <see cref="T:System.Type" /> of the values.</value>
    </member>
    <member name="T:MbUnit.Framework.FileAssert">
      <summary>Class containing generic assert methods for the comparison of <see cref="T:System.IO.FileInfo">files</see> and <see cref="T:System.IO.Stream">streams</see>. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.FileAssert.AreEqual(System.String,System.String)">
      <summary>Verifies that the <paramref name="actualPath" /> to a file is the same as the <paramref name="expectedPath" /></summary>
      <param name="expectedPath">The expected path.</param>
      <param name="actualPath">The actual path.</param>
    </member>
    <member name="M:MbUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo,System.String)">
      <summary>Verifies that the path to the <paramref name="expected" /> file identified as a <see cref="T:System.IO.FileInfo" /> is the same as the actual <paramref name="filePath" /></summary>
      <param name="expected">A <see cref="T:System.IO.FileInfo" /> object representing the expected file</param>
      <param name="filePath">The actual file path in the test as a string.</param>
    </member>
    <member name="M:MbUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo,System.IO.FileInfo)">
      <summary>Verifies that two files have the same length and contents as each other.</summary>
      <param name="expected">
        <see cref="T:System.IO.FileInfo" /> object representing the expected file and contents</param>
      <param name="actual">
        <see cref="T:System.IO.FileInfo" /> object representing the actual file and contents</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if either <see cref="T:System.IO.FileInfo" /> object is null</exception>
    </member>
    <member name="M:MbUnit.Framework.FileAssert.AreStreamContentEqual(System.IO.Stream,System.IO.Stream)">
      <summary>Verifies that two <see cref="T:System.IO.Stream" />s are readable and have the same contents as each other.</summary>
      <param name="expected">
        <see cref="T:System.IO.Stream" /> object representing the expected results</param>
      <param name="actual">
        <see cref="T:System.IO.Stream" /> object representing the actual results so far in the test</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if either <see cref="T:System.IO.Stream" /> object is null</exception>
    </member>
    <member name="M:MbUnit.Framework.FileAssert.Exists(System.String)">
      <summary>Verifies that the file specified by <paramref name="fileName" /> exists</summary>
      <param name="fileName">The path of the file.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="fileName" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.FileAssert.NotExists(System.String)">
      <summary>Verifies that the file specified by <paramref name="fileName" /> does not exist</summary>
      <param name="fileName">The path of the file.</param>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="fileName" /> is null</exception>
    </member>
    <member name="T:MbUnit.Framework.FillAttribute">
      <summary>Used to tag methods within <see cref="T:MbUnit.Framework.CollectionOrderFixtureAttribute">test fixtures implementing the collection order pattern</see> that fill collections with data.</summary>
    </member>
    <member name="T:MbUnit.Framework.FixtureCategoryAttribute">
      <summary>Used to tag a test fixture class with a category for use in the MbUnit GUi or console runner</summary>
    </member>
    <member name="P:MbUnit.Framework.FixtureCategoryAttribute.Category">
      <summary>Gets or sets the test fixture category.</summary>
      <value>The test fixture category.</value>
    </member>
    <member name="T:MbUnit.Framework.ForEachTestAttribute">
      <summary>Used to tag a test method to specify the information contained in an XML file that should be used as parameters for that test. To be used in conjunction with the <see cref="T:MbUnit.Framework.DataFixtureAttribute" /> and <see cref="T:MbUnit.Framework.XmlDataProviderAttribute" />. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.ForEachTestAttribute.DataType">
      <summary>Gets or sets the class <see cref="T:System.Type" /> the xml data will be deserialized into for use in your tests</summary>
      <value>The class <see cref="T:System.Type" /> for your tests.</value>
    </member>
    <member name="P:MbUnit.Framework.ForEachTestAttribute.IsDeserialized">
      <summary>Gets a value indicating whether this instance is deserialized.</summary>
      <value>
        <c>true</c> if this instance is deserialized; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MbUnit.Framework.ForEachTestAttribute.XPath">
      <summary>Gets or sets the XPath to the data for the test.</summary>
      <value>The XPath string.</value>
      <exception cref="T:System.ArgumentNullException">Thrown if the value is null</exception>
    </member>
    <member name="M:MbUnit.Framework.ForEachTestAttribute.Deserialize(System.Xml.XmlNode)">
      <summary>Deserializes the specified XML node for use in a test.</summary>
      <param name="node">The node to deserialize.</param>
      <returns>An object of the type specified by <see cref="P:MbUnit.Framework.ForEachTestAttribute.DataType" /></returns>
    </member>
    <member name="T:MbUnit.Framework.GrammarAttribute">
      <summary>Identifies the tagged method as a Production Grammar This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.GrammarFixtureAttribute">
      <summary>Identifies the tagged class as a Production Grammar Fixture This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.GrammarFixtureAttribute.GetRun">
      <summary>Returns a new instance of a <see cref="T:MbUnit.Framework.GrammarFixtureAttribute.ProductionGrammarRun" /> class</summary>
    </member>
    <member name="T:MbUnit.Framework.GrammarFixtureAttribute.ProductionGrammarRun">
      <summary>Represents a run of tests as generated according to the production grammar which provides a test method with data</summary>
    </member>
    <member name="P:MbUnit.Framework.GrammarFixtureAttribute.ProductionGrammarRun.IsTest">
      <summary>Gets a value indicating whether the run is considered as a test or not.</summary>
      <value>true if the <see cref="T:MbUnit.Framework.GrammarFixtureAttribute.ProductionGrammarRun" /> instance is a test</value>
    </member>
    <member name="P:MbUnit.Framework.GrammarFixtureAttribute.ProductionGrammarRun.Name">
      <summary>Gets a descriptive name of the <see cref="T:MbUnit.Framework.GrammarFixtureAttribute.ProductionGrammarRun" /></summary>
      <value>A descriptive name of the <see cref="T:MbUnit.Framework.GrammarFixtureAttribute.ProductionGrammarRun" /></value>
    </member>
    <member name="M:MbUnit.Framework.GrammarFixtureAttribute.ProductionGrammarRun.Reflect(MbUnit.Core.Invokers.RunInvokerTree,MbUnit.Core.Invokers.RunInvokerVertex,System.Type)">
      <summary>Populates the <see cref="T:MbUnit.Core.Invokers.RunInvokerTree" /> invoker graph with <see cref="T:MbUnit.Core.Invokers.IRunInvoker" /> generated by the run.</summary>
      <param name="tree">Invoker tree</param>
      <param name="parent">parent vertex</param>
      <param name="t">class type that is marked by the run</param>
    </member>
    <member name="T:MbUnit.Framework.GrammarFixtureAttribute.ProductionGrammarRunInvoker">
      <summary>A class that knows how to invoke a test using input from a production grammar.</summary>
    </member>
    <member name="P:MbUnit.Framework.GrammarFixtureAttribute.ProductionGrammarRunInvoker.Name">
      <summary>Returns the name of the test based on the seed method and grammar method names.</summary>
      <value>The name.</value>
    </member>
    <member name="M:MbUnit.Framework.GrammarFixtureAttribute.ProductionGrammarRunInvoker.Execute(System.Object,System.Collections.IList)">
      <summary>Executes the specified test <paramref name="o" /></summary>
      <param name="o">The test.</param>
      <param name="args">The parameters for the test.</param>
      <returns>null</returns>
      <exception cref="T:System.ArgumentException">Thrown if <see cref="F:MbUnit.Framework.GrammarFixtureAttribute.ProductionGrammarRunInvoker.grammarMethod" /> does not return an <see cref="T:TestFu.Grammars.IGrammar" /></exception>
    </member>
    <member name="T:MbUnit.Framework.IgnoreAttribute">
      <summary>
        <para> Indicates that a test is to be ignored by the framework and will not be run. The test will still appear in test reports along with the reason that it was ignored, if provided. </para>
        <para> This attribute can be used to disable tests that are broken or expensive without commenting them out or removing them from the source code. </para>This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.IgnoreAttribute.GetInvoker(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Returns the invoker class to run the test with the given duration parameters.</summary>
      <param name="wrapper">The invoker currently set to run the test.</param>
      <returns>A new <see cref="T:MbUnit.Core.Invokers.IgnoreRunInvoker" /> object wrapping <paramref name="wrapper" /></returns>
    </member>
    <member name="T:MbUnit.Framework.ImportanceAttribute">
      <summary>Associates a <see cref="T:MbUnit.Framework.TestImportance" /> with a test fixture, test method, test parameter or other test component.</summary>
    </member>
    <member name="P:MbUnit.Framework.ImportanceAttribute.Importance">
      <summary>Gets the importance.</summary>
      <value>The importance.</value>
    </member>
    <member name="M:MbUnit.Framework.ImportanceAttribute.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:MbUnit.Framework.TestImportance" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:MbUnit.Framework.TestImportance" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.IndexerProviderAttribute">
      <summary>Tags a method that returns an object which can be iterated over using a class implementing <see cref="T:MbUnit.Framework.IBidirectionalIterator" /></summary>
    </member>
    <member name="P:MbUnit.Framework.IndexerProviderAttribute.First">
      <summary>Gets or sets the first value for the index.</summary>
      <value>The first value for the index.</value>
    </member>
    <member name="P:MbUnit.Framework.IndexerProviderAttribute.IndexType">
      <summary>Gets or sets the type of the index.</summary>
      <value>The type of the index.</value>
    </member>
    <member name="P:MbUnit.Framework.IndexerProviderAttribute.Iterator">
      <summary>Gets the iterator.</summary>
      <value>The iterator.</value>
    </member>
    <member name="P:MbUnit.Framework.IndexerProviderAttribute.IteratorType">
      <summary>Gets or sets the type of the iterator.</summary>
      <value>The type of the iterator.</value>
    </member>
    <member name="P:MbUnit.Framework.IndexerProviderAttribute.Last">
      <summary>Gets or sets the last value for the index.</summary>
      <value>The last value for the index.</value>
    </member>
    <member name="T:MbUnit.Framework.InformationAttribute">
      <summary>Derive from this class to tag any class, method or property and associate information with it to be picked up by console or GUI test runners. For example, author name and test importance</summary>
    </member>
    <member name="T:MbUnit.Framework.IntIterator">
      <summary>Simple class implementing <see cref="T:MbUnit.Framework.IBidirectionalIterator" /> that returns the next or previous integer in sequence</summary>
    </member>
    <member name="M:MbUnit.Framework.IntIterator.Decrement(System.Int32)">
      <summary>Decrements the specified integer.</summary>
      <param name="o">The current integer.</param>
      <returns>The next integer in sequence</returns>
    </member>
    <member name="M:MbUnit.Framework.IntIterator.Increment(System.Int32)">
      <summary>Increments the specified integer.</summary>
      <param name="o">The current integer.</param>
      <returns>The next integer in sequence</returns>
    </member>
    <member name="T:MbUnit.Framework.ManualTester">
      <summary>Contains methods that will show a dialog to the tester that diplays steps to take. The dialog also lets the tester adding comments. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.ManualTester.DisplayForm(System.String[])">
      <summary>Displays a dialog to the tester that diplays the test steps to take</summary>
      <param name="testSteps">The test steps.</param>
    </member>
    <member name="T:MbUnit.Framework.MethodTestCase">
      <summary>Represents a test case for a method on an object. It tests a method given a set of parameters if applicable. Can be added to a <see cref="T:MbUnit.Framework.TestSuite" />.</summary>
    </member>
    <member name="P:MbUnit.Framework.MethodTestCase.Description">
      <summary>Gets or sets the description of the test.</summary>
      <value>The description.</value>
    </member>
    <member name="P:MbUnit.Framework.MethodTestCase.Method">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> object representing the method being tested.</summary>
      <value>The method.</value>
    </member>
    <member name="P:MbUnit.Framework.MethodTestCase.Name">
      <summary>Gets the name of the test.</summary>
      <value>The name.</value>
    </member>
    <member name="M:MbUnit.Framework.MethodTestCase.GetParameters">
      <summary>Gets the parameters for the method being tested.</summary>
      <returns>the parameters for the method being tested</returns>
    </member>
    <member name="M:MbUnit.Framework.MethodTestCase.Invoke(System.Object,System.Collections.IList)">
      <summary>Invokes the method on the specified object <paramref name="o" />.</summary>
      <param name="o">The object to invoke the method on</param>
      <param name="args">The arguments to send to the method.</param>
    </member>
    <member name="T:MbUnit.Framework.MethodTester">
      <summary>Used in strategies for testing classes and tests for null arguments. For more info, see <a href="http://blog.dotnetwiki.org/TestingTheArgumentNullExceptionWithMbUnit.aspx">this article</a></summary>
    </member>
    <member name="T:MbUnit.Framework.MultipleCultureAttribute">
      <summary>Used to tag any test method that needs to be run under a number of different cultures.</summary>
    </member>
    <member name="P:MbUnit.Framework.MultipleCultureAttribute.CultureString">
      <summary>Gets the list of cultures to be used in the test as a comma-delimited string</summary>
      <value>The list of cultures to be used in the test as a comma-delimited string</value>
    </member>
    <member name="P:MbUnit.Framework.MultipleCultureAttribute.Cultures">
      <summary>Gets the list of cultures to be used in the test as a StringCollection</summary>
      <value>The list of cultures to be used in the test as a StringCollection</value>
    </member>
    <member name="M:MbUnit.Framework.MultipleCultureAttribute.GetInvoker(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Returns the invoker class to run the test with the given duration parameters.</summary>
      <param name="invoker">The invoker currently set to run the test.</param>
      <returns>A new <see cref="T:MbUnit.Core.Invokers.MultipleCultureRunInvoker" /> object wrapping <paramref name="invoker" /></returns>
    </member>
    <member name="T:MbUnit.Framework.NamespaceProviderAttribute">
      <summary>Tags a class as a namespace provider. For use with a <see cref="T:MbUnit.Framework.TypeFixtureAttribute" /> tagged class instead of a <see cref="T:MbUnit.Framework.ProviderFactoryAttribute" /> tagged type.</summary>
    </member>
    <member name="P:MbUnit.Framework.NamespaceProviderAttribute.FactoredType">
      <summary>Gets or sets the factored type.</summary>
      <value>The factored type.</value>
    </member>
    <member name="P:MbUnit.Framework.NamespaceProviderAttribute.Namespace">
      <summary>Gets or sets the namespace.</summary>
      <value>The namespace.</value>
    </member>
    <member name="P:MbUnit.Framework.NamespaceProviderAttribute.Recurse">
      <summary>Gets or sets a value indicating whether this <see cref="T:MbUnit.Framework.NamespaceProviderAttribute" /> is recursive.</summary>
      <value>
        <c>true</c> if recursive; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MbUnit.Framework.NamespaceProviderAttribute.TypeToAssembly">
      <summary>Gets or sets the assembly type.</summary>
      <value>The assembly type.</value>
    </member>
    <member name="M:MbUnit.Framework.NamespaceProviderAttribute.GetRun(System.Type)">
      <summary>Gets the test runner class defining all the test to be run within the tagged fixture class.</summary>
      <param name="decoratedType">Type of the decorated.</param>
      <returns>An <see cref="T:MbUnit.Core.Runs.AssemblyProviderRun" /> object</returns>
    </member>
    <member name="T:MbUnit.Framework.NotInheritedExpectedExceptionAttribute">
      <summary>In the case where your test class inherits test methods from a parent class, use this tag to indicate that the test in the subclass should expect a different type of exception</summary>
    </member>
    <member name="T:MbUnit.Framework.NullableAttributeAttribute">
      <summary>Tag your assembly with this to identify the class you've created to identify parameters in your test methods that can be null. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.NullableAttributeAttribute.NullableType">
      <summary>Gets or sets the type of the attribute class to identify nullable parameters</summary>
      <value>The type of the attribute class to identify nullable parameters</value>
    </member>
    <member name="M:MbUnit.Framework.NullableAttributeAttribute.GetAttribute(System.Type)">
      <summary>Returns the type of the <see cref="T:MbUnit.Framework.NullableAttributeAttribute" /> for the assembly containing the current method</summary>
      <param name="t">The class containing the method being tested</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="t" /> is null</exception>
    </member>
    <member name="T:MbUnit.Framework.PerfAssert">
      <summary>Performance Assertion class This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfAssert.Duration(System.Double)">
      <summary>Creates a countdown timer that will assert if execution time exceeds maximum duration.</summary>
      <param name="maxDuration">Maximum duration for the test in seconds</param>
      <returns>A <see cref="T:MbUnit.Framework.CountDownTimer" /> that knows the <paramref name="maxDuration" /> of the test</returns>
      <exception cref="T:MbUnit.Core.Exceptions.AssertionException">Thrown if <paramref name="maxDuration" /> is not greater than 0</exception>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterAttribute">
      <summary>Tags a test fixture class or test method with implicit assertions about the values of a performance counter on your machine.</summary>
    </member>
    <member name="P:MbUnit.Framework.PerfCounterAttribute.CategoryName">
      <summary>Gets the name of the performance category.</summary>
      <value>The name of the category.</value>
    </member>
    <member name="P:MbUnit.Framework.PerfCounterAttribute.CounterName">
      <summary>Gets the name of the performance counter being checked.</summary>
      <value>The name of the performance counter being checked.</value>
    </member>
    <member name="P:MbUnit.Framework.PerfCounterAttribute.InstanceName">
      <summary>Gets or sets the instance name of the performance counter</summary>
      <value>The instance name of the performance counter</value>
    </member>
    <member name="P:MbUnit.Framework.PerfCounterAttribute.MachineName">
      <summary>Gets or sets the name of the machine the counter is running on. Default value is the local machine</summary>
      <value>The name of the machine.</value>
    </member>
    <member name="P:MbUnit.Framework.PerfCounterAttribute.MaxValue">
      <summary>Gets the maximum value of the counter.</summary>
      <value>The maximum value of the counter.</value>
    </member>
    <member name="P:MbUnit.Framework.PerfCounterAttribute.MinValue">
      <summary>Gets or sets the minimum value of the counter.</summary>
      <value>The minimum value of the counter.</value>
    </member>
    <member name="P:MbUnit.Framework.PerfCounterAttribute.Relative">
      <summary>Gets or sets a value indicating whether the counter measurement should be calculated relative to its original value.</summary>
      <value>
        <c>true</c> if relative; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterAttribute.GetInvoker(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Returns the invoker class to run the test with the given duration parameters.</summary>
      <param name="wrapper">The invoker currently set to run the test.</param>
      <returns>A new <see cref="T:MbUnit.Framework.PerfCounterAttribute.PerfCounterRunInvoker" /> object wrapping <paramref name="wrapper" /></returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterAttribute.PerfCounterRunInvoker">
      <summary>Class that understands how to invoke a test given and monitor a performance counter nominated by a <see cref="T:MbUnit.Framework.PerfCounterAttribute" /> tagging the test method</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterAttribute.PerfCounterRunInvoker.Execute(System.Object,System.Collections.IList)">
      <summary>Executes the specified test.</summary>
      <param name="o">The test.</param>
      <param name="args">The arguments for the test.</param>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo">
      <summary>Class containing static helper methods for retrieving performance counters. For use in conjunction with <see cref="T:MbUnit.Framework.PerfCounterAttribute" /></summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NextValue(System.String,System.String,System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="categoryName">Name of the performance counter category.</param>
      <param name="counterName">Name of the performance counter to query.</param>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData">
      <summary>.Net CLR Data This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientCurrentNbconnectionpools">
      <summary>Current number of pools associated with the process. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientCurrentNbconnectionpools.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientCurrentNbpooledandnonpooledconnections">
      <summary>Current number of connections, pooled or not. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientCurrentNbpooledandnonpooledconnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientCurrentNbpooledconnections">
      <summary>Current number of connections in all pools associated with the process. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientCurrentNbpooledconnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientPeakNbpooledconnections">
      <summary>The highest number of connections in all pools since the process started. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientPeakNbpooledconnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientTotalNbfailedcommands">
      <summary>The total number of command executes that have failed for any reason. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientTotalNbfailedcommands.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientTotalNbfailedconnects">
      <summary>The total number of connection open attempts that have failed for any reason. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientTotalNbfailedconnects.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrExceptions">
      <summary>Runtime statistics on CLR exception handling. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofExcepsThrown">
      <summary>This counter displays the total number of exceptions thrown since the start of the application. These include both .NET exceptions and unmanaged exceptions that get converted into .NET exceptions e.g. null pointer reference exception in unmanaged code would get re-thrown in managed code as a .NET System.NullReferenceException; this counter includes both handled and unhandled exceptions. Exceptions that are re-thrown would get counted again. Exceptions should only occur in rare situations and not in the normal control flow of the program. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofExcepsThrown.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofExcepsThrown.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofExcepsThrownsec">
      <summary>This counter displays the number of exceptions thrown per second. These include both .NET exceptions and unmanaged exceptions that get converted into .NET exceptions e.g. null pointer reference exception in unmanaged code would get re-thrown in managed code as a .NET System.NullReferenceException; this counter includes both handled and unhandled exceptions. Exceptions should only occur in rare situations and not in the normal control flow of the program; this counter was designed as an indicator of potential performance problems due to large (&gt;100s) rate of exceptions thrown. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofExcepsThrownsec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofExcepsThrownsec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofFilterssec">
      <summary>This counter displays the number of .NET exception filters executed per second. An exception filter evaluates whether an exception should be handled or not. This counter tracks the rate of exception filters evaluated; irrespective of whether the exception was handled or not. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofFilterssec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofFilterssec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofFinallyssec">
      <summary>This counter displays the number of finally blocks executed per second. A finally block is guaranteed to be executed regardless of how the try block was exited. Only the finally blocks that are executed for an exception are counted; finally blocks on normal code paths are not counted by this counter. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofFinallyssec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofFinallyssec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.ThrowToCatchDepthsec">
      <summary>This counter displays the number of stack frames traversed from the frame that threw the .NET exception to the frame that handled the exception per second. This counter resets to 0 when an exception handler is entered; so nested exceptions would show the handler to handler stack depth. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.ThrowToCatchDepthsec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.ThrowToCatchDepthsec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrInterop">
      <summary>Stats for CLR interop. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofCcws">
      <summary>This counter displays the current number of Com-Callable-Wrappers (CCWs). A CCW is a proxy for the .NET managed object being referenced from unmanaged COM client(s). This counter was designed to indicate the number of managed objects being referenced by unmanaged COM code. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofCcws.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofCcws.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrInterop.Nbofmarshalling">
      <summary>This counter displays the total number of times arguments and return values have been marshaled from managed to unmanaged code and vice versa since the start of the application. This counter is not incremented if the stubs are inlined. (Stubs are responsible for marshalling arguments and return values). Stubs usually get inlined if the marshalling overhead is small. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.Nbofmarshalling.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.Nbofmarshalling.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofStubs">
      <summary>This counter displays the current number of stubs created by the CLR. Stubs are responsible for marshalling arguments and return values from managed to unmanaged code and vice versa; during a COM Interop call or PInvoke call. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofStubs.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofStubs.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofTlbexportssec">
      <summary>Reserved for future use. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofTlbexportssec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofTlbexportssec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofTlbimportssec">
      <summary>Reserved for future use. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofTlbimportssec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofTlbimportssec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit">
      <summary>Stats for CLR Jit. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.IlBytesJittedsec">
      <summary>This counter displays the rate at which IL bytes are jitted per second. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.IlBytesJittedsec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.IlBytesJittedsec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.NbofIlBytesJitted">
      <summary>This counter displays the total IL bytes jitted since the start of the application. This counter is exactly equivalent to the "Total # of IL Bytes Jitted" counter. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.NbofIlBytesJitted.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.NbofIlBytesJitted.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.NbofMethodsJitted">
      <summary>This counter displays the total number of methods compiled Just-In-Time (JIT) by the CLR JIT compiler since the start of the application. This counter does not include the pre-jitted methods. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.NbofMethodsJitted.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.NbofMethodsJitted.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.NotDisplayed">
      <summary>Not Displayed. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.NotDisplayed.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.NotDisplayed.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.StandardJitFailures">
      <summary>This counter displays the peak number of methods the JIT compiler has failed to JIT since the start of the application. This failure can occur if the IL cannot be verified or if there was an internal error in the JIT compiler. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.StandardJitFailures.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.StandardJitFailures.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.TimeinJit">
      <summary>This counter displays the percentage of elapsed time spent in JIT compilation since the last JIT compilation phase. This counter is updated at the end of every JIT compilation phase. A JIT compilation phase is the phase when a method and its dependencies are being compiled. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.TimeinJit.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.TimeinJit.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.TotalNbofIlBytesJitted">
      <summary>This counter displays the total IL bytes jitted since the start of the application. This counter is exactly equivalent to the "# of IL Bytes Jitted" counter. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.TotalNbofIlBytesJitted.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.TotalNbofIlBytesJitted.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading">
      <summary>Statistics for CLR Class Loader. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.AssemblySearchLength">
      <summary>Reserved for future use. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.AssemblySearchLength.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.AssemblySearchLength.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.BytesinLoaderHeap">
      <summary>This counter displays the current size (in bytes) of the memory committed by the class loader across all AppDomains. (Committed memory is the physical memory for which space has been reserved on the disk paging file.) This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.BytesinLoaderHeap.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.BytesinLoaderHeap.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Currentappdomains">
      <summary>This counter displays the current number of AppDomains loaded in this application. AppDomains (application domains) provide a secure and versatile unit of processing that the CLR can use to provide isolation between applications running in the same process. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Currentappdomains.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Currentappdomains.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.CurrentAssemblies">
      <summary>This counter displays the current number of Assemblies loaded across all AppDomains in this application. If the Assembly is loaded as domain-neutral from multiple AppDomains then this counter is incremented once only. Assemblies can be loaded as domain-neutral when their code can be shared by all AppDomains or they can be loaded as domain-specific when their code is private to the AppDomain. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.CurrentAssemblies.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.CurrentAssemblies.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.CurrentClassesLoaded">
      <summary>This counter displays the current number of classes loaded in all Assemblies. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.CurrentClassesLoaded.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.CurrentClassesLoaded.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Rateofappdomains">
      <summary>This counter displays the number of AppDomains loaded per second. AppDomains (application domains) provide a secure and versatile unit of processing that the CLR can use to provide isolation between applications running in the same process. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Rateofappdomains.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Rateofappdomains.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Rateofappdomainsunloaded">
      <summary>This counter displays the number of AppDomains unloaded per second. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Rateofappdomainsunloaded.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Rateofappdomainsunloaded.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofAssemblies">
      <summary>This counter displays the number of Assemblies loaded across all AppDomains per second. If the Assembly is loaded as domain-neutral from multiple AppDomains then this counter is incremented once only. Assemblies can be loaded as domain-neutral when their code can be shared by all AppDomains or they can be loaded as domain-specific when their code is private to the AppDomain. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofAssemblies.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofAssemblies.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofClassesLoaded">
      <summary>This counter displays the number of classes loaded per second in all Assemblies. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofClassesLoaded.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofClassesLoaded.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofLoadFailures">
      <summary>This counter displays the number of classes that failed to load per second. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. These load failures could be due to many reasons like inadequate security or illegal format. Full details can be found in the profiling services help. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofLoadFailures.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofLoadFailures.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TimeLoading">
      <summary>Reserved for future use. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TimeLoading.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TimeLoading.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalAppdomains">
      <summary>This counter displays the peak number of AppDomains loaded since the start of this application. AppDomains (application domains) provide a secure and versatile unit of processing that the CLR can use to provide isolation between applications running in the same process. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalAppdomains.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalAppdomains.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Totalappdomainsunloaded">
      <summary>This counter displays the total number of AppDomains unloaded since the start of the application. If an AppDomain is loaded and unloaded multiple times this counter would count each of those unloads as separate. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Totalappdomainsunloaded.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Totalappdomainsunloaded.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalAssemblies">
      <summary>This counter displays the total number of Assemblies loaded since the start of this application. If the Assembly is loaded as domain-neutral from multiple AppDomains then this counter is incremented once only. Assemblies can be loaded as domain-neutral when their code can be shared by all AppDomains or they can be loaded as domain-specific when their code is private to the AppDomain. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalAssemblies.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalAssemblies.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalClassesLoaded">
      <summary>This counter displays the cumulative number of classes loaded in all Assemblies since the start of this application. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalClassesLoaded.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalClassesLoaded.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalNbofLoadFailures">
      <summary>This counter displays the peak number of classes that have failed to load since the start of the application. These load failures could be due to many reasons like inadequate security or illegal format. Full details can be found in the profiling services help. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalNbofLoadFailures.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalNbofLoadFailures.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads">
      <summary>Stats for CLR Locks and Threads. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.ContentionRatesec">
      <summary>Rate at which threads in the runtime attempt to acquire a managed lock unsuccessfully. Managed locks can be acquired in many ways; by the "lock" statement in C# or by calling System.Monitor.Enter or by using MethodImplOptions.Synchronized custom attribute. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.ContentionRatesec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.ContentionRatesec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.CurrentQueueLength">
      <summary>This counter displays the total number of threads currently waiting to acquire some managed lock in the application. This counter is not an average over time; it displays the last observed value. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.CurrentQueueLength.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.CurrentQueueLength.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.NbofcurrentlogicalThreads">
      <summary>This counter displays the number of current .NET thread objects in the application. A .NET thread object is created either by new System.Threading.Thread or when an unmanaged thread enters the managed environment. This counters maintains the count of both running and stopped threads. This counter is not an average over time; it just displays the last observed value. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.NbofcurrentlogicalThreads.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.NbofcurrentlogicalThreads.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.NbofcurrentphysicalThreads">
      <summary>This counter displays the number of native OS threads created and owned by the CLR to act as underlying threads for .NET thread objects. This counters value does not include the threads used by the CLR in its internal operations; it is a subset of the threads in the OS process. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.NbofcurrentphysicalThreads.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.NbofcurrentphysicalThreads.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.Nbofcurrentrecognizedthreads">
      <summary>This counter displays the number of threads that are currently recognized by the CLR; they have a corresponding .NET thread object associated with them. These threads are not created by the CLR; they are created outside the CLR but have since run inside the CLR at least once. Only unique threads are tracked; threads with same thread ID re-entering the CLR or recreated after thread exit are not counted twice. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.Nbofcurrentrecognizedthreads.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.Nbofcurrentrecognizedthreads.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.Nboftotalrecognizedthreads">
      <summary>This counter displays the total number of threads that have been recognized by the CLR since the start of this application; these threads have a corresponding .NET thread object associated with them. These threads are not created by the CLR; they are created outside the CLR but have since run inside the CLR at least once. Only unique threads are tracked; threads with same thread ID re-entering the CLR or recreated after thread exit are not counted twice. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.Nboftotalrecognizedthreads.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.Nboftotalrecognizedthreads.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.QueueLengthPeak">
      <summary>This counter displays the total number of threads that waited to acquire some managed lock since the start of the application. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.QueueLengthPeak.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.QueueLengthPeak.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.QueueLengthsec">
      <summary>This counter displays the number of threads per second waiting to acquire some lock in the application. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.QueueLengthsec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.QueueLengthsec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.rateofrecognizedthreadssec">
      <summary>This counter displays the number of threads per second that have been recognized by the CLR; these threads have a corresponding .NET thread object associated with them. These threads are not created by the CLR; they are created outside the CLR but have since run inside the CLR at least once. Only unique threads are tracked; threads with same thread ID re-entering the CLR or recreated after thread exit are not counted twice. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.rateofrecognizedthreadssec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.rateofrecognizedthreadssec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.TotalNbofContentions">
      <summary>This counter displays the total number of times threads in the CLR have attempted to acquire a managed lock unsuccessfully. Managed locks can be acquired in many ways; by the "lock" statement in C# or by calling System.Monitor.Enter or by using MethodImplOptions.Synchronized custom attribute. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.TotalNbofContentions.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.TotalNbofContentions.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory">
      <summary>Counters for CLR Garbage Collected heap. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.AllocatedBytessec">
      <summary>This counter displays the rate of bytes per second allocated on the GC Heap. This counter is updated at the end of every GC; not at each allocation. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.AllocatedBytessec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.AllocatedBytessec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.FinalizationSurvivors">
      <summary>This counter displays the number of garbage collected objects that survive a collection because they are waiting to be finalized. If these objects hold references to other objects then those objects also survive but are not counted by this counter; the "Promoted Finalization-Memory from Gen 0" and "Promoted Finalization-Memory from Gen 1" counters represent all the memory that survived due to finalization. This counter is not a cumulative counter; its updated at the end of every GC with count of the survivors during that particular GC only. This counter was designed to indicate the extra overhead that the application might incur because of finalization. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.FinalizationSurvivors.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.FinalizationSurvivors.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen0heapsize">
      <summary>This counter displays the maximum bytes that can be allocated in generation 0 (Gen 0); its does not indicate the current number of bytes allocated in Gen 0. A Gen 0 GC is triggered when the allocations since the last GC exceed this size. The Gen 0 size is tuned by the Garbage Collector and can change during the execution of the application. At the end of a Gen 0 collection the size of the Gen 0 heap is infact 0 bytes; this counter displays the size (in bytes) of allocations that would trigger the next Gen 0 GC. This counter is updated at the end of a GC; its not updated on every allocation. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen0heapsize.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen0heapsize.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen0PromotedBytesSec">
      <summary>This counter displays the bytes per second that are promoted from generation 0 (youngest) to generation 1; objects that are promoted just because they are waiting to be finalized are not included in this counter. Memory is promoted when it survives a garbage collection. This counter was designed as an indicator of relatively long-lived objects being created per sec. This counter displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen0PromotedBytesSec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen0PromotedBytesSec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen1heapsize">
      <summary>This counter displays the current number of bytes in generation 1 (Gen 1); this counter does not display the maximum size of Gen 1. Objects are not directly allocated in this generation; they are promoted from previous Gen 0 GCs. This counter is updated at the end of a GC; its not updated on every allocation. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen1heapsize.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen1heapsize.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen1PromotedBytesSec">
      <summary>This counter displays the bytes per second that are promoted from generation 1 to generation 2 (oldest); objects that are promoted just because they are waiting to be finalized are not included in this counter. Memory is promoted when it survives a garbage collection. Nothing is promoted from generation 2 since it is the oldest. This counter was designed as an indicator of very long-lived objects being created per sec. This counter displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen1PromotedBytesSec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen1PromotedBytesSec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen2heapsize">
      <summary>This counter displays the current number of bytes in generation 2 (Gen 2). Objects are not directly allocated in this generation; they are promoted from Gen 1 during previous Gen 1 GCs. This counter is updated at the end of a GC; its not updated on every allocation. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen2heapsize.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen2heapsize.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.LargeObjectHeapsize">
      <summary>This counter displays the current size of the Large Object Heap in bytes. Objects greater than 20 KBytes are treated as large objects by the Garbage Collector and are directly allocated in a special heap; they are not promoted through the generations. This counter is updated at the end of a GC; its not updated on every allocation. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.LargeObjectHeapsize.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.LargeObjectHeapsize.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbBytesinallHeaps">
      <summary>This counter is the sum of four other counters; Gen 0 Heap Size; Gen 1 Heap Size; Gen 2 Heap Size and the Large Object Heap Size. This counter indicates the current memory allocated in bytes on the GC Heaps. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbBytesinallHeaps.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbBytesinallHeaps.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGcHandles">
      <summary>This counter displays the current number of GC Handles in use. GCHandles are handles to resources external to the CLR and the managed environment. Handles occupy small amounts of memory in the GCHeap but potentially expensive unmanaged resources. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGcHandles.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGcHandles.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen0Collections">
      <summary>This counter displays the number of times the generation 0 objects (youngest; most recently allocated) are garbage collected (Gen 0 GC) since the start of the application. Gen 0 GC occurs when the available memory in generation 0 is not sufficient to satisfy an allocation request. This counter is incremented at the end of a Gen 0 GC. Higher generation GCs include all lower generation GCs. This counter is explicitly incremented when a higher generation (Gen 1 or Gen 2) GC occurs. _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen0Collections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen0Collections.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen1Collections">
      <summary>This counter displays the number of times the generation 1 objects are garbage collected since the start of the application. The counter is incremented at the end of a Gen 1 GC. Higher generation GCs include all lower generation GCs. This counter is explicitly incremented when a higher generation (Gen 2) GC occurs. _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen1Collections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen1Collections.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen2Collections">
      <summary>This counter displays the number of times the generation 2 objects (older) are garbage collected since the start of the application. The counter is incremented at the end of a Gen 2 GC (also called full GC). _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen2Collections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen2Collections.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbInducedGc">
      <summary>This counter displays the peak number of times a garbage collection was performed because of an explicit call to GC.Collect. Its a good practice to let the GC tune the frequency of its collections. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbInducedGc.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbInducedGc.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbofPinnedObjects">
      <summary>This counter displays the number of pinned objects encountered in the last GC. This counter tracks the pinned objects only in the heaps that were garbage collected e.g. a Gen 0 GC would cause enumeration of pinned objects in the generation 0 heap only. A pinned object is one that the Garbage Collector cannot move in memory. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbofPinnedObjects.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbofPinnedObjects.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbofSinkBlocksinuse">
      <summary>This counter displays the current number of sync blocks in use. Sync blocks are per-object data structures allocated for storing synchronization information. Sync blocks hold weak references to managed objects and need to be scanned by the Garbage Collector. Sync blocks are not limited to storing synchronization information and can also store COM interop metadata. This counter was designed to indicate performance problems with heavy use of synchronization primitives. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbofSinkBlocksinuse.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbofSinkBlocksinuse.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbTotalcommittedBytes">
      <summary>This counter displays the amount of virtual memory (in bytes) currently committed by the Garbage Collector. (Committed memory is the physical memory for which space has been reserved on the disk paging file). This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbTotalcommittedBytes.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbTotalcommittedBytes.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbTotalreservedBytes">
      <summary>This counter displays the amount of virtual memory (in bytes) currently reserved by the Garbage Collector. (Reserved memory is the virtual memory space reserved for the application but no disk or main memory pages have been used.) This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbTotalreservedBytes.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbTotalreservedBytes.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NotDisplayed">
      <summary>Not Displayed. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NotDisplayed.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NotDisplayed.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedFinalizationMemoryfromGen0">
      <summary>This counter displays the bytes of memory that are promoted from generation 0 to generation 1 just because they are waiting to be finalized. This counter displays the value observed at the end of the last GC; its not a cumulative counter. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedFinalizationMemoryfromGen0.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedFinalizationMemoryfromGen0.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedFinalizationMemoryfromGen1">
      <summary>This counter displays the bytes of memory that are promoted from generation 1 to generation 2 just because they are waiting to be finalized. This counter displays the value observed at the end of the last GC; its not a cumulative counter. This counter is reset to 0 if the last GC was a Gen 0 GC only. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedFinalizationMemoryfromGen1.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedFinalizationMemoryfromGen1.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedMemoryfromGen0">
      <summary>This counter displays the bytes of memory that survive garbage collection (GC) and are promoted from generation 0 to generation 1; objects that are promoted just because they are waiting to be finalized are not included in this counter. This counter displays the value observed at the end of the last GC; its not a cumulative counter. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedMemoryfromGen0.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedMemoryfromGen0.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedMemoryfromGen1">
      <summary>This counter displays the bytes of memory that survive garbage collection (GC) and are promoted from generation 1 to generation 2; objects that are promoted just because they are waiting to be finalized are not included in this counter. This counter displays the value observed at the end of the last GC; its not a cumulative counter. This counter is reset to 0 if the last GC was a Gen 0 GC only. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedMemoryfromGen1.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedMemoryfromGen1.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.TimeinGc">
      <summary>% Time in GC is the percentage of elapsed time that was spent in performing a garbage collection (GC) since the last GC cycle. This counter is usually an indicator of the work done by the Garbage Collector on behalf of the application to collect and compact memory. This counter is updated only at the end of every GC and the counter value reflects the last observed value; its not an average. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.TimeinGc.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.TimeinGc.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrNetworking">
      <summary>Help not available. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.BytesReceived">
      <summary>The cumulative total number of bytes received over all open socket connections since the process was started. This number includes data and any protocol information that is not defined by the TCP/IP protocol. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.BytesReceived.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.BytesReceived.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.BytesSent">
      <summary>The cumulative total number of bytes sent over all open socket connections since the process was started. This number includes data and any protocol information that is not defined by the TCP/IP protocol. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.BytesSent.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.BytesSent.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.ConnectionsEstablished">
      <summary>The cumulative total number of socket connections established for this process since the process was started. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.ConnectionsEstablished.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.ConnectionsEstablished.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.DatagramsReceived">
      <summary>The cumulative total number of datagram packets received since the process was started. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.DatagramsReceived.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.DatagramsReceived.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.DatagramsSent">
      <summary>The cumulative total number of datagram packets sent since the process was started. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.DatagramsSent.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.DatagramsSent.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting">
      <summary>Stats for CLR Remoting. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.Channels">
      <summary>This counter displays the total number of remoting channels registered across all AppDomains since the start of the application. Channels are used to transport messages to and from remote objects. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.Channels.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.Channels.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextBoundClassesLoaded">
      <summary>This counter displays the current number of context-bound classes loaded. Classes that can be bound to a context are called context-bound classes; context-bound classes are marked with Context Attributes which provide usage rules for synchronization; thread affinity; transactions etc. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextBoundClassesLoaded.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextBoundClassesLoaded.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextBoundObjectsAllocsec">
      <summary>This counter displays the number of context-bound objects allocated per second. Instances of classes that can be bound to a context are called context-bound objects; context-bound classes are marked with Context Attributes which provide usage rules for synchronization; thread affinity; transactions etc. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextBoundObjectsAllocsec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextBoundObjectsAllocsec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextProxies">
      <summary>This counter displays the total number of remoting proxy objects created in this process since the start of the process. Proxy object acts as a representative of the remote objects and ensures that all calls made on the proxy are forwarded to the correct remote object instance. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextProxies.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextProxies.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.Contexts">
      <summary>This counter displays the current number of remoting contexts in the application. A context is a boundary containing a collection of objects with the same usage rules like synchronization; thread affinity; transactions etc. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.Contexts.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.Contexts.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.RemoteCallssec">
      <summary>This counter displays the number of remote procedure calls invoked per second. A remote procedure call is a call on any object outside the caller;s AppDomain. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.RemoteCallssec.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.RemoteCallssec.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.TotalRemoteCalls">
      <summary>This counter displays the total number of remote procedure calls invoked since the start of this application. A remote procedure call is a call on any object outside the caller;s AppDomain. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.TotalRemoteCalls.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.TotalRemoteCalls.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity">
      <summary>Stats for CLR Security. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.NbLinkTimeChecks">
      <summary>This counter displays the total number of linktime Code Access Security (CAS) checks since the start of the application. Linktime CAS checks are performed when a caller makes a call to a callee demanding a particular permission at JIT compile time; linktime check is performed once per caller. This count is not indicative of serious performance issues; its indicative of the security system activity. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.NbLinkTimeChecks.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.NbLinkTimeChecks.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.NotDisplayed">
      <summary>Not Displayed. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.NotDisplayed.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.NotDisplayed.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.StackWalkDepth">
      <summary>This counter displays the depth of the stack during that last runtime Code Access Security check. Runtime Code Access Security check is performed by crawling the stack. This counter is not an average; it just displays the last observed value. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.StackWalkDepth.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.StackWalkDepth.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TimeinRtchecks">
      <summary>This counter displays the percentage of elapsed time spent in performing runtime Code Access Security (CAS) checks since the last such check. CAS allows code to be trusted to varying degrees and enforces these varying levels of trust depending on code identity. This counter is updated at the end of a runtime security check; it represents the last observed value; its not an average. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TimeinRtchecks.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TimeinRtchecks.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TimeSigAuthenticating">
      <summary>Reserved for future use. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TimeSigAuthenticating.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TimeSigAuthenticating.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TotalRuntimeChecks">
      <summary>This counter displays the total number of runtime Code Access Security (CAS) checks performed since the start of the application. Runtime CAS checks are performed when a caller makes a call to a callee demanding a particular permission; the runtime check is made on every call by the caller; the check is done by examining the current thread stack of the caller. This counter used together with "Stack Walk Depth" is indicative of performance penalty for security checks. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TotalRuntimeChecks.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the current instance.</returns>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TotalRuntimeChecks.NextValue(System.String)">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <param name="instanceName">Name of the counter instance to query.</param>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> for the named instance.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle">
      <summary>Counters for System.Data.OracleClient This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.HardConnectsPerSecond">
      <summary>The number of actual connections per second that are being made to servers This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.HardConnectsPerSecond.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.HardDisconnectsPerSecond">
      <summary>The number of actual disconnects per second that are being made to servers This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.HardDisconnectsPerSecond.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfActiveConnectionPoolGroups">
      <summary>The number of unique connection strings This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfActiveConnectionPoolGroups.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfActiveConnectionPools">
      <summary>The number of connection pools This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfActiveConnectionPools.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfActiveConnections">
      <summary>The number of connections currently in-use This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfActiveConnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfFreeConnections">
      <summary>The number of connections currently available for use This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfFreeConnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfInactiveConnectionPoolGroups">
      <summary>The number of unique connection strings waiting for pruning This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfInactiveConnectionPoolGroups.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfInactiveConnectionPools">
      <summary>The number of connection pools This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfInactiveConnectionPools.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfNonPooledConnections">
      <summary>The number of connections that are not using connection pooling This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfNonPooledConnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfPooledConnections">
      <summary>The number of connections that are managed by the connection pooler This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfPooledConnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfReclaimedConnections">
      <summary>The number of connections we reclaim from GCed from external connections This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfReclaimedConnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfStasisConnections">
      <summary>The number of connections currently waiting to be made ready for use This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfStasisConnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.SoftConnectsPerSecond">
      <summary>The number of connections we get from the pool per second This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.SoftConnectsPerSecond.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.SoftDisconnectsPerSecond">
      <summary>The number of connections we return to the pool per second This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.SoftDisconnectsPerSecond.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer">
      <summary>Counters for System.Data.SqlClient This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.HardConnectsPerSecond">
      <summary>The number of actual connections per second that are being made to servers This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.HardConnectsPerSecond.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.HardDisconnectsPerSecond">
      <summary>The number of actual disconnects per second that are being made to servers This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.HardDisconnectsPerSecond.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfActiveConnectionPoolGroups">
      <summary>The number of unique connection strings This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfActiveConnectionPoolGroups.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfActiveConnectionPools">
      <summary>The number of connection pools This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfActiveConnectionPools.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfActiveConnections">
      <summary>The number of connections currently in-use This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfActiveConnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfFreeConnections">
      <summary>The number of connections currently available for use This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfFreeConnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfInactiveConnectionPoolGroups">
      <summary>The number of unique connection strings waiting for pruning This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfInactiveConnectionPoolGroups.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfInactiveConnectionPools">
      <summary>The number of connection pools This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfInactiveConnectionPools.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfNonPooledConnections">
      <summary>The number of connections that are not using connection pooling This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfNonPooledConnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfPooledConnections">
      <summary>The number of connections that are managed by the connection pooler This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfPooledConnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfReclaimedConnections">
      <summary>The number of connections we reclaim from GCed from external connections This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfReclaimedConnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfStasisConnections">
      <summary>The number of connections currently waiting to be made ready for use This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfStasisConnections.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.SoftConnectsPerSecond">
      <summary>The number of connections we get from the pool per second This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.SoftConnectsPerSecond.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.SoftDisconnectsPerSecond">
      <summary>The number of connections we return to the pool per second This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.SoftDisconnectsPerSecond.NextValue">
      <summary>Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter" />.</summary>
      <returns>Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.PostItAttribute">
      <summary>Tags fixture class, test method or method property with a 'postit' from an author regarding that class, method or property.</summary>
    </member>
    <member name="P:MbUnit.Framework.PostItAttribute.Author">
      <summary>Gets the author of the message as an <see cref="T:MbUnit.Framework.AuthorAttribute" />.</summary>
      <value>The author of the message.</value>
    </member>
    <member name="P:MbUnit.Framework.PostItAttribute.AuthorType">
      <summary>Gets the type of the class representing the author.</summary>
      <value>The class representing the author.</value>
    </member>
    <member name="P:MbUnit.Framework.PostItAttribute.Message">
      <summary>Gets the message to be attached.</summary>
      <value>The message.</value>
    </member>
    <member name="M:MbUnit.Framework.ProcessTestFixtureAttribute.GetRun">
      <summary>Gets the test runner class defining all the tests to be run and the test logic to be used within the tagged fixture class.</summary>
      <returns>A <see cref="T:MbUnit.Core.Runs.SequenceRun" /> object</returns>
    </member>
    <member name="T:MbUnit.Framework.ProviderAttribute">
      <summary>Tags method that provide new objects to be used by tests within a <see cref="T:MbUnit.Framework.TypeFixtureAttribute" /> tagged fixture class. The type-specific fixture assumes that all tests contained in the fixture that have an argument of the same type specified in the <see cref="T:MbUnit.Framework.TypeFixtureAttribute" nolink="true" /> will be provided by the methods tagged by <see cref="T:MbUnit.Framework.ProviderAttribute" /> or by a class specified by the <see cref="T:MbUnit.Framework.ProviderFactoryAttribute" /> tagging the same fixture class as the <see cref="T:MbUnit.Framework.TypeFixtureAttribute" nolink="true" />.</summary>
    </member>
    <member name="P:MbUnit.Framework.ProviderAttribute.ProviderType">
      <summary>Gets or sets the type returned by the provider.</summary>
      <value>The type returned by the provider.</value>
      <exception cref="T:System.ArgumentNullException">Thrown if value is null</exception>
    </member>
    <member name="T:MbUnit.Framework.ProviderFactoryAttribute">
      <summary>Tags a class also tagged by a <see cref="T:MbUnit.Framework.TypeFixtureAttribute" /> to indicate a class that contains properties returning objects of the type required by the <see cref="T:MbUnit.Framework.TypeFixtureAttribute" nolink="true" />.</summary>
    </member>
    <member name="P:MbUnit.Framework.ProviderFactoryAttribute.FactoredType">
      <summary>Gets or sets the <see cref="T:System.Type" /> of objects generated by the provider factory</summary>
      <value>The <see cref="T:System.Type" /> of objects generated by the provider factory.</value>
      <exception cref="T:System.ArgumentNullException">Thrown if set to null</exception>
    </member>
    <member name="P:MbUnit.Framework.ProviderFactoryAttribute.FactoryType">
      <summary>Gets or sets the provider factory <see cref="T:System.Type" />.</summary>
      <value>The <see cref="T:System.Type" /> of the provider factory.</value>
      <exception cref="T:System.ArgumentNullException">Thrown if set to null</exception>
    </member>
    <member name="M:MbUnit.Framework.ProviderFactoryAttribute.GetRun(System.Type)">
      <summary>Gets the execution logic for the provider factory.</summary>
      <param name="decoratedType">The <see cref="T:System.Type" /> of the class tagged with the attribute.</param>
      <returns>A <see cref="T:MbUnit.Core.Runs.ProviderFactoryRun" /> object</returns>
    </member>
    <member name="T:MbUnit.Framework.ProviderFixtureDecoratorPatternAttribute">
      <summary>This is the base class for attributes that can decorate fixtures identifying them as using provider classes. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="T:MbUnit.Framework.ReadAttribute">
      <summary>Tag use to mark a method that reads data from a device.</summary>
    </member>
    <member name="T:MbUnit.Framework.ReflectionAssert">
      <summary>Class containing generic assert methods for the verification of <see cref="T:System.Type" /> information by reflection. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasConstructor(System.Type,System.Type[])">
      <summary>Asserts that <paramref name="type" /> has a public instance constructor with a signature defined by <paramref name="parameters" />.</summary>
      <param name="type">The type to test</param>
      <param name="parameters">The list of parameters for the constructor</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasConstructor(System.Type,System.Reflection.BindingFlags,System.Type[])">
      <summary>Asserts that the <paramref name="type" /> has a constructor, with the specified binding <paramref name="flags" />, with a signature defined by <paramref name="parameters" />.</summary>
      <param name="type">The type to test.</param>
      <param name="flags">The <see cref="T:System.Reflection.BindingFlags" /> the type should have.</param>
      <param name="parameters">The list of parameters for the constructor.</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasDefaultConstructor(System.Type)">
      <summary>Asserts that <paramref name="type" /> has a default public constructor</summary>
      <param name="type">The <see cref="T:System.Type" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasField(System.Type,System.String)">
      <summary>Asserts that the <paramref name="type" /> has a public field with the given <paramref name="name" />.</summary>
      <param name="type">The type to test.</param>
      <param name="name">The name of the field to find.</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasField(System.Type,System.Reflection.BindingFlags,System.String)">
      <summary>Asserts that the <paramref name="type" /> has a field with the given <paramref name="flags" /> and <paramref name="name" />.</summary>
      <param name="type">The type to test.</param>
      <param name="name">The name of the field to find.</param>
      <param name="flags">The <see cref="T:System.Reflection.BindingFlags" /> for the field.</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasMethod(System.Type,System.String,System.Type[])">
      <summary>Asserts that the <paramref name="type" /> has a public instance method with the given <paramref name="name" /> and signature defined by <paramref name="parameters" />.</summary>
      <param name="type">The type to test.</param>
      <param name="name">The name of the method to look for.</param>
      <param name="parameters">The parameters for the method.</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasMethod(System.Type,System.Reflection.BindingFlags,System.String,System.Type[])">
      <summary>Asserts that the <paramref name="type" /> has a method with the given <paramref name="name" />, <paramref name="flags" /> and signature defined by <paramref name="parameters" />.</summary>
      <param name="type">The type to test.</param>
      <param name="flags">The <see cref="T:System.Reflection.BindingFlags" /> the method should have.</param>
      <param name="name">The name of the method.</param>
      <param name="parameters">The parameters for the method.</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.IsAssignableFrom(System.Type,System.Type)">
      <summary>Asserts whether an instance of the <paramref name="parent" /> can be assigned from an instance of <paramref name="child" />.</summary>
      <param name="parent">Parent <see cref="T:System.Type" /> instance.</param>
      <param name="child">Child <see cref="T:System.Type" /> instance.</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.IsInstanceOf(System.Type,System.Object)">
      <summary>Asserts whether <paramref name="child" /> is an instance of the <paramref name="type" />.</summary>
      <param name="type">The <see cref="T:System.Type" /> that <paramref name="child" /> should be an instance of.</param>
      <param name="child">The <see cref="T:System.Object" /> to test</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.IsSealed(System.Type)">
      <summary>Verifies whether the specified <see cref="T:System.Type" /><paramref name="t" /> is sealed.</summary>
      <param name="t">The type to test</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.NotCreatable(System.Type)">
      <summary>Verifies whether the specified <see cref="T:System.Type" /><paramref name="t" /> has only private constructors and is thus not creatable</summary>
      <param name="t">The type to test</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.ReadOnlyProperty(System.Type,System.String)">
      <summary>Verifies that <see cref="T:System.Type" /><paramref name="t" /> has a read-only property called <paramref name="propertyName" /></summary>
      <param name="t">The type to test.</param>
      <param name="propertyName">Name of the read-only property to find</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.ReadOnlyProperty(System.Reflection.PropertyInfo)">
      <summary>Verifies the property described by <paramref name="pi" /> is read-only</summary>
      <param name="pi">A <see cref="T:System.Reflection.PropertyInfo" /> object describing a property</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.WriteOnlyProperty(System.Type,System.String)">
      <summary>Verifies that <see cref="T:System.Type" /><paramref name="t" /> has a write-only property called <paramref name="propertyName" /></summary>
      <param name="t">The type to test.</param>
      <param name="propertyName">Name of the write-only property to find</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.WriteOnlyProperty(System.Reflection.PropertyInfo)">
      <summary>Verifies the property described by <paramref name="pi" /> is write-only</summary>
      <param name="pi">A <see cref="T:System.Reflection.PropertyInfo" /> object describing a property</param>
    </member>
    <member name="T:MbUnit.Framework.RepeatAttribute">
      <summary>This attribute decorates a test method or fixture and causes it to be invoked repeatedly within the same thread. This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.RepeatAttribute.GetInvoker(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Returns the invoker class to run the test the given number of times.</summary>
      <param name="wrapper">The invoker currently set to run the test.</param>
      <returns>A new <see cref="T:MbUnit.Core.Invokers.RepeatRunInvoker" /> object wrapping <paramref name="wrapper" /></returns>
    </member>
    <member name="T:MbUnit.Framework.RepeatTestAttribute">
      <summary>This attribute decorates a test method and causes it to be invoked repeatedly within the same thread. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.RepeatTestAttribute.Count">
      <summary>Gets the number of times the test will be repeated.</summary>
      <value>The the number of times the test will be repeated.</value>
    </member>
    <member name="M:MbUnit.Framework.ResourceXmlDataProviderAttribute.LoadResource">
      <summary>Loads the resource.</summary>
      <returns>A <see cref="T:System.IO.StreamReader" /> for the XML file</returns>
    </member>
    <member name="T:MbUnit.Framework.RestoreDatabaseAttribute">
      <summary>Tags a method to indicate that a database must be restored according to a schedule around the execution of the test This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.RestoreDatabaseAttribute.Schedule">
      <summary>Gets the <see cref="T:MbUnit.Framework.TestSchedule" /> value defining when the restore occurs with respect to the test execution</summary>
      <value>The <see cref="T:MbUnit.Framework.TestSchedule" /> value defining when the restore occurs with respect to the test execution</value>
    </member>
    <member name="M:MbUnit.Framework.RestoreDatabaseAttribute.GetInvoker(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Returns the invoker class to run the test with the scheduled database restore.</summary>
      <param name="invoker">The invoker currently set to run the test.</param>
      <returns>A new <see cref="T:MbUnit.Framework.RestoreDatabaseAttribute.RollBackRunInvoker" /> object wrapping <paramref name="invoker" /></returns>
    </member>
    <member name="T:MbUnit.Framework.RestoreDatabaseFirstAttribute">
      <summary>Tags a test method to indicate that a database must be restored before the execution of the test</summary>
    </member>
    <member name="T:MbUnit.Framework.RollBackAttribute">
      <summary>Tags a test method whose database operation must be executed within a transaction and rolled back when it has finished executing This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.RollBackAttribute.GetInvoker(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Returns the invoker class to run the test within a transaction and roll it back once complete.</summary>
      <param name="invoker">The invoker currently set to run the test.</param>
      <returns>A new <see cref="T:MbUnit.Framework.RollBackAttribute.RollBackRunInvoker" /> object wrapping <paramref name="invoker" /></returns>
    </member>
    <member name="T:MbUnit.Framework.RowAttribute">
      <summary>Provides a row of values using in conjunction with <see cref="T:MbUnit.Framework.RowTestAttribute" /> to bind values to the parameters of a row test method. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.RowAttribute.ExpectedException">
      <summary>Gets or sets the type of exception that is expected to be thrown when this row is tested, or null if none.</summary>
    </member>
    <member name="M:MbUnit.Framework.RowAttribute.GetRow">
      <summary>Gets the row of values.</summary>
      <returns>The row of values</returns>
    </member>
    <member name="M:MbUnit.Framework.RowAttribute.GetRow(System.Reflection.ParameterInfo[])">
      <summary>Gets the row of values. Each one will be converted (if posible) to the type of the corresponding argument in the test method.</summary>
      <param name="parameters">List of parameters.</param>
      <returns>The row of values.</returns>
    </member>
    <member name="T:MbUnit.Framework.RowTestAttribute">
      <summary>Declares a row test when applied to a test method along with one or more <see cref="T:MbUnit.Framework.RowAttribute" /> attributes. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.SecurityAssert">
      <summary>Class containing generic assert methods for the verification of Roles and Identity information. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.IsAuthenticated(System.Security.Principal.IIdentity)">
      <summary>Asserts that <paramref name="identity" /> is authenticated.</summary>
      <param name="identity">The <see cref="T:System.Security.Principal.IIdentity" /> being tested.</param>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.IsNotAuthenticated(System.Security.Principal.IIdentity)">
      <summary>Asserts that <paramref name="identity" /> is not authenticated.</summary>
      <param name="identity">The <see cref="T:System.Security.Principal.IIdentity" /> being tested.</param>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowIsAuthenticated">
      <summary>Asserts that the current windows identity is authenticated.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowIsNotAuthenticated">
      <summary>Asserts that the current windows identity is not authenticated.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInAdministrator">
      <summary>Asserts that the current windows identity is in the <see cref="F:System.Security.Principal.WindowsBuiltInRole.Administrator" /> role.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInGuest">
      <summary>Asserts that the current windows identity is in the <see cref="F:System.Security.Principal.WindowsBuiltInRole.Guest" /> role.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInPowerUser">
      <summary>Asserts that the current windows identity is in the <see cref="F:System.Security.Principal.WindowsBuiltInRole.PowerUser" /> role.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInRole(System.Security.Principal.WindowsBuiltInRole)">
      <summary>Asserts that the current windows identity is in <param name="role" />.</summary>
      <param name="role">The <see cref="T:System.Security.Principal.WindowsBuiltInRole">role</see> to which the current windows identity should belong.</param>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInUser">
      <summary>Asserts that the current windows identity is in the <see cref="F:System.Security.Principal.WindowsBuiltInRole.User" /> role.</summary>
    </member>
    <member name="T:MbUnit.Framework.SeedAttribute">
      <summary>Tags a method as producing a seed value for a production grammar test fixture This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.SerialAssert">
      <summary>Class containing generic assert methods on the serialization capability of a type or object This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.SerialAssert.IsXmlSerializable(System.Type)">
      <summary>Verifies that the type <paramref name="t" /> is serializable with the XmlSerializer object.</summary>
      <param name="t">The type to test.</param>
    </member>
    <member name="M:MbUnit.Framework.SerialAssert.OneWaySerialization(System.Object)">
      <summary>Verifies that an <see cref="T:System.Object" /><paramref name="o" /> is not null and then serialized into a valid XML document</summary>
      <param name="o">The <see cref="T:System.Object" /> to serialize</param>
      <returns>The serialized object as a XML string</returns>
    </member>
    <member name="M:MbUnit.Framework.SerialAssert.TwoWaySerialization(System.Object)">
      <summary>Verifies that an <see cref="T:System.Object" /><paramref name="o" /> can be serialized and deserialized to/from XML and that the results are the same once both are done.</summary>
      <param name="o">The <see cref="T:System.Object" /> to test</param>
    </member>
    <member name="T:MbUnit.Framework.SetUpAttribute">
      <summary>The setup attribute is applied to a method that is to be invoked before each test in a fixture executes. The method will run once for each test.</summary>
    </member>
    <member name="T:MbUnit.Framework.SqlRestoreInfoAttribute">
      <summary>Tags a class with the information needed to restore a SQL Server database from a backup. Test method within the tagged class must themselves be tagged with an attribute derived from <see cref="T:MbUnit.Framework.RestoreDatabaseAttribute" /> to make use of this information. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.StringAssert">
      <summary>Class containing generic assert methods for <see cref="T:System.String" />s This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.AreEqualIgnoreCase(System.String,System.String)">
      <summary>Asserts that two strings <paramref name="s1" /> and <paramref name="s2" /> are equal, ignoring the case</summary>
      <param name="s1">Expected string</param>
      <param name="s2">Actual string</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.Contains(System.String,System.String)">
      <summary>Asserts the string <paramref name="s" /> contains the string <paramref name="contain" /></summary>
      <param name="s">The string to check</param>
      <param name="contain">The string that might be found within <paramref name="s" /></param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.DoesNotContain(System.String,System.Char[])">
      <summary>Asserts the string <paramref name="s" /> contains none of the <see cref="T:System.Char" />s in <paramref name="anyOf" /></summary>
      <param name="s">String to test.</param>
      <param name="anyOf">Array of characters to search for.</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.EndsWith(System.String,System.String)">
      <summary>Asserts the string <paramref name="s" /> ends with the string <paramref name="pattern" /></summary>
      <param name="s">The string to check</param>
      <param name="pattern">The string that might be found at the end of <paramref name="s" /></param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.FullMatch(System.String,System.String)">
      <summary>Asserts the regular expression <paramref name="reg" /> makes a full match on <paramref name="s" /></summary>
      <param name="s">String to test.</param>
      <param name="reg">Regular expression as a string</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.FullMatch(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Asserts the regular expression <paramref name="regex" /> makes a full match on <paramref name="s" /></summary>
      <param name="s">String to test.</param>
      <param name="regex">Regular expression as a <see cref="T:System.Text.RegularExpressions.Regex" /> object</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.IsEmpty(System.String)">
      <summary>Asserts that the string <paramref name="s" /> is non null and empty</summary>
      <param name="s">String to test.</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.IsNonEmpty(System.String)">
      <summary>Asserts that the string <paramref name="s" /> is non null and non empty</summary>
      <param name="s">String to test.</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.Like(System.String,System.String)">
      <summary>Asserts the regular expression <paramref name="reg" /> makes a match on <paramref name="s" /></summary>
      <param name="s">String to test.</param>
      <param name="reg">Regular expression as a string</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.Like(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Asserts the regular expression <paramref name="regex" /> makes a match on <paramref name="s" /></summary>
      <param name="s">String to test.</param>
      <param name="regex">Regular expression as a <see cref="T:System.Text.RegularExpressions.Regex" /> object</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.NotLike(System.String,System.String)">
      <summary>Asserts the regular expression <paramref name="reg" /> makes no match on <paramref name="s" /></summary>
      <param name="s">String to test.</param>
      <param name="reg">Regular expression as a string</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.NotLike(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Asserts the regular expression <paramref name="regex" /> makes no match on <paramref name="s" /></summary>
      <param name="s">String to test.</param>
      <param name="regex">Regular expression as a <see cref="T:System.Text.RegularExpressions.Regex" /> object</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.StartsWith(System.String,System.String)">
      <summary>Asserts the string <paramref name="s" /> starts with the string <paramref name="pattern" /></summary>
      <param name="s">The string to check</param>
      <param name="pattern">The string that might be found at the start of <paramref name="s" /></param>
    </member>
    <member name="T:MbUnit.Framework.SuiteProviderAttribute">
      <summary>Used to tag a test method within a test suite to specify the information contained in an XML file that should be used as parameters for that test. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.SuiteProviderAttribute.DataType">
      <summary>Gets or sets the class <see cref="T:System.Type" /> the xml data will be deserialized into for use in your tests</summary>
      <value>The class <see cref="T:System.Type" /> for your tests.</value>
    </member>
    <member name="P:MbUnit.Framework.SuiteProviderAttribute.IsDeserialized">
      <summary>Gets a value indicating whether this instance is deserialized.</summary>
      <value>
        <c>true</c> if this instance is deserialized; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MbUnit.Framework.SuiteProviderAttribute.XPath">
      <summary>Gets or sets the XPath to the data for the test.</summary>
      <value>The XPath string.</value>
      <exception cref="T:System.ArgumentNullException">Thrown if the value is null</exception>
    </member>
    <member name="M:MbUnit.Framework.SuiteProviderAttribute.Deserialize(System.Xml.XmlNode)">
      <summary>Deserializes the specified XML node for use in a test.</summary>
      <param name="node">The node to deserialize.</param>
      <returns>An object of the type specified by <see cref="P:MbUnit.Framework.SuiteProviderAttribute.DataType" /></returns>
    </member>
    <member name="T:MbUnit.Framework.TearDownAttribute">
      <summary>The tear down attribute is applied to a method that is to be invoked after each test in a fixture executes. The method will run once for each test.</summary>
    </member>
    <member name="T:MbUnit.Framework.TestAttribute">
      <summary>
        <para> The test attribute is applied to a method that represents a single test case within a fixture. By default, if the method throws an unexpected exception, the test will be deemed to have failed. Otherwise, the test will pass. </para>
        <para> The default behavior may be modified by test decorator attributes that may alter the execution environment of the test, catch and reinterpret any exceptions it throws, or impose additional constraints upon its execution. </para>
        <para> Output from the test, such as text written to the console, is captured by the framework and will be included in the test report. </para>This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.TestCase">
      <summary>A single test case of a <see cref="T:MbUnit.Framework.TestSuite" />.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestCase.Description">
      <summary>Gets or sets the description of the test case.</summary>
      <value>The description of the test case.</value>
    </member>
    <member name="P:MbUnit.Framework.TestCase.Name">
      <summary>Gets the name of the test case</summary>
      <value>The name of the test case</value>
    </member>
    <member name="P:MbUnit.Framework.TestCase.TestDelegate">
      <summary>Gets the test delegate.</summary>
      <value>The test delegate.</value>
    </member>
    <member name="M:MbUnit.Framework.TestCase.GetParameters">
      <summary>Gets the parameters (signature) for the test.</summary>
      <returns>An <see cref="T:System.Object" /> array</returns>
    </member>
    <member name="M:MbUnit.Framework.TestCase.Invoke(System.Object,System.Collections.IList)">
      <summary>Invokes test using the parameters returned by <see cref="M:MbUnit.Framework.TestCase.GetParameters" />.</summary>
      <returns>Return value of the invoked test method. If the method returns void, null is returned.</returns>
    </member>
    <member name="T:MbUnit.Framework.TestCaseDecoratorBase">
      <summary>Base class for test case decorators This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestCaseDecoratorBase.Description">
      <summary>Gets the description of the test case.</summary>
      <value>The description.</value>
    </member>
    <member name="P:MbUnit.Framework.TestCaseDecoratorBase.Name">
      <summary>Gets the name of the test case.</summary>
      <value>The name.</value>
    </member>
    <member name="P:MbUnit.Framework.TestCaseDecoratorBase.TestCase">
      <summary>Gets the test case.</summary>
      <value>The test case.</value>
    </member>
    <member name="M:MbUnit.Framework.TestCaseDecoratorBase.Invoke(System.Object,System.Collections.IList)">
      <summary>Invokes the specified testcase <paramref name="o" /> with the given <see cref="T:System.Collections.IList" /> of <paramref name="args">arguments</paramref>.</summary>
      <param name="o">The test case to invoke.</param>
      <param name="args">The arguments to pass to the test case.</param>
    </member>
    <member name="T:MbUnit.Framework.TestCases">
      <summary>Factory class that wraps test delegates inside instances <see cref="T:MbUnit.Framework.ITestCase" /> for inclusion in test suites. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestCases.Case(System.String,System.Delegate,System.Object[])">
      <summary>Wraps the <paramref name="test" /> method in a <see cref="T:MbUnit.Framework.TestCase" /> class</summary>
      <param name="name">The name of the test case</param>
      <param name="test">A <see cref="T:System.Delegate" /> representing the test to include in the suite</param>
      <param name="parameters">The parameters for the test method</param>
      <returns>A <see cref="T:MbUnit.Framework.TestCase" /> object</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if either<paramref name="name" /> or <paramref name="test" /> is null</exception>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is an empty string</exception>
    </member>
    <member name="M:MbUnit.Framework.TestCases.Case(System.String,System.Object,System.Reflection.MethodInfo,System.Object[])">
      <summary>Wraps a <see cref="T:System.Reflection.MethodInfo">method</see> in a <see cref="T:MbUnit.Framework.MethodTestCase" /> class</summary>
      <param name="name">The name of the method.</param>
      <param name="testedInstance">The instance of the object to call the method on.</param>
      <param name="test">a <see cref="T:System.Reflection.MethodInfo" /> object identifying the test method.</param>
      <param name="parameters">The parameters to pass to the method when run</param>
      <returns>A <see cref="T:MbUnit.Framework.MethodTestCase" /> object</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if either <paramref name="name" />, <paramref name="test" /> or <paramref name="testedInstance" /> is null</exception>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is an empty string</exception>
    </member>
    <member name="M:MbUnit.Framework.TestCases.ExpectedException(MbUnit.Framework.ITestCase,System.Type)">
      <summary>Associates a <paramref name="testCase" /> with an expected exception with the given <paramref name="exceptionType" />.</summary>
      <param name="testCase">The test case.</param>
      <param name="exceptionType">
        <see cref="T:System.Type" /> of the expected exception.</param>
      <returns>An <see cref="T:MbUnit.Framework.ExpectedExceptionTestCase" /> object</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if either <paramref name="testCase" /> or <paramref name="exceptionType" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.TestCases.Verified(MbUnit.Framework.ITestCase,System.Object)">
      <summary>Associates a <paramref name="testCase" /> with an expected result.</summary>
      <param name="testCase">The test case.</param>
      <param name="expectedResult">The expected result.</param>
      <returns>A <see cref="T:MbUnit.Framework.VerifiedTestCase" /> object</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="testCase" /> is null</exception>
    </member>
    <member name="T:MbUnit.Framework.TestCategoryAttribute">
      <summary>Associates a category name with a test method. The category name can be used to classify tests and build test suites of related tests.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestCategoryAttribute.Categories">
      <summary>Gets the categories for the test.</summary>
      <value>The categories for the test.</value>
    </member>
    <member name="M:MbUnit.Framework.TestCategoryAttribute.GetCategoryTitles">
      <summary>Gets the category titles.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringCollection" /> of category titles</returns>
    </member>
    <member name="T:MbUnit.Framework.TestFixtureAttribute">
      <summary>The test fixture attribute is applied to a class that contains a suite of related test cases. If an error occurs while initializing the fixture or if at least one of the test cases within the fixture fails, then the fixture itself will be deemed to have failed. Otherwise the fixture will pass. Output from the fixture, such as text written to the console, is captured by the framework and will be included in the test report. This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestFixtureAttribute.GetRun">
      <summary>Gets the test runner class defining all the tests to be run within the tagged fixture class.</summary>
      <returns>A <see cref="T:MbUnit.Core.Runs.TestFixtureRun" /> object</returns>
    </member>
    <member name="T:MbUnit.Framework.TestFixtureExtensionAttribute">
      <summary>Contributes additional tests and setup or teardown steps to the lifecycle defined by <see cref="T:MbUnit.Framework.TestFixtureAttribute" />. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestFixtureExtensionAttribute.AddAfterTearDownRuns(MbUnit.Core.Collections.RunCollection)">
      <summary>Called to add runs to perform after teardown.</summary>
      <param name="runs">The collection to update</param>
    </member>
    <member name="M:MbUnit.Framework.TestFixtureExtensionAttribute.AddBeforeSetupRuns(MbUnit.Core.Collections.RunCollection)">
      <summary>Called to add runs to perform before setup.</summary>
      <param name="runs">The collection to update</param>
    </member>
    <member name="M:MbUnit.Framework.TestFixtureExtensionAttribute.AddTestRuns(MbUnit.Core.Collections.RunCollection)">
      <summary>Called to add runs to perform during the test execution cycle.</summary>
      <param name="runs">The collection to update</param>
    </member>
    <member name="T:MbUnit.Framework.TestFixtureSetUpAttribute">
      <summary>Tags a method to be run before any tests in the fixture class are run The method to which this attribute is applied must be declared by the fixture class and must not have any parameters. The method may be static. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.TestFixtureTearDownAttribute">
      <summary>Tags a method to be run after all the tests in the fixture class have run. The method to which this attribute is applied must be declared by the fixture class and must not have any parameters. The method may be static. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestSequenceAttribute.Order">
      <summary>Gets or sets the order execution</summary>
      <value>The order of execution</value>
    </member>
    <member name="M:MbUnit.Framework.TestSequenceAttribute.ToString">
      <summary>Returns a string that represents the instance.</summary>
      <returns>String representing the object.</returns>
    </member>
    <member name="T:MbUnit.Framework.TestsOnAttribute">
      <summary>Tags a class with the object type being tested by the methods it contains. The MbUnit GUI runner uses this information to group tests under the TestsOns tree. The default value is "Unknown"</summary>
    </member>
    <member name="P:MbUnit.Framework.TestsOnAttribute.TestedType">
      <summary>Gets the type of the tested object.</summary>
      <value>The type of the tested object.</value>
    </member>
    <member name="M:MbUnit.Framework.TestsOnAttribute.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:MbUnit.Framework.TestSuite">
      <summary>A named collection of uniquely named <see cref="T:MbUnit.Framework.TestCase" />.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.Name">
      <summary>Gets the <see cref="T:MbUnit.Framework.TestSuite" /> name.</summary>
      <value>The <see cref="T:MbUnit.Framework.TestSuite" /> name.</value>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.TestCases">
      <summary>Gets a collection of <see cref="T:MbUnit.Framework.TestCase" />.</summary>
      <value>A collection of <see cref="T:MbUnit.Framework.TestCase" />.</value>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.Add(MbUnit.Framework.ITestCase)">
      <summary>Adds the test case to the suite</summary>
      <param name="testCase">
        <see cref="T:MbUnit.Framework.TestCase" /> instance to add.</param>
      <exception cref="T:System.InvalidOperationException"> The suite already contains a test case with the same name as <paramref name="testCase" />. </exception>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.Add(System.String,System.Delegate,System.Object[])">
      <summary>Adds a new <see cref="T:MbUnit.Framework.TestCase" /> to the suite.</summary>
      <param name="name">Name of the new test case</param>
      <param name="test">
        <see cref="T:System.Delegate" /> invoked by the test case</param>
      <param name="parameters">parameters sent to <paramref name="test" /> when invoked</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is a null reference (Nothing in Visual Basic) </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty. </exception>
      <exception cref="T:System.InvalidOperationException"> The suite already contains a test case named <paramref name="name" />. </exception>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.Remove(MbUnit.Framework.TestCase)">
      <summary>Removes the test case from the suite</summary>
      <param name="testCase">Test case to remove</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="testCase" /> is a null reference (Nothing in Visual Basic) </exception>
    </member>
    <member name="T:MbUnit.Framework.TestSuiteAttribute">
      <summary>Tags a method that returns a <see cref="T:MbUnit.Framework.TestSuite" />. Use within a class tagged with a <see cref="T:MbUnit.Framework.TestSuiteFixtureAttribute" />This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.TestSuiteFixtureAttribute">
      <summary>Idnetifies a class that will dynamically generate tests and group them in <see cref="T:MbUnit.Framework.TestSuite" />s. This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestSuiteFixtureAttribute.GetRun">
      <summary>Gets the test runner class defining all the tests to be run and the test logic to be used within the tagged fixture class.</summary>
      <returns>A <see cref="T:MbUnit.Framework.TestSuiteRun" /> object</returns>
    </member>
    <member name="T:MbUnit.Framework.TestSuiteSetUpAttribute">
      <summary>Tag used to mark a method that needs to be run before TestSuite generation.</summary>
    </member>
    <member name="T:MbUnit.Framework.ThreadedRepeatAttribute">
      <summary>This attribute decorates a test method or fixture class and causes it to be invoked repeatedly on multiple concurrent threads. This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.ThreadedRepeatAttribute.GetInvoker(MbUnit.Core.Invokers.IRunInvoker)">
      <summary>Returns the invoker class to run the test the given number of times.</summary>
      <param name="wrapped">The invoker currently set to run the test across many threads.</param>
      <returns>A new <see cref="T:MbUnit.Core.Invokers.RepeatRunInvoker" /> object wrapping <paramref name="wrapped" /></returns>
    </member>
    <member name="T:MbUnit.Framework.ThreadRunner">
      <summary>Class that runs a (test) Winforms method on a new thread. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.ThreadRunner.CatchedException">
      <summary>Returns the exception that may have occurred when the deleagte was invoked.</summary>
      <value>The caught exception.</value>
    </member>
    <member name="M:MbUnit.Framework.ThreadRunner.Run">
      <summary>Runs the delegates on a new thread</summary>
    </member>
    <member name="T:MbUnit.Framework.TypeFixtureAttribute">
      <summary>Tags the class as a TypeFixture This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.TypeFixtureAttribute.GetRun">
      <summary>Gets the test runner class defining all the tests to be run and the test logic to be used within the tagged fixture class.</summary>
      <returns>A <see cref="T:MbUnit.Core.Runs.SequenceRun" /> object</returns>
    </member>
    <member name="T:MbUnit.Framework.UsingBaseAttribute">
      <summary>Base class for the [Using*] attributes that tag parameters in camobinatorial test methods This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.UsingBaseAttribute.GetDomains(TestFu.Operations.IDomainCollection,System.Reflection.ParameterInfo,System.Object)">
      <summary>Gets the set of values (the collection of domains) for the parameter.</summary>
      <param name="domains">The <see cref="T:TestFu.Operations.IDomainCollection" /> the values generated by the source of data</param>
      <param name="parameter">
        <see cref="T:System.Reflection.ParameterInfo" /> for the parameter that wants the values.</param>
      <param name="fixture">The test fixture.</param>
    </member>
    <member name="M:MbUnit.Framework.UsingBaseAttribute.InvokeMethod(System.Type,System.Reflection.MethodInfo)">
      <summary>Invokes the method.</summary>
      <param name="t">The <see cref="T:System.Type" /> containing the <paramref name="method" /> to invoke.</param>
      <param name="method">The method to invoke.</param>
      <returns>The return value of the method</returns>
    </member>
    <member name="T:MbUnit.Framework.UsingEnumAttribute">
      <summary>Tags a parameter within a [CombinatorialTest]-tagged method to indicate that it should use values from the named enumeration This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.UsingEnumAttribute.EnumType">
      <summary>Gets the <see cref="T:System.Type" /> of the enumeration containing the values for use by the parameter</summary>
      <value>The <see cref="T:System.Type" /> of the enumeration containing the values for use by the parameter</value>
    </member>
    <member name="M:MbUnit.Framework.UsingEnumAttribute.GetDomains(TestFu.Operations.IDomainCollection,System.Reflection.ParameterInfo,System.Object)">
      <summary>Gets the set of values (the collection of domains) for the parameter.</summary>
      <param name="domains">The <see cref="T:TestFu.Operations.IDomainCollection" /> the values generated by the source of data</param>
      <param name="parameter">
        <see cref="T:System.Reflection.ParameterInfo" /> for the parameter that wants the values.</param>
      <param name="fixture">The test fixture.</param>
    </member>
    <member name="T:MbUnit.Framework.UsingFactoriesAttribute">
      <summary>Tags a parameter within a [CombinatorialTest]-tagged method to indicate that it should use values from provided by the named factory method(s) This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.UsingFactoriesAttribute.FactoryType">
      <summary>Gets or sets the factory class.</summary>
      <value>The <see cref="T:System.Type" /> of the factory.</value>
    </member>
    <member name="P:MbUnit.Framework.UsingFactoriesAttribute.MemberNames">
      <summary>Returns a semicolon delimited list of factory methods to be used to provide values to the test</summary>
      <value>A list of factory method names</value>
    </member>
    <member name="M:MbUnit.Framework.UsingFactoriesAttribute.GetDomains(TestFu.Operations.IDomainCollection,System.Reflection.ParameterInfo,System.Object)">
      <summary>Gets the set of values (the collection of domains) for the parameter.</summary>
      <param name="domains">The <see cref="T:TestFu.Operations.IDomainCollection" /> the values generated by the source of data</param>
      <param name="parameter">
        <see cref="T:System.Reflection.ParameterInfo" /> for the parameter that wants the values.</param>
      <param name="fixture">The test fixture.</param>
    </member>
    <member name="T:MbUnit.Framework.UsingImplementationsAttribute">
      <summary>Tags a parameter within a [CombinatorialTest]-tagged method to indicate that it should use all instances of a (parent) type defined within the same assembly as the test for use with the parameter This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.UsingImplementationsAttribute.GetDomains(TestFu.Operations.IDomainCollection,System.Reflection.ParameterInfo,System.Object)">
      <summary>Gets the set of values (the collection of domains) for the parameter.</summary>
      <param name="domains">The <see cref="T:TestFu.Operations.IDomainCollection" /> the values generated by the source of data</param>
      <param name="parameter">
        <see cref="T:System.Reflection.ParameterInfo" /> for the parameter that wants the values.</param>
      <param name="fixture">The test fixture.</param>
    </member>
    <member name="T:MbUnit.Framework.UsingLinearAttribute">
      <summary>Tags a parameter within a [CombinatorialTest]-tagged method to indicate that it should use integer values from within a specified range This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.UsingLinearAttribute.GetDomains(TestFu.Operations.IDomainCollection,System.Reflection.ParameterInfo,System.Object)">
      <summary>Gets the set of values (the collection of domains) for the parameter.</summary>
      <param name="domains">The <see cref="T:TestFu.Operations.IDomainCollection" /> the values generated by the source of data</param>
      <param name="parameter">
        <see cref="T:System.Reflection.ParameterInfo" /> for the parameter that wants the values.</param>
      <param name="fixture">The test fixture.</param>
    </member>
    <member name="T:MbUnit.Framework.UsingLiteralsAttribute">
      <summary>Tags a parameter within a [CombinatorialTest]-tagged method to indicate that it should use string literals from the semi-colon delimited list provided This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.UsingLiteralsAttribute.Values">
      <summary>The semi-colon delimited list of strings to use for the parameter</summary>
      <value>The semi-colon delimited list of strings to use for the parameter</value>
    </member>
    <member name="M:MbUnit.Framework.UsingLiteralsAttribute.GetDomains(TestFu.Operations.IDomainCollection,System.Reflection.ParameterInfo,System.Object)">
      <summary>Gets the set of values (the collection of domains) for the parameter.</summary>
      <param name="domains">The <see cref="T:TestFu.Operations.IDomainCollection" /> the values generated by the source of data</param>
      <param name="parameter">
        <see cref="T:System.Reflection.ParameterInfo" /> for the parameter that wants the values.</param>
      <param name="fixture">The test fixture.</param>
    </member>
    <member name="T:MbUnit.Framework.VerifiedTestCase">
      <summary>Used when dynamically adding <see cref="T:MbUnit.Framework.ITestCase" />s with an expected result to a <see cref="T:MbUnit.Framework.TestSuite" /></summary>
    </member>
    <member name="P:MbUnit.Framework.VerifiedTestCase.ExpectedResult">
      <summary>Returns the expected result for the method.</summary>
      <value>The expected result.</value>
    </member>
    <member name="M:MbUnit.Framework.VerifiedTestCase.Invoke(System.Object,System.Collections.IList)">
      <summary>Invokes the specified testcase <paramref name="o" /> with the given <see cref="T:System.Collections.IList" /> of <paramref name="args">arguments</paramref>.</summary>
      <param name="o">The test case to invoke.</param>
      <param name="args">The arguments to pass to the test case.</param>
    </member>
    <member name="T:MbUnit.Framework.WebAssert">
      <summary>Class containing generic assert methods for <see cref="T:System.Web.UI.Control">web controls</see> and the <see cref="T:System.Web.UI.Page" /> object This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.AreClientTargetEqual(System.String,System.Web.UI.Page)">
      <summary>Verifies that the <see cref="P:System.Web.UI.Page.ClientTarget" /> property of <paramref name="page" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">The expected value.</param>
      <param name="page">The <see cref="T:System.Web.UI.Page" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.AreErrorPageEqual(System.String,System.Web.UI.Page)">
      <summary>Verifies that the <see cref="P:System.Web.UI.Page.ErrorPage" /> property of <paramref name="page" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">The expected value.</param>
      <param name="page">The <see cref="T:System.Web.UI.Page" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.AreTemplateSourceDirectoryEqual(System.Web.UI.Control,System.Web.UI.Control)">
      <summary>Verifies that the <see cref="P:System.Web.UI.Control.TemplateSourceDirectory" /> property of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">The <see cref="T:System.Web.UI.Control" /> to test against.</param>
      <param name="actual">The <see cref="T:System.Web.UI.Control" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.AreTemplateSourceDirectoryEqual(System.String,System.Web.UI.Control)">
      <summary>Verifies that the <see cref="P:System.Web.UI.Control.TemplateSourceDirectory" /> property of <paramref name="actual" /> is equal to <paramref name="expected" /> are equal.</summary>
      <param name="expected">The expected source directory.</param>
      <param name="actual">The <see cref="T:System.Web.UI.Control" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.HasControls(System.Web.UI.Control)">
      <summary>Verifies that <paramref name="ctrl" /> has child controls.</summary>
      <param name="ctrl">The <see cref="T:System.Web.UI.Control" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.HasNoControls(System.Web.UI.Control)">
      <summary>Verifies that <paramref name="ctrl" /> has no child controls.</summary>
      <param name="ctrl">The <see cref="T:System.Web.UI.Control" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsChild(System.Web.UI.Control,System.Web.UI.Control)">
      <summary>Verifies that <paramref name="child" /> is a child control of <paramref name="parent" /></summary>
      <param name="parent">The parent.</param>
      <param name="child">The child.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsChild(System.Web.UI.Control,System.String)">
      <summary>Verifies that <paramref name="childID" /> is the ID of a child control of <paramref name="parent" /></summary>
      <param name="parent">The parent control.</param>
      <param name="childID">The ID of the child control.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsEnableViewState(System.Web.UI.Control)">
      <summary>Verifies that <paramref name="ctrl" /> has ViewState enabled.</summary>
      <param name="ctrl">The <see cref="T:System.Web.UI.Control" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsIDEqual(System.Web.UI.Control,System.String)">
      <summary>Verifies that <paramref name="ctrl" /> ID is equal to <paramref name="id" />.</summary>
      <param name="ctrl">The <see cref="T:System.Web.UI.Control" /> to test.</param>
      <param name="id">The expected ID</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsNotChild(System.Web.UI.Control,System.Web.UI.Control)">
      <summary>Verifies that <paramref name="child" /> is a not child control of <paramref name="parent" /></summary>
      <param name="parent">The parent <see cref="T:System.Web.UI.Control" /></param>
      <param name="child">The control that should not be the child of <paramref name="parent" />.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsNotChild(System.Web.UI.Control,System.String)">
      <summary>Verifies that <paramref name="childID" /> is the not ID of a child control of <paramref name="parent" /></summary>
      <param name="parent">The parent.</param>
      <param name="childID">The ID of the control that should not be the child of <paramref name="parent" />.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsNotEnableViewState(System.Web.UI.Control)">
      <summary>Verifies that <paramref name="ctrl" /> has <strong>not</strong> ViewState enabled.</summary>
      <param name="ctrl">The <see cref="T:System.Web.UI.Control" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsNotPostBack(System.Web.UI.Page)">
      <summary>Verifies that the <see cref="P:System.Web.UI.Page.IsPostBack" /> property of <paramref name="page" /> is false.</summary>
      <param name="page">The <see cref="T:System.Web.UI.Page" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsNotSmartNavigation(System.Web.UI.Page)">
      <summary>Verifies that the <see cref="P:System.Web.UI.Page.SmartNavigation" /> property of <paramref name="page" /> is false.</summary>
      <param name="page">The <see cref="T:System.Web.UI.Page" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsNotValid(System.Web.UI.Page)">
      <summary>Verifies that the <see cref="P:System.Web.UI.Page.IsValid" /> property of <paramref name="page" /> is false.</summary>
      <param name="page">The <see cref="T:System.Web.UI.Page" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsNotVisible(System.Web.UI.Control)">
      <summary>Verifies that <paramref name="ctrl" /> is not visible.</summary>
      <param name="ctrl">The <see cref="T:System.Web.UI.Control" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsPostBack(System.Web.UI.Page)">
      <summary>Verifies that the <see cref="P:System.Web.UI.Page.IsPostBack" /> property of <paramref name="page" /> is true.</summary>
      <param name="page">The <see cref="T:System.Web.UI.Page" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsSmartNavigation(System.Web.UI.Page)">
      <summary>Verifies that the <see cref="P:System.Web.UI.Page.SmartNavigation" /> property of <paramref name="page" /> is true.</summary>
      <param name="page">The <see cref="T:System.Web.UI.Page" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsValid(System.Web.UI.Page)">
      <summary>Verifies that the <see cref="P:System.Web.UI.Page.IsValid" /> property of <paramref name="page" /> is true.</summary>
      <param name="page">The <see cref="T:System.Web.UI.Page" /> to test.</param>
    </member>
    <member name="M:MbUnit.Framework.WebAssert.IsVisible(System.Web.UI.Control)">
      <summary>Verifies that <paramref name="ctrl" /> is visible.</summary>
      <param name="ctrl">The <see cref="T:System.Web.UI.Control" /> to test.</param>
    </member>
    <member name="T:MbUnit.Framework.WriteAttribute">
      <summary>Tag use to mark a method that writes data to a device.</summary>
    </member>
    <member name="T:MbUnit.Framework.XmlAssert">
      <summary>Class containing generic assert methods for XML markup This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XPathEvaluatesTo(System.String,System.String,System.String)">
      <summary>Asserts that the flattened String obtained by executing an Xpath on some XML is a particular value</summary>
      <param name="anXPathExpression">An X path expression.</param>
      <param name="inXml">The XML to test.</param>
      <param name="expectedValue">The expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XPathEvaluatesTo(System.String,System.IO.TextReader,System.String)">
      <summary>Asserts that the flattened String obtained by executing an Xpath on some XML is a particular value</summary>
      <param name="anXPathExpression">An X path expression.</param>
      <param name="inXml">The XML to test.</param>
      <param name="expectedValue">The expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XPathEvaluatesTo(System.String,MbUnit.Framework.Xml.XmlInput,System.String)">
      <summary>Asserts that the flattened String obtained by executing an Xpath on some XML is a particular value</summary>
      <param name="anXPathExpression">An X path expression.</param>
      <param name="inXml">The XML to test.</param>
      <param name="expectedValue">The expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XPathExists(System.String,System.String)">
      <summary>Assert that an XPath expression matches at least one node in someXml</summary>
      <param name="anXPathExpression">An X path expression.</param>
      <param name="inXml">The XML being tested.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XPathExists(System.String,System.IO.TextReader)">
      <summary>Assert that an XPath expression matches at least one node in someXml</summary>
      <param name="anXPathExpression">An X path expression.</param>
      <param name="inXml">A reader ontot eh XML being tested</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XPathExists(System.String,MbUnit.Framework.Xml.XmlInput)">
      <summary>Assert that an XPath expression matches at least one node in someXml</summary>
      <param name="anXPathExpression">An X path expression.</param>
      <param name="inXml">The XML to test.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlEquals(System.IO.TextReader,System.IO.TextReader)">
      <summary>Asserts that two pieces of XML are similar.</summary>
      <param name="controlTextReader">The control text reader.</param>
      <param name="testTextReader">The test text reader.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlEquals(System.String,System.String)">
      <summary>Asserts that two pieces of XML are similar.</summary>
      <param name="controlText">The control text.</param>
      <param name="testText">The test text.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlEquals(MbUnit.Framework.Xml.XmlInput,MbUnit.Framework.Xml.XmlInput)">
      <summary>Asserts that two pieces of XML are similar.</summary>
      <param name="controlInput">The control input.</param>
      <param name="testInput">The test input.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlEquals(MbUnit.Framework.Xml.XmlDiff)">
      <summary>Asserts that two pieces of XMl are similar given their diff</summary>
      <param name="xmlDiff">The XML diff.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlIdentical(System.IO.TextReader,System.IO.TextReader)">
      <summary>Asserts that two pieces of XML are identical.</summary>
      <param name="controlTextReader">The control text reader.</param>
      <param name="testTextReader">The test text reader.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlIdentical(System.String,System.String)">
      <summary>Asserts that two pieces of XML are identical.</summary>
      <param name="controlText">The control text.</param>
      <param name="testText">The test text.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlIdentical(MbUnit.Framework.Xml.XmlInput,MbUnit.Framework.Xml.XmlInput)">
      <summary>Asserts that two pieces of XML are identical.</summary>
      <param name="controlInput">The control input.</param>
      <param name="testInput">The test input.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlIdentical(MbUnit.Framework.Xml.XmlDiff)">
      <summary>Asserts that two pieces of XML are identical given their diff</summary>
      <param name="xmlDiff">The XML diff.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlNotEquals(MbUnit.Framework.Xml.XmlDiff)">
      <summary>Asserts that two pieces of XMl are not similar given their diff</summary>
      <param name="xmlDiff">The XML diff.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlNotIdentical(MbUnit.Framework.Xml.XmlDiff)">
      <summary>Asserts that two pieces of XML are not identical given their diff</summary>
      <param name="xmlDiff">The XML diff.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlValid(System.String)">
      <summary>Asserts that <paramref name="someXml" /> is valid XML.</summary>
      <param name="someXml">The XMl to test</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlValid(System.String,System.String)">
      <summary>Asserts that <paramref name="someXml" /> is valid XML given a <paramref name="baseURI" /></summary>
      <param name="someXml">The XML to test.</param>
      <param name="baseURI">The base URI.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlValid(System.IO.TextReader)">
      <summary>Asserts that some XML is valid.</summary>
      <param name="reader">A <see cref="T:System.IO.TextReader" /> pointing to the XML to test.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlValid(System.IO.TextReader,System.String)">
      <summary>Asserts that some XML is valid given a <paramref name="baseURI" /></summary>
      <param name="reader">A <see cref="T:System.IO.TextReader" /> pointing to the XML to test.</param>
      <param name="baseURI">The base URI.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlValid(MbUnit.Framework.Xml.XmlInput)">
      <summary>Asserts that some XML is valid.</summary>
      <param name="xmlInput">The XML input.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XmlValid(MbUnit.Framework.Xml.Validator)">
      <summary>Asserts that some XML is valid.</summary>
      <param name="validator">A <see cref="T:MbUnit.Framework.Xml.Validator" /> object containing the XML to validate</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XslTransformResults(System.String,System.String,System.String)">
      <summary>Asserts that the results of an XSL transform on some XML are the expected result</summary>
      <param name="xslTransform">The XSL transform.</param>
      <param name="xmlToTransform">The XML to transform.</param>
      <param name="expectedResult">The expected result.</param>
    </member>
    <member name="M:MbUnit.Framework.XmlAssert.XslTransformResults(MbUnit.Framework.Xml.XmlInput,MbUnit.Framework.Xml.XmlInput,MbUnit.Framework.Xml.XmlInput)">
      <summary>Asserts that the results of an XSL transform on some XML are the expected result</summary>
      <param name="xslTransform">The XSL transform.</param>
      <param name="xmlToTransform">The XML to transform.</param>
      <param name="expectedResult">The expected result.</param>
    </member>
    <member name="T:MbUnit.Framework.XmlDataProviderAttribute">
      <summary>Used to tag a test fixture class to indicate that it uses information contained in an XML file that should be used as parameters for test contained in the class. To be used in conjunction with the <see cref="T:MbUnit.Framework.DataFixtureAttribute" /> and <see cref="T:MbUnit.Framework.ForEachTestAttribute" />.</summary>
    </member>
    <member name="P:MbUnit.Framework.XmlDataProviderAttribute.ResourceName">
      <summary>Gets or sets the path to the XML file</summary>
      <value>The path to the XML file</value>
    </member>
    <member name="P:MbUnit.Framework.XmlDataProviderAttribute.XPath">
      <summary>Gets or sets the XPath expression identifying the data to be used in the XMl file</summary>
      <value>The XPath expression identifying the data to be used in the XMl file</value>
    </member>
    <member name="M:MbUnit.Framework.XmlDataProviderAttribute.GetData">
      <summary>Gets the <see cref="T:System.Xml.XmlNodeList" /> to be used by the class tagged by this attribute.</summary>
      <returns>The <see cref="T:System.Xml.XmlNodeList" /> to be used by the class tagged by this attribute</returns>
    </member>
    <member name="M:MbUnit.Framework.XmlDataProviderAttribute.LoadResource">
      <summary>Loads the resource.</summary>
      <returns>A <see cref="T:System.IO.StreamReader" /> pointing to the XML file</returns>
    </member>
    <member name="T:MbUnit.Framework.CountDownTimer">
      <summary>A basic count down timer for use with <see cref="T:MbUnit.Framework.PerfAssert" /> tests. Creates an instance of <see cref="T:MbUnit.Core.Monitoring.TimeMonitor" />, starts and stops it</summary>
    </member>
    <member name="M:MbUnit.Framework.CountDownTimer.Stop">
      <summary>Stops the timer and verifies whether or not the duration of its count is less than the maxDuration specified.</summary>
    </member>
    <member name="T:MbUnit.Framework.IAssemblyResolver">
      <summary>Defines standard interface for Custom Assembly Resolver classes</summary>
    </member>
    <member name="T:MbUnit.Framework.IBackwardIterator">
      <summary>Defines an interface for iterator providers that are backwards-only</summary>
    </member>
    <member name="T:MbUnit.Framework.IBidirectionalIterator">
      <summary>Defines an interface for iterator providers that can move back and forth in their collection of values</summary>
    </member>
    <member name="T:MbUnit.Framework.IForwardIterator">
      <summary>Defines an interface for iterator providers that are forward-only</summary>
    </member>
    <member name="T:MbUnit.Framework.ITestCase">
      <summary>Interface defining a test case to be added to a test suite</summary>
    </member>
    <member name="T:MbUnit.Framework.ITestComponent">
      <summary>Interface defining a test component containing a test suite</summary>
    </member>
    <member name="T:MbUnit.Framework.ITestSuite">
      <summary>Interface defining a test suite</summary>
    </member>
    <member name="T:MbUnit.Framework.CollectionOrderTest">
      <summary>Defines the two collection sort orders for use with the <see cref="T:MbUnit.Framework.CollectionOrderFixtureAttribute" />.</summary>
    </member>
    <member name="F:MbUnit.Framework.CollectionOrderTest.OrderedAscending">
      <summary>Tests ascending order collection</summary>
    </member>
    <member name="F:MbUnit.Framework.CollectionOrderTest.OrderedDescending">
      <summary>Tests ascending order collection</summary>
    </member>
    <member name="T:MbUnit.Framework.CombinationType">
      <summary>Defines how sets of values will be combined in a <see cref="T:MbUnit.Framework.CombinatorialTestAttribute">Combinatorial Test</see></summary>
    </member>
    <member name="T:MbUnit.Framework.ResourceCleanup">
      <summary>Used to specify whether or not the test should delete the extracted resource when the test is complete.</summary>
    </member>
    <member name="F:MbUnit.Framework.ResourceCleanup.NoCleanup">
      <summary>Do not delete the extracted resource</summary>
    </member>
    <member name="F:MbUnit.Framework.ResourceCleanup.DeleteAfterTest">
      <summary>Delete the extracted resource after the test.</summary>
    </member>
    <member name="F:MbUnit.Framework.SpecialValue.Null">
      <summary>When used as parameter in a row test, it will be replaced by null (Nothing in VB).</summary>
    </member>
    <member name="T:MbUnit.Framework.TestSchedule">
      <summary>Specifies options for the execution of a helper method with respect to the running of a test</summary>
    </member>
    <member name="F:MbUnit.Framework.TestSchedule.BeforeTest">
      <summary>Specifies the helper should run before the test executes</summary>
    </member>
    <member name="F:MbUnit.Framework.TestSchedule.AfterTest">
      <summary>Specifies the helper should run after the test executes</summary>
    </member>
    <member name="T:MbUnit.Framework.TestDelegate">
      <summary>Delegate used to identify test methods being wrapped in a <see cref="T:MbUnit.Framework.TestCase" /> object for inclusion in a <see cref="T:MbUnit.Framework.TestSuite" /></summary>
    </member>
    <member name="T:MbUnit.Framework.Exceptions.MissingDbInfoException">
      <summary>Thrown if MbUnit cannot find <see cref="T:MbUnit.Framework.DbRestoreInfoAttribute" /> when required to restore a database from its backup.</summary>
    </member>
    <member name="T:MbUnit.Framework.Testers.CollectionIndexingTester">
      <summary>Collection indexing test class</summary>
    </member>
    <member name="T:MbUnit.Framework.Testers.CollectionOrderTester">
      <summary>Collection order tester class.</summary>
    </member>
    <member name="T:MbUnit.Framework.Testers.EnumerationTester">
      <summary>Tests for the <seealso cref="T:System.Collections.IEnumerable" /> and <seealso cref="T:System.Collections.IEnumerator" />.</summary>
    </member>
    <member name="F:MbUnit.Framework.Xml.DifferenceType.AttributeValueExplicitlySpecified" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.AttributeNameNotFound" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.AttributeValue">
      <summary>Comparing 2 attributes with the same name but different values</summary>
    </member>
    <member name="F:MbUnit.Framework.Xml.DifferenceType.AttributeSequence">
      <summary>Comparing 2 attribute lists with the same attributes in different sequence</summary>
    </member>
    <member name="F:MbUnit.Framework.Xml.DifferenceType.CDATAValue" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.CommentValue" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.DOCTYPE_NAME_ID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.DocTypePublicID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.DocTypeSystemID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.ElementTagName" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.ELEMENT_NUM_ATTRIBUTES_ID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.PROCESSING_INSTRUCTION_TARGET_ID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.PROCESSING_INSTRUCTION_DATA_ID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.TEXT_VALUE_ID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.NAMESPACE_PREFIX_ID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.NAMESPACE_URI_ID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.NODE_TYPE_ID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.HAS_CHILD_NODES_ID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.CHILD_NODELIST_LENGTH_ID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.CHILD_NODELIST_SEQUENCE_ID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.HAS_DOCTYPE_DECLARATION_ID" />
    <member name="F:MbUnit.Framework.Xml.DifferenceType.HAS_XML_DECLARATION_PREFIX_ID" />
  </members>
</doc>