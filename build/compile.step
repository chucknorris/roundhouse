<?xml version="1.0" encoding="utf-8" ?>
<project name="Compiler" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - Add custom tasks in BuildTasks.Custom folder with file by the same name - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <property name="file.current.no_extension" value="compile" />
  <property name="dirs.current" value="${directory::get-current-directory()}" />
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />  
  <property name="folder.build_scripts" value="build" overwrite="false" />
  <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
  <property name="dirs.build_scripts_custom" value="${dirs.current}${path.separator}${folder.build_scripts_custom}" />
  <property name="folder.code_build" value="build_output" overwrite="false" />
  <property name="dirs.build" value="${dirs.current}${path.separator}${folder.code_build}" />
  <property name="dirs.build.windows.mono" value="${string::replace(dirs.build,'\','/')}" />
  <property name="folder.documentation" value="docs" overwrite="false" />
  <property name="dirs.docs" value="${dirs.current}${path.separator}${folder.documentation}" />
  <property name="folder.database" value="__DATABASE_FOLDER_NAME__" overwrite="false" />
  <property name="dirs.db" value="${dirs.current}${path.separator}${folder.database}" />
  <property name="project.name" value="__SOLUTION_NAME_WITHOUT_SLN_EXTENSION__" overwrite="false" />
  <property name="folder.app.drop" value="${project.name}" overwrite="false" />
  <property name="folder.references" value="lib" overwrite="false" />
  <property name="dirs.lib" value="${dirs.current}${path.separator}${folder.references}" overwrite="false" />
  <property name="folder.build_artifacts" value="build_artifacts" overwrite="false" />
  <property name="dirs.build_artifacts" value="${path::get-full-path(dirs.build)}${path.separator}${folder.build_artifacts}" />
  <property name="dirs.build_results" value="${dirs.build_artifacts}${path.separator}compile" overwrite="false" />
  <property name="msbuild.logger" value="ThoughtWorks.CruiseControl.MSBuild.XmlLogger,&quot;${dirs.lib}${path.separator}NAnt${path.separator}ThoughtWorks.CruiseControl.MSBuild.dll&quot;" />
  <property name="path_to_solution" value="." overwrite="false" />
  <property name="microsoft.framework" value="net-3.5" overwrite="false" />
  <property name="msbuild.configuration" value="Release" overwrite="false" />
  <property name="msbuild.platform" value="Any CPU" overwrite="false" />
  <property name="msbuild.override_output_path" value="true" overwrite="false" />
  <property name="msbuild.outputpath" value="${dirs.build}${path.separator}${folder.app.drop}" overwrite="false" />
  <property name="msbuild.outputpath.windows.mono" value="${string::replace(msbuild.outputpath,'\','/')}" />
  <property name="solution.path" value="${dirs.current}${path.separator}${path_to_solution}${path.separator}${project.name}.sln" />
  <property name="solution.path.windows.mono" value="${string::replace(dirs.current,'\','/')}/${string::replace(path_to_solution,'\','/')}/${project.name}.sln" />
  <property name="solution.path" value="${dirs.current}${path.separator}${path_to_solution}${path.separator}${project.name}.vbp" if="${microsoft.framework =='vb6'}" />
  <property name="nant.settings.currentframework" value="mono-2.0" if="${platform::is-unix()}" />
  <property name="nant.settings.currentframework" value="net-3.5" if="${microsoft.framework !='vb6' and platform::is-windows()}" />
  <property name="app.xbuild" value="C:\Program Files (x86)\Mono-2.8\bin\xbuild.bat" overwrite="false" if="${platform::is-windows() and file::exists('C:\Program Files (x86)\Mono-2.8\bin\xbuild.bat')}" />
  <property name="app.xbuild" value="C:\Program Files\Mono-2.8\bin\xbuild.bat" overwrite="false" if="${platform::is-windows() and file::exists('C:\Program Files\Mono-2.8\bin\xbuild.bat')}" />
  <property name="app.xbuild" value="xbuild" overwrite="false" if="${platform::is-unix()}" />
  <property name="framework.multitargeting" value="false" />
  <property name="framework.multitargeting.delimiter" value="," />
  <property name="is.replaced" value="false" />
  <property name="fail.build.on.error" value="true" />
  <property name="app.ruby" value="C:\Ruby\bin\ruby.exe" overwrite="false" />
  <property name="app.powershell" value="%WINDIR%\System32\WindowsPowerShell\v1.0\powershell.exe" overwrite="false" />

  <target name="go" depends="load_uppercut_assemblies, run_tasks" />
  
  <property name="file.uppercut.assembly" value="uppercut.tasks.dll" />
    <property name="path.uppercut.assembly" value="${dirs.current.file}${path.separator}${file.uppercut.assembly}" />
  <target name="load_uppercut_assemblies">
    <loadtasks assembly="${path.uppercut.assembly}" if="${file::exists(path.uppercut.assembly)}" />
  </target>

  <target name="run_tasks">
    <echo level="Warning" message="" />
    <echo level="Warning" message="====================" />
    <echo level="Warning" message="${project::get-name()}" />
    <echo level="Warning" message="====================" />
    <call target="prepare" if="${target::exists('prepare')}" />
    <call target="check_for_multitargeting" if="${target::exists('check_for_multitargeting')}" />
    <customExtension extends="${project::get-buildfile-path()}" type="pre" failonerror="${fail.build.on.error}" />
    <customExtension extends="${project::get-buildfile-path()}" type="replace" failonerror="${fail.build.on.error}" />
    <call target="run_normal_tasks" if="${not is.replaced}" />
    <customExtension extends="${project::get-buildfile-path()}" type="post" failonerror="${fail.build.on.error}" />
    <call target="set_file_attributes_to_normal" />
  </target>
  
  <target name="prepare">
    <echo message="Removing and adding ${dirs.build_results}."/>
    <delete dir="${dirs.build_results}" failonerror="false" />
    <mkdir dir="${dirs.build_results}" />
  </target>

  <target name="run_normal_tasks"
          depends="error_check, set_vars, build_code, copy_documentation, copy_db"
          description="Compiling project." />

  <target name="error_check">
    <fail message="You must fill out the project.name, repository.path, and company.name settings in the settings${path.separator}UppercuT.config file. Please do that and retry the build."
      if="${project.name=='__SOLUTION_NAME_WITHOUT_SLN_EXTENSION__'}" />
  </target>

  <target name="check_for_multitargeting">
    <if test="${string::contains(microsoft.framework,',')}">
      <echo level="Warning" message="You want to multi target, eh? You passed a comma into the framework: ${microsoft.framework}" />
      <property name="framework.multitargeting" value="true" />
      <property name="framework.multitargeting.delimiter" value="," />
    </if>
    <if test="${string::contains(microsoft.framework,';')}">
      <echo level="Warning" message="You want to multi target, eh? You passed a semicolon into the framework: ${microsoft.framework}" />
      <property name="framework.multitargeting" value="true" />
      <property name="framework.multitargeting.delimiter" value=";" />
    </if>
  </target>
  
  <target name="set_vars">
    <echo level="Warning" message="Setting compile variables" />
    <setenv name="EnableNuGetPackageRestore" value="true"/>
  </target>
  
  <target name="build_code" depends="" description="Building Library">
    <echo level="Warning" message="Compiling ${solution.path}."/>
    <call target="build_dotNET_code" if="${microsoft.framework !='vb6'}" />
    <call target="build_vb6_code" if="${microsoft.framework =='vb6'}" />
  </target>

  <target name="build_dotNET_code" >
    <if test="${framework.multitargeting}">
      <foreach item="String" in="${microsoft.framework}" delim="${framework.multitargeting.delimiter}" property="framework.specific">
        <property name="msbuild.outputpath" value="${dirs.build}${path.separator}${folder.app.drop}${path.separator}${framework.specific}" />
        <property name="msbuild.outputpath.windows.mono" value="${string::replace(msbuild.outputpath,'\','/')}" />
        <property name="microsoft.framework.specific" value="${string::trim(framework.specific)}" />
        <call target="build_dotNet_code_framework" />
      </foreach>
    </if>
    <if test="${not framework.multitargeting}">
      <property name="microsoft.framework.specific" value="${string::trim(microsoft.framework)}" />
      <call target="build_dotNet_code_framework" />
    </if>
  </target>
  
  <target name="build_dotNet_code_framework">
    <echo level="Warning" message="Building on ${framework::get-version(microsoft.framework.specific)}" />
    <property name="nant.settings.currentframework" value="${string::trim(microsoft.framework.specific)}" />
    <mkdir dir="${msbuild.outputpath}" />
    <if test="${platform::is-unix()}">
      <!-- Do clean and build in two steps since xbuild has a bug with using OutputPath and Rebuild together Bug #628525 at Novell -->
      <echo level="Warning" message="Cleaning build..." />
      <exec program="${app.xbuild}"
          basedir="/usr/bin"
          workingdir="${dirs.build}"
          commandline="${solution.path} /nologo /property:OutputPath='${msbuild.outputpath}' /property:Configuration=${msbuild.configuration} /verbosity:minimal /noconsolelogger /target:Clean" />
      <echo level="Warning" message="Building..." />
      <exec program="${app.xbuild}"
          basedir="/usr/bin"
          workingdir="${dirs.build}"
          commandline="${solution.path} /nologo /property:OutputPath='${msbuild.outputpath}' /property:Configuration=${msbuild.configuration} /verbosity:minimal /noconsolelogger" />
    </if>
    <if test="${platform::is-windows()}">
      <!-- nant is retarded - I had to have four of these instead of throwing an if on the outputpath and targets -->
      <if test="${msbuild.override_output_path}">
        <if test="${framework.multitargeting}">
          <if test="${framework::get-family(microsoft.framework.specific) == 'mono'}" >
            <!-- Do clean and build in two steps since xbuild has a bug with using OutputPath and Rebuild together Bug #628525 at Novell -->
            <echo level="Warning" message="Cleaning build..." />
            <exec program="${app.xbuild}"
                basedir="${dirs.build.windows.mono}"
                workingdir="${dirs.build.windows.mono}"
                commandline="${solution.path.windows.mono} /nologo /property:OutputPath='${msbuild.outputpath}' /property:Configuration=${msbuild.configuration} /verbosity:minimal /noconsolelogger /target:Clean" />
            <echo level="Warning" message='Building...by running this command ${app.xbuild} ${solution.path.windows.mono} /nologo /property:OutputPath="${msbuild.outputpath.windows.mono}" /property:Configuration=${msbuild.configuration} /verbosity:minimal' />
            <exec program="${app.xbuild}"
                basedir="${dirs.build.windows.mono}"
                workingdir="${dirs.build.windows.mono}"
                commandline='${solution.path.windows.mono} /nologo /property:OutputPath="${msbuild.outputpath.windows.mono}" /property:Configuration=${msbuild.configuration} /verbosity:minimal' />
          </if>
          <if test="${framework::get-family(microsoft.framework.specific) != 'mono'}" >
            <msbuild project="${solution.path}" verbosity="minimal" if="${microsoft.framework.specific != 'net-1.0' and microsoft.framework.specific != 'net-1.1'}">
              <property name="Configuration" value="${msbuild.configuration}" />
              <property name="OutputPath" value="${msbuild.outputpath}" />
              <property name="Platform" value="${msbuild.platform}" />
              <property name="TargetFrameworkVersion" value="v${framework::get-version(microsoft.framework.specific)}" />
              <property name="ToolsVersion" value="${framework::get-version(microsoft.framework.specific)}" />
              <!--property name="Logger" value="${msbuild.logger};&quot;${dirs.build_results}${path.separator}msbuild-${microsoft.framework.specific}-results.xml&quot;" /-->
              <arg line="/l:${msbuild.logger};&quot;${dirs.build_results}${path.separator}msbuild-${microsoft.framework.specific}-results.xml&quot;" />
            </msbuild>
            <solution 
              configuration="${msbuild.configuration}" 
              solutionfile="${solution.path}" 
              outputdir="${msbuild.outputpath}" 
              platform="${msbuild.platform}" 
              if="${microsoft.framework.specific == 'net-1.0' or microsoft.framework.specific == 'net-1.1'}" 
            />
          </if>
        </if>
        <if test="${not framework.multitargeting}">
          <if test="${framework::get-family(microsoft.framework.specific) == 'mono'}" >
            <!-- Do clean and build in two steps since xbuild has a bug with using OutputPath and Rebuild together Bug #628525 at Novell -->
            <echo level="Warning" message="Cleaning build..." />
            <exec program="${app.xbuild}"
                basedir="${dirs.build.windows.mono}"
                workingdir="${dirs.build.windows.mono}"
                commandline="${solution.path.windows.mono} /nologo /property:OutputPath='${msbuild.outputpath}' /property:Configuration=${msbuild.configuration} /verbosity:minimal /noconsolelogger /target:Clean" />
            <echo level="Warning" message='Building without multitargeting by running this command ${app.xbuild} ${solution.path.windows.mono} /nologo /property:OutputPath="${msbuild.outputpath.windows.mono}" /property:Configuration=${msbuild.configuration} /verbosity:minimal' />
            <exec program="${app.xbuild}"
                basedir="${dirs.build.windows.mono}"
                workingdir="${dirs.build.windows.mono}"
                commandline='${solution.path.windows.mono} /nologo /property:OutputPath="${msbuild.outputpath.windows.mono}" /property:Configuration=${msbuild.configuration} /verbosity:minimal' />
          </if>
          <if test="${framework::get-family(microsoft.framework.specific) != 'mono'}" >
            <msbuild project="${solution.path}" verbosity="minimal" if="${microsoft.framework.specific != 'net-1.0' and microsoft.framework.specific != 'net-1.1'}">
              <property name="Configuration" value="${msbuild.configuration}" />
              <property name="OutputPath" value="${msbuild.outputpath}" />
              <property name="Platform" value="${msbuild.platform}" />
              <!--property name="Logger" value="${msbuild.logger};&quot;${dirs.build_results}${path.separator}msbuild-${microsoft.framework.specific}-results.xml&quot;" /-->
              <arg line="/l:${msbuild.logger};&quot;${dirs.build_results}${path.separator}msbuild-${microsoft.framework.specific}-results.xml&quot;" />
            </msbuild>
            <solution 
              configuration="${msbuild.configuration}" 
              solutionfile="${solution.path}" 
              outputdir="${msbuild.outputpath}" 
              platform="${msbuild.platform}" 
              if="${microsoft.framework.specific == 'net-1.0' or microsoft.framework.specific == 'net-1.1'}" 
            />
          </if>
        </if>
      </if>
      <if test="${not msbuild.override_output_path}">
        <if test="${framework.multitargeting}">
          <if test="${framework::get-family(microsoft.framework.specific) == 'mono'}" >
            <!-- Do clean and build in two steps since xbuild has a bug with using OutputPath and Rebuild together Bug #628525 at Novell -->
            <echo level="Warning" message="Cleaning build..." />
            <exec program="${app.xbuild}"
                basedir="${dirs.build}"
                workingdir="${dirs.build}"
                commandline="${solution.path} /nologo /property:Configuration=${msbuild.configuration} /verbosity:minimal /noconsolelogger /target:Clean" />
            <echo level="Warning" message="Building..." />
            <exec program="${app.xbuild}"
                basedir="${dirs.build}"
                workingdir="${dirs.build}"
                commandline="${solution.path} /nologo /property:Configuration=${msbuild.configuration} /verbosity:minimal" />
          </if>
          <if test="${framework::get-family(microsoft.framework.specific) != 'mono'}" >
            <msbuild project="${solution.path}" verbosity="minimal" if="${microsoft.framework.specific != 'net-1.0' and microsoft.framework.specific != 'net-1.1'}">
              <property name="Configuration" value="${msbuild.configuration}" />
              <property name="Platform" value="${msbuild.platform}" />
              <property name="TargetFrameworkVersion" value="v${framework::get-version(microsoft.framework.specific)}" />
              <property name="ToolsVersion" value="${framework::get-version(microsoft.framework.specific)}" />
              <!--property name="Logger" value="${msbuild.logger};&quot;${dirs.build_results}${path.separator}msbuild-${microsoft.framework.specific}-results.xml&quot;" /-->
              <arg line="/l:${msbuild.logger};&quot;${dirs.build_results}${path.separator}msbuild-${microsoft.framework.specific}-results.xml&quot;" />
            </msbuild>
            <solution 
              configuration="${msbuild.configuration}" 
              solutionfile="${solution.path}" 
              platform="${msbuild.platform}" 
              if="${microsoft.framework.specific == 'net-1.0' or microsoft.framework.specific == 'net-1.1'}" 
            />
          </if>
        </if>
        <if test="${not framework.multitargeting}">
          <if test="${framework::get-family(microsoft.framework.specific) == 'mono'}" >
            <!-- Do clean and build in two steps since xbuild has a bug with using OutputPath and Rebuild together Bug #628525 at Novell -->
            <echo level="Warning" message="Cleaning build..." />
            <exec program="${app.xbuild}"
                basedir="${dirs.build.windows.mono}"
                workingdir="${dirs.build.windows.mono}"
                commandline="${solution.path.windows.mono} /nologo /property:Configuration=${msbuild.configuration} /verbosity:minimal /noconsolelogger /target:Clean" />
            <echo level="Warning" message="Building...by running this command ${app.xbuild} ${solution.path.windows.mono} /nologo /property:Configuration=${msbuild.configuration} /verbosity:minimal" />
            <exec program="${app.xbuild}"
                basedir="${dirs.build.windows.mono}"
                workingdir="${dirs.build.windows.mono}"
                commandline="${solution.path.windows.mono} /nologo /property:Configuration=${msbuild.configuration} /verbosity:minimal" />
          </if>
          <if test="${framework::get-family(microsoft.framework.specific) != 'mono'}" >
            <msbuild project="${solution.path}" verbosity="minimal" if="${microsoft.framework.specific != 'net-1.0' and microsoft.framework.specific != 'net-1.1'}">
              <property name="Configuration" value="${msbuild.configuration}" />
              <property name="Platform" value="${msbuild.platform}" />
              <!--property name="Logger" value="${msbuild.logger};&quot;${dirs.build_results}${path.separator}msbuild-${microsoft.framework.specific}-results.xml&quot;" /-->
              <arg line="/l:${msbuild.logger};&quot;${dirs.build_results}${path.separator}msbuild-${microsoft.framework.specific}-results.xml&quot;" />
            </msbuild>
            <solution 
              configuration="${msbuild.configuration}" 
              solutionfile="${solution.path}" 
              platform="${msbuild.platform}" 
              if="${microsoft.framework.specific == 'net-1.0' or microsoft.framework.specific == 'net-1.1'}" 
            />
          </if>
        </if>
      </if>
    </if>
  </target>

  <target name="build_vb6_code">
    <vb6 project="${solution.path}" outdir="${dirs.build}${path.separator}${folder.app.drop}" />
  </target>

  <target name="copy_documentation">
    <echo level="Warning" message="Building documentation files to ${dirs.build}${path.separator}${folder.documentation}."/>
    <copy todir="${dirs.build}${path.separator}${folder.documentation}">
      <fileset basedir="${dirs.docs}">
        <include name="**/*.*" />
      </fileset>
    </copy>
  </target>

  <target name="copy_db">
    <echo level="Warning" message="Building database files to ${dirs.build}${path.separator}${folder.database}."/>
    <copy todir="${dirs.build}${path.separator}${folder.database}">
      <fileset basedir="${dirs.db}">
        <exclude name="**/*.csproj" />
        <exclude name="**/*.csproj.user" />
        <exclude name="bin/**/*.*" />
        <exclude name="obj/**/*.*" />
        <exclude name="Properties/**/*.*" />
        <include name="**/*.*" />
      </fileset>
    </copy>
  </target>

  <target name="set_file_attributes_to_normal">
    <echo level="Warning" message="Removing read only attributes that some source control things put on files in '${dirs.build}'." />
    <attrib normal="true">
      <fileset basedir="${dirs.build}">
        <include name="**/*" />
      </fileset>
    </attrib>
  </target>  
  
</project>