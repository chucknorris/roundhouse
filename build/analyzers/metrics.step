<?xml version="1.0" encoding="utf-8" ?>
<project name="Visual Studio Code Metrics" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <include buildfile="..${path.separator}csharp.functions" />
  <property name="file.current.no_extension" value="metrics" />
  <property name="dirs.current" value="${directory::get-current-directory()}" />  
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />  
  <property name="folder.build_scripts" value="build" overwrite="false" />
  <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
  <property name="dirs.build_scripts_custom" value="${dirs.current}${path.separator}${folder.build_scripts_custom}${path.separator}analyzers" />
  <property name="folder.code_build" value="build_output" overwrite="false" />
  <property name="dirs.build" value="${dirs.current}${path.separator}${folder.code_build}" />
  <property name="folder.app.drop" value="${project.name}" overwrite="false" />
  <property name="dirs.build.code" value="${dirs.build}${path.separator}${folder.app.drop}" overwrite="false" />
  <property name="folder.build_artifacts" value="build_artifacts" overwrite="false" />
  <property name="dirs.build_artifacts" value="${path::get-full-path(dirs.build)}${path.separator}${folder.build_artifacts}" />
  <property name="folder.program_files" value="${environment::get-folder-path('ProgramFiles')}" />
  <property name="project.name" value="__SOLUTION_NAME_WITHOUT_SLN_EXTENSION__" overwrite="false" />
  <property name="folder.references" value="lib" overwrite="false" />
  <property name="dirs.lib" value="${dirs.current}${path.separator}${folder.references}" overwrite="false" />
  <property name="dirs.metrics_results" value="${path::get-full-path(dirs.build_artifacts)}${path.separator}metrics" />
  <property name="app.metrics" value="${path::get-full-path(folder.program_files)}${path.separator}Microsoft Visual Studio 10.0${path.separator}Team Tools${path.separator}Static Analysis Tools${path.separator}FxCop${path.separator}Metrics.exe" overwrite="false" />
  <property name="file.metrics_results" value="${project.name}.Metrics.xml" />
  <property name="file.metrics_log" value="${project.name}.Metrics.log" />
  <property name="args.metrics" value="/searchgac /o:&quot;${dirs.metrics_results}${path.separator}${file.metrics_results}&quot;" />

  <property name="is.replaced" value="false" />
  <property name="fail.build.on.error" value="false" />

  <target name="go" depends="load_uppercut_assemblies, run_tasks" if="${file::exists(app.metrics)}" />

  <property name="file.uppercut.assembly" value="uppercut.tasks.dll" />
  <property name="path.uppercut.assembly" value="${dirs.current.file}${path.separator}..${path.separator}${file.uppercut.assembly}" />
  <target name="load_uppercut_assemblies">
    <loadtasks assembly="${path.uppercut.assembly}" if="${file::exists(path.uppercut.assembly)}" />
  </target>

  <target name="run_tasks" if="${file::exists(app.metrics)}" >
    <echo level="Warning" message="" />
    <echo level="Warning" message="====================" />
    <echo level="Warning" message="${project::get-name()}" />
    <echo level="Warning" message="====================" />
    <call target="prepare" if="${target::exists('prepare')}" />
    <customExtension extends="${project::get-buildfile-path()}" type="pre" failonerror="${fail.build.on.error}" />
    <customExtension extends="${project::get-buildfile-path()}" type="replace" failonerror="${fail.build.on.error}" />
    <call target="run_normal_tasks" if="${not is.replaced}" />
    <customExtension extends="${project::get-buildfile-path()}" type="post" failonerror="${fail.build.on.error}" />
  </target>

  <target name="prepare">
    <echo message="Removing and adding ${dirs.metrics_results}."/>
    <delete dir="${dirs.metrics_results}" failonerror="false" />
    <mkdir dir="${dirs.metrics_results}" />
  </target>

  <target name="run_normal_tasks"
          depends="get_regular_dlls, metrics"
          description="Using Visual Studio Code Metrics to report on the complexity and maintainability of your project(s)."
          if="${file::exists(app.metrics)}" />

  <target name="get_regular_dlls">
    <echo level="warning" message="Getting output dlls based on name in directory ${path::get-full-path(dirs.build.code)}." />
    <property name="dll.names" value="" />
    <property name="dll.args" value="" />
    <foreach item="File" property="dll.filename">
      <in>
        <items>
          <exclude name="${dirs.build.code}${path.separator}lib${path.separator}**" />
          <exclude name="${dirs.build.code}${path.separator}**${path.separator}NUnit*.dll" />
          <exclude name="${dirs.build.code}${path.separator}**${path.separator}MbUnit*.dll" />
          <exclude name="${dirs.build.code}${path.separator}**${path.separator}TestFu.dll" />
          <exclude name="${dirs.build.code}${path.separator}**${path.separator}QuickGraph*.dll" />
          <exclude name="${dirs.build.code}${path.separator}**${path.separator}Refly*.dll" />
          <exclude name="${dirs.build.code}${path.separator}**${path.separator}Rhino.Mocks*.dll" />
          <exclude name="${dirs.build.code}${path.separator}**${path.separator}*bdd*.dll" />
          <exclude name="${dirs.build.code}${path.separator}**${path.separator}*Test*dll" />
          <exclude name="${dirs.build.code}${path.separator}**${path.separator}*Spec*dll" />
          <include name="${dirs.build.code}${path.separator}**${path.separator}*.dll" />
          <include name="${dirs.build.code}${path.separator}**${path.separator}*.exe" />
        </items>
      </in>
      <do>
        <property name="dll.names" value="${dll.names + ' ' + string::replace(string::replace(dll.filename,path::get-full-path(dirs.build.code) + '\',''),'\',path.separator) + ''}" />
        <property name="dll.args" value="${dll.args + ' /f:&quot;' + string::replace(string::replace(dll.filename,path::get-full-path(dirs.build.code) + '\',''),'\',path.separator) + '&quot;'}" />
      </do>
    </foreach>

    <echo level="Warning" message="Running Visual Studio Code Metrics against these files - ${dll.names}." unless="${dll.names == ''}" />
    <echo level="Warning" message="No dlls to run against." if="${dll.names == ''}" />

      <property name="args.metrics" value=" ${dll.args} ${args.metrics}" />
  </target>

  <target name="metrics" if="${file::exists(app.metrics) and dll.args != ''}" >
    <echo level="Warning" message="Attempting to run Visual Studio Code Metrics. Creating file at ${file.metrics_results} and logging at ${file.metrics_log}." />

    <exec program="${app.metrics}" workingdir="${dirs.build.code}">
      <arg line="${args.metrics}" />
    </exec>

  </target>

  <target name="open_results">
    <echo message="Opening results - ${path::get-full-path(dirs.metrics_results) + path.separator + file.metrics_results}."/>
    <results display="${path::get-full-path(dirs.metrics_results) + path.separator + file.metrics_results}" />
  </target>

</project>
