<?xml version="1.0" encoding="utf-8" ?>
<project name="XUnitTester" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - This follows a convention for testing with Integration tests being separated from Unit tests - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <include buildfile="..${path.separator}csharp.functions" />
  <property name="file.current.no_extension" value="xunit.test" />
  <property name="dirs.current" value="${directory::get-current-directory()}" />
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />  
  <property name="folder.build_scripts" value="build" overwrite="false" />
  <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
  <property name="dirs.build_scripts_custom" value="${dirs.current}${path.separator}${folder.build_scripts_custom}${path.separator}analyzers" />
  <property name="folder.code_build" value="build_output" overwrite="false" />
  <property name="dirs.build" value="${dirs.current}${path.separator}${folder.code_build}" />
  <property name="folder.app.drop" value="${project.name}" overwrite="false" />
  <property name="dirs.build.code" value="${dirs.build}${path.separator}${folder.app.drop}" overwrite="false" />
  <property name="folder.references" value="lib" overwrite="false" />
  <property name="dirs.lib" value="${dirs.current}${path.separator}${folder.references}" overwrite="false" />
  <property name="microsoft.framework" value="net-3.5" overwrite="false" />
  <property name="folder.build_artifacts" value="build_artifacts" overwrite="false" />
  <property name="dirs.build_artifacts" value="${path::get-full-path(dirs.build)}${path.separator}${folder.build_artifacts}" />
  
  <property name="dirs.test_results" value="${dirs.build_artifacts}${path.separator}xunit" overwrite="false" />
  <property name="file.test_results" value="index" overwrite="false" />
  <property name="tests.excluded_categories.comma_separated" value="Database,Integration,Slow,NotWorking,Ignore,database,integration,slow,notworking,ignore" overwrite="false" />
  <property name="xunit.separator" value="--" if="${platform::is-unix()}" />
  <property name="xunit.separator" value="-" if="${platform::is-windows()}" />
  <property name="test.args" value="${xunit.separator}xml &quot;${dirs.test_results}${path.separator}xunit-results.xml&quot; ${xunit.separator}html &quot;${dirs.test_results}${path.separator}xunit-results.html&quot; ${xunit.separator}nunit &quot;${dirs.test_results}${path.separator}nunit-nresults.xml&quot; " />
  <property name="test.args.exclude" value="${xunit.separator}exclude=&quot;${tests.excluded_categories.comma_separated}&quot;" />
  <property name="app.xunit.console" value="${path::get-full-path(dirs.lib)}${path.separator}xUnit${path.separator}xunit.console.x86.exe" overwrite="false" if="${platform::is-windows()}" />
  <property name="app.xunit.console" value="${path::get-full-path(dirs.lib)}${path.separator}xUnit${path.separator}xunit-console" overwrite="false" if="${platform::is-unix()}"/>
  <property name="dlls.test" value="" />
  <property name="tests.ran" value="false" />
  <property name="tests.run_all" value="false" />
  
  <property name="is.replaced" value="false" />
  <property name="fail.build.on.error" value="true" />
 
  <target name="go" depends="run_tasks"  if="${file::exists(app.xunit.console)}" />

  <target name="run_all_tests" depends="prepare, set_run_all_flag, run_tests, generate_report" description="Like go but runs all tests" />
  
  <target name="run_tasks" if="${file::exists(app.xunit.console)}" >
    <echo level="Warning" message="" />
    <echo level="Warning" message="====================" />
    <echo level="Warning" message="${project::get-name()}" />
    <echo level="Warning" message="====================" />
    <call target="prepare" if="${target::exists('prepare')}" />
    <customExtension extends="${project::get-buildfile-path()}" type="pre" failonerror="${fail.build.on.error}" />
    <customExtension extends="${project::get-buildfile-path()}" type="replace" failonerror="${fail.build.on.error}" />
    <call target="run_normal_tasks" if="${not is.replaced}" />
    <customExtension extends="${project::get-buildfile-path()}" type="post" failonerror="${fail.build.on.error}" />
  </target>

  <target name="run_normal_tasks"
          depends="run_tests, generate_report"
          description="Testing with NUnit." />

  <target name="prepare">
    <echo level="Warning" message="Removing and adding ${dirs.test_results}."/>
    <delete dir="${dirs.test_results}" failonerror="false" />
    <mkdir dir="${dirs.test_results}" />
  </target>

  <target name="set_run_all_flag">
    <echo level="Warning" message="Running ALL test assemblies including integration and database tests with xUnit." />
    <property name="tests.run_all" value="true" />
  </target>
  
  <target name="run_tests" depends="prepare" description="Running Unit Tests">
    <foreach item="File" property="dll.filename">
      <in>
        <items>
          <exclude name="${dirs.build.code}${path.separator}lib${path.separator}**" />
          <exclude name="${dirs.build.code}${path.separator}**${path.separator}*Database*dll" if="${not tests.run_all}" />
          <exclude name="${dirs.build.code}${path.separator}**${path.separator}*.Integration*dll" if="${not tests.run_all}" />
          <exclude name="${dirs.build.code}${path.separator}**${path.separator}TestFu.dll" />
          <exclude name="${dirs.build.code}${path.separator}**${path.separator}Microsoft.*.dll" />
          <include name="${dirs.build.code}${path.separator}**${path.separator}*.Tests.*dll" />
          <include name="${dirs.build.code}${path.separator}**${path.separator}*Spec*dll" />
        </items>
      </in>
      <do>
        <if test="${dll.filename !=''}">
          <property name="dll.name" value="${string::replace(string::replace(dll.filename,path::get-full-path(dirs.build.code) + '\',''),'\',path.separator)}" />
          <property name="test.args" value="${xunit.separator}xml &quot;${dirs.test_results}${path.separator}${dll.name}-results.xml&quot; ${xunit.separator}html &quot;${dirs.test_results}${path.separator}${dll.name}-results.html&quot; ${xunit.separator}nunit &quot;${dirs.test_results}${path.separator}${dll.name}-nresults.xml&quot; " />
          <property name="args.test_runner" value="${dll.name} ${test.args} " />
          <echo level="Warning" message="Running tests using xUnit with args '${args.test_runner}' and putting results in ${dirs.test_results}."/>
          <exec 
            program="${app.xunit.console}" 
            workingdir="${dirs.build.code}"
            failonerror="true">
          <arg value="${args.test_runner}" />
          </exec>
          <property name="tests.ran" value="true" />
        </if>
      </do>
    </foreach>
  </target>

  <target name="generate_report">
    <if test="${tests.ran}">
      <nunit2report todir="${dirs.test_results}" failonerror="false" >
        <fileset>
        <include name="${dirs.test_results}${path.separator}*-nresults.xml"/>
        </fileset>
      </nunit2report>
    </if>
  </target>
  
  <target name="open_results">
    <echo level="Warning" message="Opening results - ${path::get-full-path(dirs.test_results) + path.separator + file.test_results + '.html'}" />
    <results display="${path::get-full-path(dirs.test_results) + path.separator + file.test_results + '.html'}" />
  </target>

</project>