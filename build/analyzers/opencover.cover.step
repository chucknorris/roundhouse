<?xml version="1.0" encoding="utf-8" ?>
<project name="OpenCover" default="go">
    <!-- Project UppercuT - http://projectuppercut.org -->
    <!-- DO NOT EDIT THIS FILE - OpenCover uses NUnit to run tests - find out more at http://uppercut.pbwiki.com -->
    <property name="build.config.settings" value="__NONE__" overwrite="false" />
    <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
    <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
    <include buildfile="..${path.separator}csharp.functions" />
    <property name="file.current.no_extension" value="opencover" />
    <property name="dirs.current" value="${directory::get-parent-directory(project::get-buildfile-path())}" />
    <property name="path.to.toplevel" value="..${path.separator}.." />
    <property name="folder.build_scripts" value="build" overwrite="false" />
    <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
    <property name="dirs.build_scripts_custom" value="${dirs.current}${path.separator}${path.to.toplevel}${path.separator}${folder.build_scripts_custom}${path.separator}analyzers" />
    <property name="folder.code_build" value="build_output" overwrite="false" />
    <property name="dirs.build" value="${dirs.current}${path.separator}${path.to.toplevel}${path.separator}${folder.code_build}" />
    <property name="folder.app.drop" value="${project.name}" overwrite="false" />
    <property name="dirs.build.code" value="${dirs.build}${path.separator}${folder.app.drop}" overwrite="false" />
    <property name="folder.build_artifacts" value="build_artifacts" overwrite="false" />
    <property name="dirs.build_artifacts" value="${path::get-full-path(dirs.build)}${path.separator}${folder.build_artifacts}" />
    <property name="project.name" value="__SOLUTION_NAME_WITHOUT_SLN_EXTENSION__" overwrite="false" />
    <property name="test.framework" value="nunit" overwrite="false" />
    <property name="microsoft.framework" value="net-3.5" overwrite="false" />
    <property name="number.satisfactory_coverage" value="85" overwrite="false" />
    <property name="fail.if_opencover_fails" value="false" overwrite="false" />
    <property name="folder.references" value="lib" overwrite="false" />
    <property name="dirs.lib" value="${dirs.current}${path.separator}${path.to.toplevel}${path.separator}${folder.references}" overwrite="false" />
    <property name="dirs.opencover_results" value="${path::get-full-path(dirs.build_artifacts)}${path.separator}opencover" />
    <property name="app.opencover" value="${path::get-full-path(dirs.lib)}${path.separator}OpenCover${path.separator}OpenCover.Console.exe" overwrite="false" />
    <property name="app.opencover.explorer" value="${path::get-full-path(dirs.lib)}${path.separator}ReportGenerator${path.separator}ReportGenerator.exe" overwrite="false" />
    <property name="app.opencover.tester" value="${app.nunit.console}" overwrite="false" if="${test.framework=='nunit'}" />
    <property name="app.opencover.tester" value="${app.xunit.console}" overwrite="false" if="${test.framework=='xunit'}" />
    <property name="app.opencover.tester" value="${path::get-full-path(dirs.lib)}${path.separator}MbUnit2${path.separator}MbUnit.Cons.exe" overwrite="false" if="${test.framework=='mbunit2'}" />
    <property name="app.opencover.tester" value="${path::get-full-path(folder.program_files)}${path.separator}Gallio${path.separator}bin${path.separator}Gallio.Host.exe" overwrite="false" if="${test.framework=='gallio'}" />
    <property name="file.opencover_results" value="${dirs.opencover_results}${path.separator}${project.name}.opencover.xml" />
    <property name="file.opencover_log" value="${dirs.opencover_results}${path.separator}${project.name}.opencover.log" />
    <property name="dir.xml.code_coverage_results" value="${dirs.opencover_results}${path.separator}Xml" />
    <property name="dir.html.code_coverage_results" value="${dirs.opencover_results}${path.separator}Html" />
    <property name="file.xml.code_coverage_results" value="${project.name}.CodeCoverageSummary-results.xml" />
    <property name="file.html.code_coverage_results" value="${project.name}.CodeCoverageSummary-results.html" />
    <property name="tests.excluded_categories.comma_separated" value="Database,Integration,Slow,NotWorking" overwrite="false" />
    <property name="test.args" value="" />
    <property name="test.args" value="/rt:Text /rnf:mbUnit /rf:&quot;${dirs.opencover_results}&quot; /ec:${tests.excluded_categories.comma_separated}" if="${test.framework=='mbunit2'}" />
    <property name="test.args" value="/xml:&quot;${dirs.opencover_results}${path.separator}nunit-results.xml&quot; /nologo /framework=${microsoft.framework} /exclude:${tests.excluded_categories.comma_separated}" if="${test.framework=='nunit'}" />
    <!--property name="test.args" value="/xml:&quot;${dirs.opencover_results}\nunit-results.xml&quot; /nologo /framework=${microsoft.framework} /exclude:${tests.excluded_categories.comma_separated}" if="${test.framework=='nunit'}" /-->
    <property name="is.replaced" value="false" />
    <property name="fail.build.on.error" value="false" />
    <property name="dlls.test" value="" />

    <target name="go" depends="run_tasks" if="${file::exists(app.opencover) and test.framework !='none'}" />

    <target name="run_tasks" if="${file::exists(app.opencover) and test.framework !='none'}">
        <echo level="Warning" message="" />
        <echo level="Warning" message="====================" />
        <echo level="Warning" message="${project::get-name()}" />
        <echo level="Warning" message="====================" />
        <call target="prepare" if="${target::exists('prepare')}" />
        <customExtension extends="${project::get-buildfile-path()}" type="pre" failonerror="${fail.build.on.error}" />
        <customExtension extends="${project::get-buildfile-path()}" type="replace" failonerror="${fail.build.on.error}" />
        <call target="run_normal_tasks" if="${not is.replaced}" />
        <customExtension extends="${project::get-buildfile-path()}" type="post" failonerror="${fail.build.on.error}" />
    </target>

    <target name="run_normal_tasks"
            depends="get_test_dlls, opencover, report_generator"
            description="Using OpenCover to Analyze project for test quality indicators."
            if="${file::exists(app.opencover) and test.framework !='none'}" />

    <target name="prepare">
        <echo level="Warning" message="Removing and adding ${dirs.opencover_results}."/>
        <delete dir="${dirs.opencover_results}" failonerror="false" />
        <mkdir dir="${dirs.opencover_results}" />
    </target>

    <target name="get_test_dlls">
        <echo level="Warning" message="Getting test dlls based on name in directory ${path::get-full-path(dirs.build.code)}." />
        <property name="dll.names" value="" />
        <foreach item="File" property="dll.filename">
            <in>
                <items>
                    <exclude name="${dirs.build.code}${path.separator}lib${path.separator}**" />
                    <exclude name="${dirs.build.code}${path.separator}**${path.separator}*Database*dll" />
                    <exclude name="${dirs.build.code}${path.separator}**${path.separator}*.Integration*dll" />
                    <exclude name="${dirs.build.code}${path.separator}**${path.separator}TestFu.dll" />
                    <include name="${dirs.build.code}${path.separator}**${path.separator}*Test*dll" />
                    <include name="${dirs.build.code}${path.separator}**${path.separator}*Spec*dll" />
                </items>
            </in>
            <do>
                <property name="dll.names" value="${dll.names + ' ' + string::replace(string::replace(dll.filename,path::get-full-path(dirs.build.code) + '\',''),'\',path.separator) + ''}" />
            </do>
        </foreach>

        <property name="dlls.test" value="${dll.names}" />

        <echo level="Warning" message="No test dlls to run against" if="${dlls.test == ''}" />
        <echo level="Warning" message="Running OpenCover against these test dlls - ${dlls.test}" unless="${dlls.test == ''}" />

        <property name="args.test_runner" value="${dlls.test} ${test.args}" />
    </target>

    <target name="opencover" if="${file::exists(app.opencover) and file::exists(app.opencover.tester) and dlls.test != ''}">
        <echo level="Warning" message="Attempting to run OpenCover. Creating file at ${file.opencover_results} and logging at ${file.opencover_log}." />

        <exec program="regsvr32.exe" verbose="true">
            <arg value="/s" />
            <arg value="/n" />
            <arg value="/i:user" />
            <arg>
                <path>
                    <pathelement file="${path::get-directory-name(app.opencover)}${path.separator}x86${path.separator}OpenCover.Profiler.dll" />
                </path>
            </arg>
        </exec>

        <exec program="${app.opencover}"
            workingdir="${dirs.build.code}">
            <arg value='-target:"${app.opencover.tester}"' />
            <arg value='-targetdir:"${dirs.build.code}"' />
            <arg value="-targetargs:${dll.names}" />
            <arg value="-filter:+[${project.name}*]* -[${project.name}*Test*]*" />
            <arg value='-output:"${path::get-full-path(file.opencover_results)}"' />
        </exec>

  </target>

  <target name="report_generator" depends="opencover" if="${file::exists(app.opencover.explorer)}">

    <echo level="Warning" message="Attempting to run ReportGenerator. Creating HTML results file at ${file.html.code_coverage_results} and XML results file at ${file.xml.code_coverage_results}." />

        <exec program="${app.opencover.explorer}">
            <arg value='"${path::get-full-path(file.opencover_results)}"' />
            <arg value="${dir.html.code_coverage_results}" />
            <arg value="HtmlSummary" />
        </exec>

    </target>

  <target name="open_results">
    <echo level="Warning" message="Opening results - ${path::get-full-path(dirs.opencover_results) + path.separator + file.html.code_coverage_results}" />
    <results display="${path::get-full-path(dirs.opencover_results) + path.separator + file.html.code_coverage_results}" />
  </target>

</project>
